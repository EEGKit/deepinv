Search.setIndex({"alltitles": {"1. Data augmentation": [[296, "data-augmentation"]], "2. Equivariant denoiser or plug-and-play": [[296, "equivariant-denoiser-or-plug-and-play"]], "3. Equivariant imaging": [[296, "equivariant-imaging"]], "3D convolutions": [[289, "d-convolutions"]], "3D diffraction PSF": [[289, null]], "3D wavelet denoising": [[300, null]], "A tour of blur operators": [[282, null]], "A tour of forward sensing operators": [[292, null]], "ADMMIteration": [[144, null]], "API": [[0, null]], "Advanced": [[277, null], [299, "advanced"]], "Advanced Transformations": [[370, "id2"]], "Advanced transforms": [[9, "advanced-transforms"], [370, "advanced-transforms"]], "Adversarial Learning": [[2, "adversarial-learning"], [280, null], [299, "adversarial-learning"], [366, "adversarial-learning"]], "Adversarial Losses Overview": [[366, "id5"]], "Adversarial Networks": [[4, "adversarial-networks"], [355, null]], "AdversarialTrainer": [[243, null]], "Affine": [[252, null]], "AmplitudeLoss": [[106, null]], "AmplitudeLossDistance": [[107, null]], "Apply matched filtering to recover the signal and plot the results": [[287, "apply-matched-filtering-to-recover-the-signal-and-plot-the-results"]], "Apply transformation on dataset": [[286, "apply-transformation-on-dataset"]], "Artifact Removal": [[4, "artifact-removal"], [356, null]], "Artifact2ArtifactLoss": [[27, null]], "Artifact2ArtifactSplittingMaskGenerator": [[216, null]], "ArtifactRemoval": [[72, null]], "AutoEncoder": [[73, null]], "BM3D": [[74, null]], "Base Class": [[5, "base-class"]], "Base Classes": [[4, "base-classes"], [6, "base-classes"]], "Base class": [[2, "base-class"], [3, "base-class"], [9, "base-class"]], "BaseDEQ": [[256, null]], "BaseLossScheduler": [[28, null]], "BaseMaskGenerator": [[217, null]], "BaseOptim": [[108, null]], "BaseUnfold": [[257, null]], "Basics": [[297, null], [299, "basics"]], "Benefits of using a decomposable forward operator.": [[291, "benefits-of-using-a-decomposable-forward-operator"]], "BernoulliSplittingMaskGenerator": [[218, null]], "Blur": [[158, null], [292, "blur"]], "Blur generators": [[282, "blur-generators"]], "BlurFFT": [[159, null]], "Bregman": [[5, "bregman"], [109, null], [360, "bregman"]], "Bregman potentials": [[360, "id5"]], "BregmanL2": [[110, null]], "Bregman_ICNN": [[111, null]], "Build Sampler class": [[316, "build-sampler-class"]], "Building your custom sampling algorithm.": [[316, null]], "BurgEntropy": [[112, null]], "CBSD68": [[13, null]], "CPABDiffeomorphism": [[244, null]], "CPIteration": [[145, null]], "CSGM / AmbientGAN training": [[279, "csgm-ambientgan-training"]], "CSGMGenerator": [[75, null]], "Check learned noise level": [[330, "check-learned-noise-level"]], "Classical Denoisers": [[4, "classical-denoisers"]], "Classical denoisers": [[357, "classical-denoisers"]], "Combining Physics": [[353, "combining-physics"]], "Community": [[342, null]], "Complex denoisers": [[357, "complex-denoisers"]], "Compressed Sensing": [[292, "compressed-sensing"]], "CompressedSensing": [[160, null]], "Computation times": [[278, null], [281, null], [298, null], [304, null], [308, null], [315, null], [322, null], [332, null], [333, null], [341, null], [347, null]], "Computed Tomography": [[292, "computed-tomography"]], "Conditional GAN": [[355, "conditional-gan"]], "Conditional GAN training": [[279, "conditional-gan-training"]], "Confocal microscope PSF": [[289, "confocal-microscope-psf"]], "ConvDecoder": [[76, null]], "Convolution Basics": [[282, "convolution-basics"]], "Create a Monte Carlo sampler": [[317, "create-a-monte-carlo-sampler"]], "Create a dataloader": [[284, "create-a-dataloader"], [286, "create-a-dataloader"]], "Create forward model": [[287, "create-forward-model"]], "Create the MCMC sampler": [[320, "create-the-mcmc-sampler"]], "Create the Monte Carlo sampler": [[317, "create-the-monte-carlo-sampler"]], "Create the denoising operator and solve the problem.": [[300, "create-the-denoising-operator-and-solve-the-problem"]], "Create the preconditioned and standard ULA samplers": [[316, "create-the-preconditioned-and-standard-ula-samplers"]], "Creating a custom forward operator.": [[291, "creating-a-custom-forward-operator"]], "Creating a decomposable forward operator.": [[291, "creating-a-decomposable-forward-operator"]], "Creating a forward operator.": [[291, null]], "Creating your own dataset": [[284, null]], "Custom Unfolded Architectures": [[363, "custom-unfolded-architectures"]], "Custom Unfolded Blocks": [[10, "custom-unfolded-blocks"]], "DCGANDiscriminator": [[77, null]], "DCGANGenerator": [[78, null]], "DDRM": [[234, null]], "DEQ_builder": [[258, null]], "DIV2K": [[14, null]], "DPIR": [[113, null]], "DPIR method for PnP image deblurring.": [[309, null]], "DPS": [[235, null]], "DPS Algorithm": [[319, "dps-algorithm"]], "DPS approximation": [[319, "dps-approximation"]], "DRSIteration": [[146, null]], "DRUNet": [[79, null]], "Data Fidelity": [[5, "data-fidelity"], [360, "data-fidelity"]], "Data Fidelity Overview": [[360, "id6"]], "Data fidelity step": [[318, "data-fidelity-step"]], "DataFidelity": [[114, null]], "Datasets": [[365, null]], "Datasets Overview": [[365, "id4"]], "Decolorize": [[161, null], [292, "decolorize"]], "DecomposablePhysics": [[162, null]], "Deep Denoisers": [[4, "deep-denoisers"]], "Deep Equilibrium": [[10, "deep-equilibrium"], [363, "deep-equilibrium"]], "Deep Equilibrium (DEQ) algorithms for image deblurring": [[334, null]], "Deep Image Prior": [[4, "deep-image-prior"], [355, "deep-image-prior"]], "Deep denoisers": [[357, "deep-denoisers"], [357, "id2"]], "DeepImagePrior": [[80, null]], "DeepInverse: a PyTorch library for imaging with deep learning": [[345, null]], "Define a custom iterator for the PDNet learned primal-dual algorithm.": [[337, "define-a-custom-iterator-for-the-pdnet-learned-primal-dual-algorithm"]], "Define a custom optimization algorithm": [[310, "define-a-custom-optimization-algorithm"]], "Define a forward operator": [[288, "define-a-forward-operator"]], "Define a model": [[288, "define-a-model"]], "Define diffusion schedule": [[319, "define-diffusion-schedule"]], "Define forward operator and generate dataset": [[295, "define-forward-operator-and-generate-dataset"], [338, "define-forward-operator-and-generate-dataset"]], "Define forward operator and noise model": [[285, "define-forward-operator-and-noise-model"], [316, "define-forward-operator-and-noise-model"], [317, "define-forward-operator-and-noise-model"], [320, "define-forward-operator-and-noise-model"]], "Define loss": [[328, "define-loss"]], "Define model": [[323, "define-model"], [328, "define-model"]], "Define models": [[279, "define-models"]], "Define physics": [[323, "define-physics"]], "Define physics operator": [[283, "define-physics-operator"]], "Define the  DEQ algorithm.": [[334, "define-the-deq-algorithm"]], "Define the MMSE denoiser": [[317, "define-the-mmse-denoiser"]], "Define the PnP algorithm.": [[311, "define-the-pnp-algorithm"]], "Define the custom fStep and gStep modules": [[310, "define-the-custom-fstep-and-gstep-modules"]], "Define the deep image prior": [[285, "define-the-deep-image-prior"]], "Define the likelihood": [[320, "define-the-likelihood"]], "Define the model.": [[337, "define-the-model"]], "Define the prior": [[316, "define-the-prior"], [320, "define-the-prior"]], "Define the sampling iteration": [[316, "define-the-sampling-iteration"]], "Define the trainable prior and data fidelity terms.": [[337, "define-the-trainable-prior-and-data-fidelity-terms"]], "Define the training parameters.": [[334, "define-the-training-parameters"], [335, "define-the-training-parameters"], [336, "define-the-training-parameters"], [337, "define-the-training-parameters"], [339, "define-the-training-parameters"]], "Define the unfolded PnP algorithm.": [[339, "define-the-unfolded-pnp-algorithm"]], "Define the unfolded Proximal Gradient algorithm.": [[335, "define-the-unfolded-proximal-gradient-algorithm"], [336, "define-the-unfolded-proximal-gradient-algorithm"]], "Define the unfolded trainable model.": [[337, "define-the-unfolded-trainable-model"]], "Defining New Operators": [[351, null]], "Definition of forward operator and noise model": [[306, "definition-of-forward-operator-and-noise-model"]], "Demosaicing": [[163, null], [292, "demosaicing"]], "Denoiser": [[81, null]], "Denoisers": [[357, null]], "Denoisers Utilities": [[357, "denoisers-utilities"]], "Denoisers Utils": [[4, "denoisers-utils"]], "Denoising": [[164, null], [292, "denoising"], [305, "denoising"]], "Denoising Losses": [[366, "id2"]], "Denoising step": [[318, "denoising-step"], [319, "denoising-step"]], "DiffPIR": [[236, null]], "DiffUNet": [[82, null]], "Diffraction PSF generation": [[289, "diffraction-psf-generation"]], "Diffraction blur generators": [[282, "diffraction-blur-generators"]], "DiffractionBlurGenerator": [[219, null]], "DiffractionBlurGenerator3D": [[220, null]], "Diffusion": [[7, "diffusion"], [361, "diffusion"]], "Diffusion and MCMC Algorithms": [[361, null]], "Diffusion methods": [[361, "id2"]], "Diffusion model loading": [[319, "diffusion-model-loading"]], "DiffusionSampler": [[237, null]], "Discriminator Networks": [[355, "id2"]], "DiscriminatorLoss": [[51, null]], "DiscriminatorMetric": [[52, null]], "Display final estimated phase retrieval": [[293, "display-final-estimated-phase-retrieval"]], "Display probe overlap": [[293, "display-probe-overlap"]], "Distance": [[5, "distance"], [115, null]], "DnCNN": [[83, null]], "Downsampling": [[165, null]], "Dynamic networks": [[357, "dynamic-networks"]], "DynamicMRI": [[166, null]], "EILoss": [[29, null]], "EPLL": [[116, null]], "EPLLDenoiser": [[84, null]], "ERGAS": [[59, null]], "ESRGANDiscriminator": [[85, null]], "EquispacedMaskGenerator": [[221, null]], "Equivariant denoisers": [[357, "equivariant-denoisers"]], "EquivariantDenoiser": [[86, null]], "Euclidean": [[253, null]], "Evaluate the model on the problem and plot the results.": [[301, "evaluate-the-model-on-the-problem-and-plot-the-results"], [302, "evaluate-the-model-on-the-problem-and-plot-the-results"], [310, "evaluate-the-model-on-the-problem-and-plot-the-results"], [311, "evaluate-the-model-on-the-problem-and-plot-the-results"], [313, "evaluate-the-model-on-the-problem-and-plot-the-results"]], "Evaluate the model on the problem.": [[309, "evaluate-the-model-on-the-problem"], [312, "evaluate-the-model-on-the-problem"]], "Evaluate the reconstruction algorithm on the problem.": [[283, "evaluate-the-reconstruction-algorithm-on-the-problem"]], "Examples": [[299, null]], "Examples using AdversarialTrainer:": [[243, "examples-using-adversarialtrainer"]], "Examples using Affine:": [[252, "examples-using-affine"]], "Examples using Artifact2ArtifactLoss:": [[27, "examples-using-artifact2artifactloss"]], "Examples using ArtifactRemoval:": [[72, "examples-using-artifactremoval"]], "Examples using BaseDEQ:": [[256, "examples-using-basedeq"]], "Examples using BaseMaskGenerator:": [[217, "examples-using-basemaskgenerator"]], "Examples using BaseOptim:": [[108, "examples-using-baseoptim"]], "Examples using BaseUnfold:": [[257, "examples-using-baseunfold"]], "Examples using BernoulliSplittingMaskGenerator:": [[218, "examples-using-bernoullisplittingmaskgenerator"]], "Examples using Blur:": [[158, "examples-using-blur"]], "Examples using BlurFFT:": [[159, "examples-using-blurfft"]], "Examples using Bregman:": [[109, "examples-using-bregman"]], "Examples using BurgEntropy:": [[112, "examples-using-burgentropy"]], "Examples using CPABDiffeomorphism:": [[244, "examples-using-cpabdiffeomorphism"]], "Examples using CPIteration:": [[145, "examples-using-cpiteration"]], "Examples using CSGMGenerator:": [[75, "examples-using-csgmgenerator"]], "Examples using CompressedSensing:": [[160, "examples-using-compressedsensing"]], "Examples using ConvDecoder:": [[76, "examples-using-convdecoder"]], "Examples using DCGANDiscriminator:": [[77, "examples-using-dcgandiscriminator"]], "Examples using DCGANGenerator:": [[78, "examples-using-dcgangenerator"]], "Examples using DDRM:": [[234, "examples-using-ddrm"]], "Examples using DEQ_builder:": [[258, "examples-using-deq-builder"]], "Examples using DPIR:": [[113, "examples-using-dpir"]], "Examples using DPS:": [[235, "examples-using-dps"]], "Examples using DRUNet:": [[79, "examples-using-drunet"]], "Examples using DataFidelity:": [[114, "examples-using-datafidelity"]], "Examples using Decolorize:": [[161, "examples-using-decolorize"]], "Examples using DecomposablePhysics:": [[162, "examples-using-decomposablephysics"]], "Examples using DeepImagePrior:": [[80, "examples-using-deepimageprior"]], "Examples using Demosaicing:": [[163, "examples-using-demosaicing"]], "Examples using Denoiser:": [[81, "examples-using-denoiser"]], "Examples using Denoising:": [[164, "examples-using-denoising"]], "Examples using DiffPIR:": [[236, "examples-using-diffpir"]], "Examples using DiffUNet:": [[82, "examples-using-diffunet"]], "Examples using DiffractionBlurGenerator3D:": [[220, "examples-using-diffractionblurgenerator3d"]], "Examples using DiffractionBlurGenerator:": [[219, "examples-using-diffractionblurgenerator"]], "Examples using DiffusionSampler:": [[237, "examples-using-diffusionsampler"]], "Examples using DiscriminatorLoss:": [[51, "examples-using-discriminatorloss"]], "Examples using DnCNN:": [[83, "examples-using-dncnn"]], "Examples using Downsampling:": [[165, "examples-using-downsampling"]], "Examples using DynamicMRI:": [[166, "examples-using-dynamicmri"]], "Examples using EILoss:": [[29, "examples-using-eiloss"]], "Examples using EPLL:": [[116, "examples-using-epll"]], "Examples using ERGAS:": [[59, "examples-using-ergas"]], "Examples using EquispacedMaskGenerator:": [[221, "examples-using-equispacedmaskgenerator"]], "Examples using EquivariantDenoiser:": [[86, "examples-using-equivariantdenoiser"]], "Examples using Euclidean:": [[253, "examples-using-euclidean"]], "Examples using FNEJacobianSpectralNorm:": [[30, "examples-using-fnejacobianspectralnorm"]], "Examples using GDIteration:": [[148, "examples-using-gditeration"]], "Examples using GSDRUNet:": [[87, "examples-using-gsdrunet"]], "Examples using GaussianMaskGenerator:": [[222, "examples-using-gaussianmaskgenerator"]], "Examples using GaussianNoise:": [[168, "examples-using-gaussiannoise"]], "Examples using GaussianSplittingMaskGenerator:": [[223, "examples-using-gaussiansplittingmaskgenerator"]], "Examples using GeneratorLoss:": [[53, "examples-using-generatorloss"]], "Examples using GeneratorMixture:": [[224, "examples-using-generatormixture"]], "Examples using HDF5Dataset:": [[18, "examples-using-hdf5dataset"]], "Examples using Homography:": [[245, "examples-using-homography"]], "Examples using HyperSpectralUnmixing:": [[170, "examples-using-hyperspectralunmixing"]], "Examples using IndicatorL2:": [[118, "examples-using-indicatorl2"]], "Examples using Inpainting:": [[171, "examples-using-inpainting"]], "Examples using L1:": [[120, "examples-using-l1"]], "Examples using L2:": [[124, "examples-using-l2"]], "Examples using LinearPhysics:": [[172, "examples-using-linearphysics"]], "Examples using LogPoissonLikelihood:": [[126, "examples-using-logpoissonlikelihood"]], "Examples using LogPoissonNoise:": [[173, "examples-using-logpoissonnoise"]], "Examples using Loss:": [[34, "examples-using-loss"]], "Examples using MCLoss:": [[35, "examples-using-mcloss"]], "Examples using MOILoss:": [[37, "examples-using-moiloss"]], "Examples using MRI:": [[174, "examples-using-mri"]], "Examples using MRIMixin:": [[175, "examples-using-mrimixin"]], "Examples using MedianFilter:": [[89, "examples-using-medianfilter"]], "Examples using MonteCarlo:": [[238, "examples-using-montecarlo"]], "Examples using MotionBlurGenerator:": [[225, "examples-using-motionblurgenerator"]], "Examples using NBUDataset:": [[22, "examples-using-nbudataset"]], "Examples using Neighbor2Neighbor:": [[38, "examples-using-neighbor2neighbor"]], "Examples using OptimIterator:": [[129, "examples-using-optimiterator"]], "Examples using PDNet_DualBlock:": [[90, "examples-using-pdnet-dualblock"]], "Examples using PDNet_PrimalBlock:": [[91, "examples-using-pdnet-primalblock"]], "Examples using PGDIteration:": [[151, "examples-using-pgditeration"]], "Examples using PanNet:": [[92, "examples-using-pannet"]], "Examples using PanTiltRotate:": [[254, "examples-using-pantiltrotate"]], "Examples using Pansharpen:": [[177, "examples-using-pansharpen"]], "Examples using PatchDataset:": [[23, "examples-using-patchdataset"]], "Examples using PatchGANDiscriminator:": [[93, "examples-using-patchgandiscriminator"]], "Examples using PatchNR:": [[130, "examples-using-patchnr"]], "Examples using PatchPrior:": [[131, "examples-using-patchprior"]], "Examples using Phase2PhaseLoss:": [[39, "examples-using-phase2phaseloss"]], "Examples using PhaseRetrieval:": [[178, "examples-using-phaseretrieval"]], "Examples using Physics:": [[179, "examples-using-physics"]], "Examples using PhysicsGenerator:": [[227, "examples-using-physicsgenerator"]], "Examples using PnP:": [[132, "examples-using-pnp"]], "Examples using PoissonGaussianNoise:": [[180, "examples-using-poissongaussiannoise"]], "Examples using PoissonLikelihood:": [[133, "examples-using-poissonlikelihood"]], "Examples using PoissonNoise:": [[181, "examples-using-poissonnoise"]], "Examples using Potential:": [[135, "examples-using-potential"]], "Examples using Prior:": [[136, "examples-using-prior"]], "Examples using ProductConvolutionBlurGenerator:": [[228, "examples-using-productconvolutionblurgenerator"]], "Examples using Ptychography:": [[182, "examples-using-ptychography"]], "Examples using RED:": [[137, "examples-using-red"]], "Examples using RadioInterferometry:": [[184, "examples-using-radiointerferometry"]], "Examples using RandomMaskGenerator:": [[229, "examples-using-randommaskgenerator"]], "Examples using RandomPhaseRetrieval:": [[185, "examples-using-randomphaseretrieval"]], "Examples using Reconstructor:": [[94, "examples-using-reconstructor"]], "Examples using Reflect:": [[246, "examples-using-reflect"]], "Examples using Rotate:": [[247, "examples-using-rotate"]], "Examples using Scale:": [[248, "examples-using-scale"]], "Examples using ScorePrior:": [[138, "examples-using-scoreprior"]], "Examples using SequentialMRI:": [[186, "examples-using-sequentialmri"]], "Examples using Shift:": [[249, "examples-using-shift"]], "Examples using Similarity:": [[255, "examples-using-similarity"]], "Examples using SinglePhotonLidar:": [[187, "examples-using-singlephotonlidar"]], "Examples using SinglePixelCamera:": [[188, "examples-using-singlepixelcamera"]], "Examples using SpaceVaryingBlur:": [[189, "examples-using-spacevaryingblur"]], "Examples using SpectralAngleMapper:": [[71, "examples-using-spectralanglemapper"]], "Examples using SplittingLoss:": [[43, "examples-using-splittingloss"]], "Examples using StackedLinearPhysics:": [[190, "examples-using-stackedlinearphysics"]], "Examples using StackedPhysics:": [[191, "examples-using-stackedphysics"]], "Examples using StackedPhysicsLoss:": [[44, "examples-using-stackedphysicsloss"]], "Examples using SupAdversarialDiscriminatorLoss:": [[54, "examples-using-supadversarialdiscriminatorloss"]], "Examples using SupAdversarialGeneratorLoss:": [[55, "examples-using-supadversarialgeneratorloss"]], "Examples using SupLoss:": [[46, "examples-using-suploss"]], "Examples using SureGaussianLoss:": [[47, "examples-using-suregaussianloss"]], "Examples using SurePGLoss:": [[48, "examples-using-surepgloss"]], "Examples using SurePoissonLoss:": [[49, "examples-using-surepoissonloss"]], "Examples using TVPrior:": [[140, "examples-using-tvprior"]], "Examples using TensorList:": [[260, "examples-using-tensorlist"]], "Examples using TimeMixin:": [[194, "examples-using-timemixin"]], "Examples using Tomography:": [[195, "examples-using-tomography"]], "Examples using Trainer:": [[12, "examples-using-trainer"]], "Examples using Transform:": [[251, "examples-using-transform"]], "Examples using UAIRGeneratorLoss:": [[56, "examples-using-uairgeneratorloss"]], "Examples using ULA:": [[240, "examples-using-ula"]], "Examples using UNet:": [[102, "examples-using-unet"]], "Examples using UniformNoise:": [[197, "examples-using-uniformnoise"]], "Examples using UnsupAdversarialDiscriminatorLoss:": [[57, "examples-using-unsupadversarialdiscriminatorloss"]], "Examples using UnsupAdversarialGeneratorLoss:": [[58, "examples-using-unsupadversarialgeneratorloss"]], "Examples using Urban100HR:": [[25, "examples-using-urban100hr"]], "Examples using WaveletDenoiser:": [[103, "examples-using-waveletdenoiser"]], "Examples using WaveletDictDenoiser:": [[104, "examples-using-waveletdictdenoiser"]], "Examples using WaveletPrior:": [[142, "examples-using-waveletprior"]], "Examples using build_probe:": [[231, "examples-using-build-probe"]], "Examples using demo_mri_model:": [[261, "examples-using-demo-mri-model"]], "Examples using fStep:": [[153, "examples-using-fstep"]], "Examples using gStep:": [[154, "examples-using-gstep"]], "Examples using gaussian_blur:": [[201, "examples-using-gaussian-blur"]], "Examples using generate_dataset:": [[26, "examples-using-generate-dataset"]], "Examples using generate_shifts:": [[232, "examples-using-generate-shifts"]], "Examples using get_data_home:": [[262, "examples-using-get-data-home"]], "Examples using get_freer_gpu:": [[263, "examples-using-get-freer-gpu"]], "Examples using load_url_image:": [[265, "examples-using-load-url-image"]], "Examples using optim_builder:": [[143, "examples-using-optim-builder"]], "Examples using plot:": [[267, "examples-using-plot"]], "Examples using plot_curves:": [[268, "examples-using-plot-curves"]], "Examples using plot_inset:": [[269, "examples-using-plot-inset"]], "Examples using plot_ortho3D:": [[270, "examples-using-plot-ortho3d"]], "Examples using plot_parameters:": [[271, "examples-using-plot-parameters"]], "Examples using plot_videos:": [[272, "examples-using-plot-videos"]], "Examples using test:": [[241, "examples-using-test"]], "Examples using unfolded_builder:": [[259, "examples-using-unfolded-builder"]], "Expected Patch Log Likelihood (EPLL) for Denoising and Inpainting": [[305, null]], "Exploring the total variation prior.": [[301, "exploring-the-total-variation-prior"]], "Exploring the wavelet prior.": [[302, "exploring-the-wavelet-prior"]], "Extension to multiple wavelet bases.": [[300, "extension-to-multiple-wavelet-bases"]], "FISTAIteration": [[147, null]], "FMD": [[15, null]], "FNEJacobianSpectralNorm": [[30, null]], "FastMRISliceDataset": [[16, null]], "Finding Help": [[344, null]], "FixedPoint": [[117, null]], "Flickr2kHR": [[17, null]], "Full Reference Metrics": [[3, "full-reference-metrics"], [367, "full-reference-metrics"], [367, "id3"]], "Functional": [[6, "functional"], [352, null]], "Functional Routines Overview": [[352, "id1"]], "Future events": [[342, "future-events"]], "GDIteration": [[148, null]], "GSDRUNet": [[87, null]], "GammaNoise": [[167, null]], "GaussianMaskGenerator": [[222, null]], "GaussianMixtureModel": [[155, null]], "GaussianNoise": [[168, null]], "GaussianSplittingMaskGenerator": [[223, null]], "General setup": [[290, "general-setup"], [293, "general-setup"]], "Generate a dataset of blurred images": [[283, "generate-a-dataset-of-blurred-images"]], "Generate a dataset of blurred images and load it.": [[301, "generate-a-dataset-of-blurred-images-and-load-it"], [309, "generate-a-dataset-of-blurred-images-and-load-it"]], "Generate a dataset of compressed measurements and load it.": [[335, "generate-a-dataset-of-compressed-measurements-and-load-it"], [336, "generate-a-dataset-of-compressed-measurements-and-load-it"]], "Generate a dataset of degraded images and load it.": [[284, "generate-a-dataset-of-degraded-images-and-load-it"]], "Generate a dataset of knee images and load it.": [[325, "generate-a-dataset-of-knee-images-and-load-it"]], "Generate a dataset of low resolution images and load it.": [[334, "generate-a-dataset-of-low-resolution-images-and-load-it"], [339, "generate-a-dataset-of-low-resolution-images-and-load-it"]], "Generate a dataset of noisy images": [[327, "generate-a-dataset-of-noisy-images"], [329, "generate-a-dataset-of-noisy-images"], [330, "generate-a-dataset-of-noisy-images"]], "Generate a dataset of subsampled images and load it.": [[326, "generate-a-dataset-of-subsampled-images-and-load-it"]], "Generate an inpainting problem": [[302, "generate-an-inpainting-problem"]], "Generate an inverse problem": [[318, "generate-an-inverse-problem"]], "Generate and visualize probe and measurements": [[293, "generate-and-visualize-probe-and-measurements"]], "Generate dataset": [[279, "generate-dataset"]], "Generate the measurement": [[285, "generate-the-measurement"], [316, "generate-the-measurement"], [317, "generate-the-measurement"], [320, "generate-the-measurement"]], "Generate toy image": [[291, "generate-toy-image"]], "Generate toy signal and measurement": [[287, "generate-toy-signal-and-measurement"]], "Generating Datasets": [[1, "generating-datasets"], [365, "generating-datasets"]], "Generator Mixture": [[282, "generator-mixture"]], "GeneratorLoss": [[53, null]], "GeneratorMixture": [[224, null]], "Gradient descent for phase retrieval": [[293, "gradient-descent-for-phase-retrieval"]], "Groundtruth image": [[276, "groundtruth-image"]], "HDF5Dataset": [[18, null]], "HQSIteration": [[149, null]], "Haze": [[169, null]], "Homography": [[245, null]], "How to Contribute": [[343, null]], "HyperSpectralUnmixing": [[170, null]], "ICNN": [[88, null]], "IRadon": [[203, null]], "Image Datasets": [[1, "image-datasets"]], "Image deblurring with Total-Variation (TV) prior": [[301, null]], "Image deblurring with custom deep explicit prior.": [[283, null]], "Image inpainting with wavelet prior": [[302, null]], "Image reconstruction with a diffusion model": [[317, null]], "Image transformations for Equivariant Imaging": [[324, null]], "Image transforms for equivariance & augmentations": [[296, null]], "Imaging inverse problems with adversarial networks": [[279, null]], "Implementing DPS": [[319, null]], "Implementing DiffPIR": [[318, null]], "Implementing an Algorithm": [[359, "implementing-an-algorithm"]], "Import required packages": [[276, "import-required-packages"]], "IndicatorL2": [[118, null]], "IndicatorL2Distance": [[119, null]], "Inpainting": [[171, null], [292, "inpainting"], [305, "inpainting"]], "Installing dependencies": [[319, "installing-dependencies"]], "InterleavedEpochLossScheduler": [[31, null]], "InterleavedLossScheduler": [[32, null]], "Introduction": [[353, null], [358, null], [366, "introduction"], [367, "introduction"]], "Iterating the Dykstra-like algorithm.": [[300, "iterating-the-dykstra-like-algorithm"]], "Iterative Reconstruction (PnP, RED, etc.)": [[359, null]], "Iterators": [[5, "iterators"], [360, "iterators"]], "JacobianSpectralNorm": [[33, null]], "Kohler": [[19, null]], "L1": [[120, null]], "L12Prior": [[121, null]], "L1Distance": [[122, null]], "L1L2": [[60, null]], "L1Prior": [[123, null]], "L2": [[124, null]], "L2Distance": [[125, null]], "LPIPS": [[61, null]], "Learned Iterative Soft-Thresholding Algorithm (LISTA) for compressed sensing": [[335, null]], "Learned Primal-Dual algorithm for CT scan.": [[337, null]], "Learned iterative custom prior": [[336, null]], "LidcIdriSliceDataset": [[20, null]], "Linear operators": [[353, "linear-operators"]], "LinearPhysics": [[172, null]], "List of mathematical symbols": [[349, "id1"]], "Load base image datasets": [[284, "load-base-image-datasets"], [327, "load-base-image-datasets"], [329, "load-base-image-datasets"], [330, "load-base-image-datasets"]], "Load base image datasets and degradation operators.": [[283, "load-base-image-datasets-and-degradation-operators"], [295, "load-base-image-datasets-and-degradation-operators"], [301, "load-base-image-datasets-and-degradation-operators"], [302, "load-base-image-datasets-and-degradation-operators"], [309, "load-base-image-datasets-and-degradation-operators"], [310, "load-base-image-datasets-and-degradation-operators"], [312, "load-base-image-datasets-and-degradation-operators"], [325, "load-base-image-datasets-and-degradation-operators"], [326, "load-base-image-datasets-and-degradation-operators"], [334, "load-base-image-datasets-and-degradation-operators"], [335, "load-base-image-datasets-and-degradation-operators"], [336, "load-base-image-datasets-and-degradation-operators"], [338, "load-base-image-datasets-and-degradation-operators"], [339, "load-base-image-datasets-and-degradation-operators"]], "Load base volume image and denoising operators.": [[300, "load-base-volume-image-and-denoising-operators"]], "Load data": [[323, "load-data"]], "Load degradation operator.": [[337, "load-degradation-operator"]], "Load example image from the internet": [[317, "load-example-image-from-the-internet"]], "Load image and parameters": [[313, "load-image-and-parameters"]], "Load image from the internet": [[285, "load-image-from-the-internet"], [290, "load-image-from-the-internet"], [292, "load-image-from-the-internet"], [293, "load-image-from-the-internet"], [316, "load-image-from-the-internet"], [320, "load-image-from-the-internet"]], "Load libraries": [[286, "load-libraries"]], "Load raw pan-sharpening measurements": [[294, "load-raw-pan-sharpening-measurements"]], "Load test image and model": [[305, "load-test-image-and-model"]], "Load training and test images": [[306, "load-training-and-test-images"]], "Loading the model": [[288, "loading-the-model"], [338, "loading-the-model"]], "LogPoissonLikelihood": [[126, null]], "LogPoissonLikelihoodDistance": [[127, null]], "LogPoissonNoise": [[173, null]], "Loss": [[34, null]], "Loss schedulers": [[2, "loss-schedulers"], [366, "loss-schedulers"]], "LpNorm": [[62, null]], "LsdirHR": [[21, null]], "MAE": [[63, null]], "MCLoss": [[35, null]], "MCMC methods": [[361, "id3"]], "MDIteration": [[150, null]], "MOEILoss": [[36, null]], "MOILoss": [[37, null]], "MRI": [[174, null], [292, "mri"]], "MRIMixin": [[175, null]], "MSE": [[64, null]], "Markov Chain Monte Carlo": [[361, "markov-chain-monte-carlo"]], "Markov Chain Monte Carlo Langevin": [[7, "markov-chain-monte-carlo-langevin"]], "Math Notation": [[349, null]], "Measurements generation": [[290, "measurements-generation"]], "MedianFilter": [[89, null]], "Metric": [[65, null]], "Metrics": [[367, null]], "MonteCarlo": [[238, null]], "Motion blur generators": [[282, "motion-blur-generators"]], "MotionBlurGenerator": [[225, null]], "MultiCoilMRI": [[176, null]], "NBUDataset": [[22, null]], "NIQE": [[66, null]], "NMSE": [[67, null]], "Natural weighting and Briggs weighting": [[276, "natural-weighting-and-briggs-weighting"]], "NegEntropy": [[128, null]], "Neighbor2Neighbor": [[38, null]], "Network Regularization": [[2, "network-regularization"], [366, "network-regularization"]], "Network Regularization Losses Overview": [[366, "id4"]], "No Reference Metrics": [[3, "no-reference-metrics"], [367, "no-reference-metrics"], [367, "id4"]], "Noise Distributions and Their Probability Distributions": [[354, "id2"]], "Noise distributions": [[6, "noise-distributions"], [354, "noise-distributions"]], "Non-Learned Denoisers Overview": [[357, "id3"]], "Operators": [[6, "operators"], [348, "operators"], [354, "operators"]], "Operators & Noise": [[354, null]], "Operators, Definitions, and Generators": [[354, "id1"]], "OptimIterator": [[129, null]], "Optimization": [[299, "optimization"], [303, null], [360, null]], "Other": [[11, "other"], [350, "other"]], "Other self-supervised losses": [[366, "id3"]], "Overall comparison": [[290, "overall-comparison"]], "PDNet_DualBlock": [[90, null]], "PDNet_PrimalBlock": [[91, null]], "PGDIteration": [[151, null]], "PSNR": [[68, null]], "Pan-sharpening": [[292, "pan-sharpening"]], "PanNet": [[92, null]], "PanTiltRotate": [[254, null]], "Pansharpen": [[177, null]], "Parameter-dependent operators": [[353, "parameter-dependent-operators"]], "Parameters": [[360, "parameters"]], "Past events": [[342, "past-events"]], "Patch Priors": [[299, "patch-priors"], [307, null]], "Patch priors for limited-angle computed tomography": [[306, null]], "PatchDataset": [[1, "patchdataset"], [23, null]], "PatchGANDiscriminator": [[93, null]], "PatchNR": [[130, null]], "PatchPrior": [[131, null]], "Phase correction and signal reconstruction": [[290, "phase-correction-and-signal-reconstruction"], [290, "id1"], [290, "id2"], [290, "id3"]], "Phase2PhaseLoss": [[39, null]], "Phase2PhaseSplittingMaskGenerator": [[226, null]], "PhaseRetrieval": [[178, null]], "Physics": [[179, null]], "Physics Generators": [[353, "physics-generators"]], "PhysicsGenerator": [[227, null]], "Plotting": [[11, "plotting"], [350, "plotting"]], "Plotting the learned parameters.": [[335, "plotting-the-learned-parameters"]], "Plotting the weights of the network.": [[336, "plotting-the-weights-of-the-network"], [339, "plotting-the-weights-of-the-network"]], "Plug-and-Play": [[299, "plug-and-play"], [314, null]], "Plug-and-Play algorithm with Mirror Descent for Poisson noise inverse problems.": [[311, null]], "PnP": [[132, null]], "PnP with custom optimization algorithm (Condat-Vu Primal-Dual)": [[310, null]], "PoissonGaussianNoise": [[180, null]], "PoissonLikelihood": [[133, null]], "PoissonLikelihoodDistance": [[134, null]], "PoissonNoise": [[181, null]], "Potential": [[135, null]], "Potentials": [[5, "potentials"], [360, "potentials"]], "Predefined Algorithms": [[360, "predefined-algorithms"]], "Predefined Datasets": [[365, "predefined-datasets"]], "Predefined Iterative Algorithms": [[359, "predefined-iterative-algorithms"]], "Predefined methods": [[359, "id1"]], "Predefined models": [[5, "predefined-models"]], "Prep loss": [[323, "prep-loss"]], "Prepare data": [[328, "prepare-data"]], "Prepare phase input": [[293, "prepare-phase-input"]], "Pretrained Weights": [[364, null]], "Prior": [[136, null]], "Priors": [[5, "priors"], [360, "priors"]], "Priors Overview": [[360, "id7"]], "ProductConvolutionBlurGenerator": [[228, null]], "Ptychography": [[182, null]], "Ptychography phase retrieval": [[293, null]], "PtychographyLinearOperator": [[183, null]], "Putting it all together: the DiffPIR algorithm": [[318, "putting-it-all-together-the-diffpir-algorithm"]], "QNR": [[69, null]], "Quickstart": [[346, null]], "R2RLoss": [[40, null]], "RED": [[137, null]], "Radio interferometric imaging with deepinverse": [[276, null]], "RadioInterferometry": [[184, null]], "Radon": [[204, null]], "Random phase retrieval and reconstruction methods.": [[290, null]], "RandomLossScheduler": [[41, null]], "RandomMaskGenerator": [[229, null]], "RandomPhaseRetrieval": [[185, null]], "Reconstructing an image using the deep image prior.": [[285, null]], "Reconstruction": [[348, "reconstruction"]], "Reconstruction loop": [[306, "reconstruction-loop"]], "Reconstruction methods": [[358, "id1"]], "Reconstruction with gradient descent and PnP denoisers": [[290, "reconstruction-with-gradient-descent-and-pnp-denoisers"]], "Reconstruction with gradient descent and random initialization": [[290, "reconstruction-with-gradient-descent-and-random-initialization"]], "Reconstruction with gradient descent and spectral methods initialization": [[290, "reconstruction-with-gradient-descent-and-spectral-methods-initialization"]], "Reconstruction with spectral methods": [[290, "reconstruction-with-spectral-methods"]], "Reconstructor": [[94, null]], "Reflect": [[246, null]], "Regularization by Denoising (RED) for Super-Resolution.": [[312, null]], "Remote sensing with satellite images": [[294, null]], "Restormer": [[95, null]], "Rotate": [[247, null]], "Run DIP algorithm and plot results": [[285, "run-dip-algorithm-and-plot-results"]], "Run and plot": [[306, "run-and-plot"]], "Run sampling algorithm and plot results": [[317, "run-sampling-algorithm-and-plot-results"], [320, "run-sampling-algorithm-and-plot-results"]], "Run sampling algorithms and plot results": [[316, "run-sampling-algorithms-and-plot-results"]], "Run the diffusion algorithm and plot results": [[317, "run-the-diffusion-algorithm-and-plot-results"]], "SCUNet": [[96, null]], "SKRock": [[239, null]], "SMIteration": [[152, null]], "SSIM": [[70, null]], "Sampling": [[299, "sampling"], [321, null]], "Sampling pattern": [[276, "sampling-pattern"]], "Sampling step": [[318, "sampling-step"]], "Saving and loading models": [[288, null]], "Saving the model": [[288, "saving-the-model"], [338, "saving-the-model"]], "Scale": [[248, null]], "Schedulers Overview": [[366, "id6"]], "ScoreLoss": [[42, null]], "ScorePrior": [[138, null]], "Self-Supervised Learning": [[2, "self-supervised-learning"], [299, "self-supervised-learning"], [331, null], [366, "self-supervised-learning"]], "Self-supervised MRI reconstruction with Artifact2Artifact": [[323, null]], "Self-supervised denoising with the Neighbor2Neighbor loss.": [[327, null]], "Self-supervised denoising with the SURE loss.": [[329, null]], "Self-supervised denoising with the UNSURE loss.": [[330, null]], "Self-supervised learning from incomplete measurements of multiple operators.": [[326, null]], "Self-supervised learning with Equivariant Imaging for MRI.": [[325, null]], "Self-supervised learning with measurement splitting": [[328, null]], "SequentialMRI": [[186, null]], "Set parameters for EPLL and PatchNR": [[306, "set-parameters-for-epll-and-patchnr"]], "Set the forward operator": [[310, "set-the-forward-operator"], [313, "set-the-forward-operator"]], "Set up ptychography physics model": [[293, "set-up-ptychography-physics-model"]], "Set up the DPIR algorithm to solve the inverse problem.": [[309, "set-up-the-dpir-algorithm-to-solve-the-inverse-problem"]], "Set up the PnP algorithm to solve the inverse problem.": [[310, "set-up-the-pnp-algorithm-to-solve-the-inverse-problem"], [313, "set-up-the-pnp-algorithm-to-solve-the-inverse-problem"]], "Set up the denoiser network": [[327, "set-up-the-denoiser-network"], [329, "set-up-the-denoiser-network"], [330, "set-up-the-denoiser-network"]], "Set up the optimization algorithm to solve the inverse problem.": [[283, "set-up-the-optimization-algorithm-to-solve-the-inverse-problem"], [301, "set-up-the-optimization-algorithm-to-solve-the-inverse-problem"], [302, "set-up-the-optimization-algorithm-to-solve-the-inverse-problem"]], "Set up the reconstruction network": [[295, "set-up-the-reconstruction-network"], [325, "set-up-the-reconstruction-network"], [326, "set-up-the-reconstruction-network"], [338, "set-up-the-reconstruction-network"]], "Set up the training parameters": [[325, "set-up-the-training-parameters"], [326, "set-up-the-training-parameters"], [327, "set-up-the-training-parameters"], [329, "set-up-the-training-parameters"], [330, "set-up-the-training-parameters"]], "Set14HR": [[24, null]], "Setting the noise and regularization schedules": [[318, "setting-the-noise-and-regularization-schedules"]], "Setup paths for data loading and results": [[288, "setup-paths-for-data-loading-and-results"]], "Setup paths for data loading and results.": [[283, "setup-paths-for-data-loading-and-results"], [284, "setup-paths-for-data-loading-and-results"], [295, "setup-paths-for-data-loading-and-results"], [300, "setup-paths-for-data-loading-and-results"], [301, "setup-paths-for-data-loading-and-results"], [302, "setup-paths-for-data-loading-and-results"], [309, "setup-paths-for-data-loading-and-results"], [310, "setup-paths-for-data-loading-and-results"], [311, "setup-paths-for-data-loading-and-results"], [312, "setup-paths-for-data-loading-and-results"], [313, "setup-paths-for-data-loading-and-results"], [325, "setup-paths-for-data-loading-and-results"], [326, "setup-paths-for-data-loading-and-results"], [327, "setup-paths-for-data-loading-and-results"], [329, "setup-paths-for-data-loading-and-results"], [330, "setup-paths-for-data-loading-and-results"], [334, "setup-paths-for-data-loading-and-results"], [335, "setup-paths-for-data-loading-and-results"], [336, "setup-paths-for-data-loading-and-results"], [337, "setup-paths-for-data-loading-and-results"], [338, "setup-paths-for-data-loading-and-results"], [339, "setup-paths-for-data-loading-and-results"]], "Setup the PnP algorithm. This involves in particular the definition of a custom prior class.": [[312, "setup-the-pnp-algorithm-this-involves-in-particular-the-definition-of-a-custom-prior-class"]], "Shift": [[249, null]], "ShiftTime": [[250, null]], "Shuffle data with buffer shuffling": [[286, "shuffle-data-with-buffer-shuffling"]], "SigmaGenerator": [[230, null]], "Signal construction": [[290, "signal-construction"]], "Similarity": [[255, null]], "Simple Transformations": [[370, "id1"]], "Simple transforms": [[9, "simple-transforms"], [370, "simple-transforms"]], "Simulate pan-sharpening measurements": [[294, "simulate-pan-sharpening-measurements"]], "Simulating the measurements": [[276, "simulating-the-measurements"]], "Single photon lidar operator for depth ranging.": [[287, null]], "Single-Pixel Camera": [[292, "single-pixel-camera"]], "SinglePhotonLidar": [[187, null]], "SinglePixelCamera": [[188, null]], "Solving pan-sharpening with neural networks": [[294, "solving-pan-sharpening-with-neural-networks"]], "Solving the problem with a wavelet prior": [[276, "solving-the-problem-with-a-wavelet-prior"]], "Space varying blurs": [[282, "space-varying-blurs"]], "SpaceVaryingBlur": [[189, null]], "Specific Networks": [[362, null]], "Specific architectures": [[362, "id1"]], "SpectralAngleMapper": [[71, null]], "SplittingLoss": [[43, null]], "StackedLinearPhysics": [[190, null]], "StackedPhysics": [[191, null]], "StackedPhysicsDataFidelity": [[139, null]], "StackedPhysicsLoss": [[44, null]], "StepLossScheduler": [[45, null]], "Stream data from Internet": [[286, "stream-data-from-internet"]], "StructuredRandom": [[192, null]], "StructuredRandomPhaseRetrieval": [[193, null]], "Summary of pretrained weights": [[364, "id3"]], "SupAdversarialDiscriminatorLoss": [[54, null]], "SupAdversarialGeneratorLoss": [[55, null]], "SupLoss": [[46, null]], "Super-Resolution": [[292, "super-resolution"]], "Supervised Learning": [[2, "supervised-learning"], [366, "supervised-learning"]], "SureGaussianLoss": [[47, null]], "SurePGLoss": [[48, null]], "SurePoissonLoss": [[49, null]], "SwinIR": [[97, null]], "TGVDenoiser": [[98, null]], "TVDenoiser": [[99, null]], "TVLoss": [[50, null]], "TVPrior": [[140, null]], "TensorList": [[11, "tensorlist"], [260, null], [350, "tensorlist"]], "Test the model": [[323, "test-the-model"]], "Test the network": [[295, "test-the-network"], [325, "test-the-network"], [326, "test-the-network"], [327, "test-the-network"], [329, "test-the-network"], [330, "test-the-network"], [334, "test-the-network"], [337, "test-the-network"], [338, "test-the-network"], [339, "test-the-network"]], "Test the network.": [[335, "test-the-network"], [336, "test-the-network"]], "The DPS algorithm": [[319, "the-dps-algorithm"]], "The DiffPIR algorithm": [[318, "the-diffpir-algorithm"]], "The RI measurement operator": [[276, "the-ri-measurement-operator"]], "Tikhonov": [[141, null]], "Time Transforms": [[370, "id3"]], "TimeAgnosticNet": [[100, null]], "TimeAveragingNet": [[101, null]], "TimeMixin": [[194, null]], "Tomography": [[195, null]], "Train and test network": [[328, "train-and-test-network"]], "Train model": [[323, "train-model"]], "Train the model": [[295, "train-the-model"], [338, "train-the-model"]], "Train the network": [[325, "train-the-network"], [326, "train-the-network"], [327, "train-the-network"], [329, "train-the-network"], [330, "train-the-network"], [334, "train-the-network"], [337, "train-the-network"], [339, "train-the-network"]], "Train the network.": [[335, "train-the-network"], [336, "train-the-network"]], "Trainer": [[12, null], [369, null]], "Training / EM algorithm": [[306, "training-em-algorithm"]], "Training Losses": [[366, null]], "Training a reconstruction network.": [[295, null]], "Training dataset of random phantoms.": [[337, "training-dataset-of-random-phantoms"]], "Training, Testing and Utilities": [[348, "training-testing-and-utilities"]], "Transform": [[251, null]], "Transforms": [[370, null]], "UAIR training": [[279, "uair-training"]], "UAIRGeneratorLoss": [[56, null]], "ULA": [[240, null]], "UNet": [[102, null]], "Uncertainty quantification with PnP-ULA.": [[320, null]], "Unconditional GAN": [[355, "unconditional-gan"]], "Unconditional GANs": [[355, "id3"]], "Unfolded": [[10, "unfolded"], [299, "unfolded"], [340, null], [363, "id1"]], "Unfolded Algorithms": [[363, null]], "Unfolded Chambolle-Pock for constrained image inpainting": [[338, null]], "UniformGaussianNoise": [[196, null]], "UniformNoise": [[197, null]], "UnsupAdversarialDiscriminatorLoss": [[57, null]], "UnsupAdversarialGeneratorLoss": [[58, null]], "Urban100HR": [[25, null]], "User Guide": [[348, null]], "Using DPS in your inverse problem": [[319, "using-dps-in-your-inverse-problem"]], "Using Multiple GPUs": [[368, null]], "Using huggingface dataset": [[286, null]], "Using the DiffPIR algorithm in your inverse problem": [[318, "using-the-diffpir-algorithm-in-your-inverse-problem"]], "Using the Dykstra-like algorithm for wavelet denoising.": [[300, "using-the-dykstra-like-algorithm-for-wavelet-denoising"]], "Utility Functions and Descriptions": [[350, "id4"], [350, "id5"]], "Utils": [[5, "utils"], [350, null], [360, "utils"]], "Vanilla PnP for computed tomography (CT).": [[313, null]], "Vanilla Unfolded algorithm for super-resolution": [[339, null]], "Verifying our linear operator": [[291, "verifying-our-linear-operator"]], "Video transforms": [[9, "video-transforms"], [370, "video-transforms"]], "Visualization": [[290, "visualization"]], "WaveletDenoiser": [[103, null]], "WaveletDictDenoiser": [[104, null]], "WaveletPrior": [[142, null]], "Widefield microscope PSF": [[289, "widefield-microscope-psf"]], "adjoint_function": [[198, null]], "bicubic_filter": [[199, null]], "bilinear_filter": [[200, null]], "build_probe": [[231, null]], "conjugate_gradient": [[156, null]], "conv2d": [[205, null]], "conv2d_fft": [[206, null]], "conv3d_fft": [[207, null]], "conv_transpose2d": [[208, null]], "conv_transpose2d_fft": [[209, null]], "conv_transpose3d_fft": [[210, null]], "deepinv.datasets": [[1, null]], "deepinv.loss": [[2, null]], "deepinv.metric": [[3, null]], "deepinv.models": [[4, null]], "deepinv.optim": [[5, null]], "deepinv.physics": [[6, null]], "deepinv.sampling": [[7, null]], "deepinv.training": [[8, null]], "deepinv.transform": [[9, null]], "deepinv.unfolded": [[10, null]], "deepinv.utils": [[11, null]], "demo_mri_model": [[261, null]], "fStep": [[153, null]], "gStep": [[154, null]], "gaussian_blur": [[201, null]], "generate_dataset": [[26, null]], "generate_shifts": [[232, null]], "get_data_home": [[262, null]], "get_freer_gpu": [[263, null]], "gradient_descent": [[157, null]], "histogram": [[211, null]], "histogramdd": [[212, null]], "load_image": [[264, null]], "load_url_image": [[265, null]], "multiplier": [[213, null]], "multiplier_adjoint": [[214, null]], "ones_like": [[266, null]], "optim_builder": [[143, null]], "plot": [[267, null]], "plot_curves": [[268, null]], "plot_inset": [[269, null]], "plot_ortho3D": [[270, null]], "plot_parameters": [[271, null]], "plot_videos": [[272, null]], "product_convolution2d": [[215, null]], "rand_like": [[273, null]], "randn_like": [[274, null]], "sinc_filter": [[202, null]], "stack": [[233, null]], "test": [[241, null]], "to_complex_denoiser": [[105, null]], "train": [[242, null]], "unfolded_builder": [[259, null]], "zeros_like": [[275, null]]}, "docnames": ["API", "api/deepinv.datasets", "api/deepinv.loss", "api/deepinv.metric", "api/deepinv.models", "api/deepinv.optim", "api/deepinv.physics", "api/deepinv.sampling", "api/deepinv.training", "api/deepinv.transform", "api/deepinv.unfolded", "api/deepinv.utils", "api/stubs/deepinv.Trainer", "api/stubs/deepinv.datasets.CBSD68", "api/stubs/deepinv.datasets.DIV2K", "api/stubs/deepinv.datasets.FMD", "api/stubs/deepinv.datasets.FastMRISliceDataset", "api/stubs/deepinv.datasets.Flickr2kHR", "api/stubs/deepinv.datasets.HDF5Dataset", "api/stubs/deepinv.datasets.Kohler", "api/stubs/deepinv.datasets.LidcIdriSliceDataset", "api/stubs/deepinv.datasets.LsdirHR", "api/stubs/deepinv.datasets.NBUDataset", "api/stubs/deepinv.datasets.PatchDataset", "api/stubs/deepinv.datasets.Set14HR", "api/stubs/deepinv.datasets.Urban100HR", "api/stubs/deepinv.datasets.generate_dataset", "api/stubs/deepinv.loss.Artifact2ArtifactLoss", "api/stubs/deepinv.loss.BaseLossScheduler", "api/stubs/deepinv.loss.EILoss", "api/stubs/deepinv.loss.FNEJacobianSpectralNorm", "api/stubs/deepinv.loss.InterleavedEpochLossScheduler", "api/stubs/deepinv.loss.InterleavedLossScheduler", "api/stubs/deepinv.loss.JacobianSpectralNorm", "api/stubs/deepinv.loss.Loss", "api/stubs/deepinv.loss.MCLoss", "api/stubs/deepinv.loss.MOEILoss", "api/stubs/deepinv.loss.MOILoss", "api/stubs/deepinv.loss.Neighbor2Neighbor", "api/stubs/deepinv.loss.Phase2PhaseLoss", "api/stubs/deepinv.loss.R2RLoss", "api/stubs/deepinv.loss.RandomLossScheduler", "api/stubs/deepinv.loss.ScoreLoss", "api/stubs/deepinv.loss.SplittingLoss", "api/stubs/deepinv.loss.StackedPhysicsLoss", "api/stubs/deepinv.loss.StepLossScheduler", "api/stubs/deepinv.loss.SupLoss", "api/stubs/deepinv.loss.SureGaussianLoss", "api/stubs/deepinv.loss.SurePGLoss", "api/stubs/deepinv.loss.SurePoissonLoss", "api/stubs/deepinv.loss.TVLoss", "api/stubs/deepinv.loss.adversarial.DiscriminatorLoss", "api/stubs/deepinv.loss.adversarial.DiscriminatorMetric", "api/stubs/deepinv.loss.adversarial.GeneratorLoss", "api/stubs/deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss", "api/stubs/deepinv.loss.adversarial.SupAdversarialGeneratorLoss", "api/stubs/deepinv.loss.adversarial.UAIRGeneratorLoss", "api/stubs/deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss", "api/stubs/deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss", "api/stubs/deepinv.loss.metric.ERGAS", "api/stubs/deepinv.loss.metric.L1L2", "api/stubs/deepinv.loss.metric.LPIPS", "api/stubs/deepinv.loss.metric.LpNorm", "api/stubs/deepinv.loss.metric.MAE", "api/stubs/deepinv.loss.metric.MSE", "api/stubs/deepinv.loss.metric.Metric", "api/stubs/deepinv.loss.metric.NIQE", "api/stubs/deepinv.loss.metric.NMSE", "api/stubs/deepinv.loss.metric.PSNR", "api/stubs/deepinv.loss.metric.QNR", "api/stubs/deepinv.loss.metric.SSIM", "api/stubs/deepinv.loss.metric.SpectralAngleMapper", "api/stubs/deepinv.models.ArtifactRemoval", "api/stubs/deepinv.models.AutoEncoder", "api/stubs/deepinv.models.BM3D", "api/stubs/deepinv.models.CSGMGenerator", "api/stubs/deepinv.models.ConvDecoder", "api/stubs/deepinv.models.DCGANDiscriminator", "api/stubs/deepinv.models.DCGANGenerator", "api/stubs/deepinv.models.DRUNet", "api/stubs/deepinv.models.DeepImagePrior", "api/stubs/deepinv.models.Denoiser", "api/stubs/deepinv.models.DiffUNet", "api/stubs/deepinv.models.DnCNN", "api/stubs/deepinv.models.EPLLDenoiser", "api/stubs/deepinv.models.ESRGANDiscriminator", "api/stubs/deepinv.models.EquivariantDenoiser", "api/stubs/deepinv.models.GSDRUNet", "api/stubs/deepinv.models.ICNN", "api/stubs/deepinv.models.MedianFilter", "api/stubs/deepinv.models.PDNet_DualBlock", "api/stubs/deepinv.models.PDNet_PrimalBlock", "api/stubs/deepinv.models.PanNet", "api/stubs/deepinv.models.PatchGANDiscriminator", "api/stubs/deepinv.models.Reconstructor", "api/stubs/deepinv.models.Restormer", "api/stubs/deepinv.models.SCUNet", "api/stubs/deepinv.models.SwinIR", "api/stubs/deepinv.models.TGVDenoiser", "api/stubs/deepinv.models.TVDenoiser", "api/stubs/deepinv.models.TimeAgnosticNet", "api/stubs/deepinv.models.TimeAveragingNet", "api/stubs/deepinv.models.UNet", "api/stubs/deepinv.models.WaveletDenoiser", "api/stubs/deepinv.models.WaveletDictDenoiser", "api/stubs/deepinv.models.complex.to_complex_denoiser", "api/stubs/deepinv.optim.AmplitudeLoss", "api/stubs/deepinv.optim.AmplitudeLossDistance", "api/stubs/deepinv.optim.BaseOptim", "api/stubs/deepinv.optim.Bregman", "api/stubs/deepinv.optim.BregmanL2", "api/stubs/deepinv.optim.Bregman_ICNN", "api/stubs/deepinv.optim.BurgEntropy", "api/stubs/deepinv.optim.DPIR", "api/stubs/deepinv.optim.DataFidelity", "api/stubs/deepinv.optim.Distance", "api/stubs/deepinv.optim.EPLL", "api/stubs/deepinv.optim.FixedPoint", "api/stubs/deepinv.optim.IndicatorL2", "api/stubs/deepinv.optim.IndicatorL2Distance", "api/stubs/deepinv.optim.L1", "api/stubs/deepinv.optim.L12Prior", "api/stubs/deepinv.optim.L1Distance", "api/stubs/deepinv.optim.L1Prior", "api/stubs/deepinv.optim.L2", "api/stubs/deepinv.optim.L2Distance", "api/stubs/deepinv.optim.LogPoissonLikelihood", "api/stubs/deepinv.optim.LogPoissonLikelihoodDistance", "api/stubs/deepinv.optim.NegEntropy", "api/stubs/deepinv.optim.OptimIterator", "api/stubs/deepinv.optim.PatchNR", "api/stubs/deepinv.optim.PatchPrior", "api/stubs/deepinv.optim.PnP", "api/stubs/deepinv.optim.PoissonLikelihood", "api/stubs/deepinv.optim.PoissonLikelihoodDistance", "api/stubs/deepinv.optim.Potential", "api/stubs/deepinv.optim.Prior", "api/stubs/deepinv.optim.RED", "api/stubs/deepinv.optim.ScorePrior", "api/stubs/deepinv.optim.StackedPhysicsDataFidelity", "api/stubs/deepinv.optim.TVPrior", "api/stubs/deepinv.optim.Tikhonov", "api/stubs/deepinv.optim.WaveletPrior", "api/stubs/deepinv.optim.optim_builder", "api/stubs/deepinv.optim.optim_iterators.ADMMIteration", "api/stubs/deepinv.optim.optim_iterators.CPIteration", "api/stubs/deepinv.optim.optim_iterators.DRSIteration", "api/stubs/deepinv.optim.optim_iterators.FISTAIteration", "api/stubs/deepinv.optim.optim_iterators.GDIteration", "api/stubs/deepinv.optim.optim_iterators.HQSIteration", "api/stubs/deepinv.optim.optim_iterators.MDIteration", "api/stubs/deepinv.optim.optim_iterators.PGDIteration", "api/stubs/deepinv.optim.optim_iterators.SMIteration", "api/stubs/deepinv.optim.optim_iterators.fStep", "api/stubs/deepinv.optim.optim_iterators.gStep", "api/stubs/deepinv.optim.utils.GaussianMixtureModel", "api/stubs/deepinv.optim.utils.conjugate_gradient", "api/stubs/deepinv.optim.utils.gradient_descent", "api/stubs/deepinv.physics.Blur", "api/stubs/deepinv.physics.BlurFFT", "api/stubs/deepinv.physics.CompressedSensing", "api/stubs/deepinv.physics.Decolorize", "api/stubs/deepinv.physics.DecomposablePhysics", "api/stubs/deepinv.physics.Demosaicing", "api/stubs/deepinv.physics.Denoising", "api/stubs/deepinv.physics.Downsampling", "api/stubs/deepinv.physics.DynamicMRI", "api/stubs/deepinv.physics.GammaNoise", "api/stubs/deepinv.physics.GaussianNoise", "api/stubs/deepinv.physics.Haze", "api/stubs/deepinv.physics.HyperSpectralUnmixing", "api/stubs/deepinv.physics.Inpainting", "api/stubs/deepinv.physics.LinearPhysics", "api/stubs/deepinv.physics.LogPoissonNoise", "api/stubs/deepinv.physics.MRI", "api/stubs/deepinv.physics.MRIMixin", "api/stubs/deepinv.physics.MultiCoilMRI", "api/stubs/deepinv.physics.Pansharpen", "api/stubs/deepinv.physics.PhaseRetrieval", "api/stubs/deepinv.physics.Physics", "api/stubs/deepinv.physics.PoissonGaussianNoise", "api/stubs/deepinv.physics.PoissonNoise", "api/stubs/deepinv.physics.Ptychography", "api/stubs/deepinv.physics.PtychographyLinearOperator", "api/stubs/deepinv.physics.RadioInterferometry", "api/stubs/deepinv.physics.RandomPhaseRetrieval", "api/stubs/deepinv.physics.SequentialMRI", "api/stubs/deepinv.physics.SinglePhotonLidar", "api/stubs/deepinv.physics.SinglePixelCamera", "api/stubs/deepinv.physics.SpaceVaryingBlur", "api/stubs/deepinv.physics.StackedLinearPhysics", "api/stubs/deepinv.physics.StackedPhysics", "api/stubs/deepinv.physics.StructuredRandom", "api/stubs/deepinv.physics.StructuredRandomPhaseRetrieval", "api/stubs/deepinv.physics.TimeMixin", "api/stubs/deepinv.physics.Tomography", "api/stubs/deepinv.physics.UniformGaussianNoise", "api/stubs/deepinv.physics.UniformNoise", "api/stubs/deepinv.physics.adjoint_function", "api/stubs/deepinv.physics.blur.bicubic_filter", "api/stubs/deepinv.physics.blur.bilinear_filter", "api/stubs/deepinv.physics.blur.gaussian_blur", "api/stubs/deepinv.physics.blur.sinc_filter", "api/stubs/deepinv.physics.functional.IRadon", "api/stubs/deepinv.physics.functional.Radon", "api/stubs/deepinv.physics.functional.conv2d", "api/stubs/deepinv.physics.functional.conv2d_fft", "api/stubs/deepinv.physics.functional.conv3d_fft", "api/stubs/deepinv.physics.functional.conv_transpose2d", "api/stubs/deepinv.physics.functional.conv_transpose2d_fft", "api/stubs/deepinv.physics.functional.conv_transpose3d_fft", "api/stubs/deepinv.physics.functional.histogram", "api/stubs/deepinv.physics.functional.histogramdd", "api/stubs/deepinv.physics.functional.multiplier", "api/stubs/deepinv.physics.functional.multiplier_adjoint", "api/stubs/deepinv.physics.functional.product_convolution2d", "api/stubs/deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator", "api/stubs/deepinv.physics.generator.BaseMaskGenerator", "api/stubs/deepinv.physics.generator.BernoulliSplittingMaskGenerator", "api/stubs/deepinv.physics.generator.DiffractionBlurGenerator", "api/stubs/deepinv.physics.generator.DiffractionBlurGenerator3D", "api/stubs/deepinv.physics.generator.EquispacedMaskGenerator", "api/stubs/deepinv.physics.generator.GaussianMaskGenerator", "api/stubs/deepinv.physics.generator.GaussianSplittingMaskGenerator", "api/stubs/deepinv.physics.generator.GeneratorMixture", "api/stubs/deepinv.physics.generator.MotionBlurGenerator", "api/stubs/deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator", "api/stubs/deepinv.physics.generator.PhysicsGenerator", "api/stubs/deepinv.physics.generator.ProductConvolutionBlurGenerator", "api/stubs/deepinv.physics.generator.RandomMaskGenerator", "api/stubs/deepinv.physics.generator.SigmaGenerator", "api/stubs/deepinv.physics.phase_retrieval.build_probe", "api/stubs/deepinv.physics.phase_retrieval.generate_shifts", "api/stubs/deepinv.physics.stack", "api/stubs/deepinv.sampling.DDRM", "api/stubs/deepinv.sampling.DPS", "api/stubs/deepinv.sampling.DiffPIR", "api/stubs/deepinv.sampling.DiffusionSampler", "api/stubs/deepinv.sampling.MonteCarlo", "api/stubs/deepinv.sampling.SKRock", "api/stubs/deepinv.sampling.ULA", "api/stubs/deepinv.test", "api/stubs/deepinv.train", "api/stubs/deepinv.training.AdversarialTrainer", "api/stubs/deepinv.transform.CPABDiffeomorphism", "api/stubs/deepinv.transform.Homography", "api/stubs/deepinv.transform.Reflect", "api/stubs/deepinv.transform.Rotate", "api/stubs/deepinv.transform.Scale", "api/stubs/deepinv.transform.Shift", "api/stubs/deepinv.transform.ShiftTime", "api/stubs/deepinv.transform.Transform", "api/stubs/deepinv.transform.projective.Affine", "api/stubs/deepinv.transform.projective.Euclidean", "api/stubs/deepinv.transform.projective.PanTiltRotate", "api/stubs/deepinv.transform.projective.Similarity", "api/stubs/deepinv.unfolded.BaseDEQ", "api/stubs/deepinv.unfolded.BaseUnfold", "api/stubs/deepinv.unfolded.DEQ_builder", "api/stubs/deepinv.unfolded.unfolded_builder", "api/stubs/deepinv.utils.TensorList", "api/stubs/deepinv.utils.demo.demo_mri_model", "api/stubs/deepinv.utils.get_data_home", "api/stubs/deepinv.utils.get_freer_gpu", "api/stubs/deepinv.utils.load_image", "api/stubs/deepinv.utils.load_url_image", "api/stubs/deepinv.utils.ones_like", "api/stubs/deepinv.utils.plot", "api/stubs/deepinv.utils.plot_curves", "api/stubs/deepinv.utils.plot_inset", "api/stubs/deepinv.utils.plot_ortho3D", "api/stubs/deepinv.utils.plot_parameters", "api/stubs/deepinv.utils.plot_videos", "api/stubs/deepinv.utils.rand_like", "api/stubs/deepinv.utils.randn_like", "api/stubs/deepinv.utils.zeros_like", "auto_examples/advanced/demo_ri_basic", "auto_examples/advanced/index", "auto_examples/advanced/sg_execution_times", "auto_examples/adversarial-learning/demo_gan_imaging", "auto_examples/adversarial-learning/index", "auto_examples/adversarial-learning/sg_execution_times", "auto_examples/basics/demo_blur_tour", "auto_examples/basics/demo_custom_prior", "auto_examples/basics/demo_dataset", "auto_examples/basics/demo_dip", "auto_examples/basics/demo_hf_dataset", "auto_examples/basics/demo_lidar", "auto_examples/basics/demo_loading", "auto_examples/basics/demo_microscopy_3d", "auto_examples/basics/demo_phase_retrieval", "auto_examples/basics/demo_physics", "auto_examples/basics/demo_physics_tour", "auto_examples/basics/demo_ptychography", "auto_examples/basics/demo_remote_sensing", "auto_examples/basics/demo_train_inpainting", "auto_examples/basics/demo_transforms", "auto_examples/basics/index", "auto_examples/basics/sg_execution_times", "auto_examples/index", "auto_examples/optimization/demo_3D_wavelets", "auto_examples/optimization/demo_TV_minimisation", "auto_examples/optimization/demo_wavelet_prior", "auto_examples/optimization/index", "auto_examples/optimization/sg_execution_times", "auto_examples/patch-priors/demo_epll", "auto_examples/patch-priors/demo_patch_priors_CT", "auto_examples/patch-priors/index", "auto_examples/patch-priors/sg_execution_times", "auto_examples/plug-and-play/demo_PnP_DPIR_deblur", "auto_examples/plug-and-play/demo_PnP_custom_optim", "auto_examples/plug-and-play/demo_PnP_mirror_descent", "auto_examples/plug-and-play/demo_RED_GSPnP_SR", "auto_examples/plug-and-play/demo_vanilla_PnP", "auto_examples/plug-and-play/index", "auto_examples/plug-and-play/sg_execution_times", "auto_examples/sampling/demo_custom_kernel", "auto_examples/sampling/demo_ddrm", "auto_examples/sampling/demo_diffpir", "auto_examples/sampling/demo_dps", "auto_examples/sampling/demo_sampling", "auto_examples/sampling/index", "auto_examples/sampling/sg_execution_times", "auto_examples/self-supervised-learning/demo_artifact2artifact", "auto_examples/self-supervised-learning/demo_ei_transforms", "auto_examples/self-supervised-learning/demo_equivariant_imaging", "auto_examples/self-supervised-learning/demo_multioperator_imaging", "auto_examples/self-supervised-learning/demo_n2n_denoising", "auto_examples/self-supervised-learning/demo_splitting_loss", "auto_examples/self-supervised-learning/demo_sure_denoising", "auto_examples/self-supervised-learning/demo_unsure", "auto_examples/self-supervised-learning/index", "auto_examples/self-supervised-learning/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/unfolded/demo_DEQ", "auto_examples/unfolded/demo_LISTA", "auto_examples/unfolded/demo_custom_prior_unfolded", "auto_examples/unfolded/demo_learned_primal_dual", "auto_examples/unfolded/demo_unfolded_constrained_LISTA", "auto_examples/unfolded/demo_vanilla_unfolded", "auto_examples/unfolded/index", "auto_examples/unfolded/sg_execution_times", "community", "contributing", "finding_help", "index", "quickstart", "sg_execution_times", "user_guide", "user_guide/other/notation", "user_guide/other/utils", "user_guide/physics/defining", "user_guide/physics/functional", "user_guide/physics/intro", "user_guide/physics/physics", "user_guide/reconstruction/adversarial", "user_guide/reconstruction/artifact", "user_guide/reconstruction/denoisers", "user_guide/reconstruction/introduction", "user_guide/reconstruction/iterative", "user_guide/reconstruction/optimization", "user_guide/reconstruction/sampling", "user_guide/reconstruction/specific", "user_guide/reconstruction/unfolded", "user_guide/reconstruction/weights", "user_guide/training/datasets", "user_guide/training/loss", "user_guide/training/metric", "user_guide/training/multigpu", "user_guide/training/trainer", "user_guide/training/transforms"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["API.rst", "api/deepinv.datasets.rst", "api/deepinv.loss.rst", "api/deepinv.metric.rst", "api/deepinv.models.rst", "api/deepinv.optim.rst", "api/deepinv.physics.rst", "api/deepinv.sampling.rst", "api/deepinv.training.rst", "api/deepinv.transform.rst", "api/deepinv.unfolded.rst", "api/deepinv.utils.rst", "api/stubs/deepinv.Trainer.rst", "api/stubs/deepinv.datasets.CBSD68.rst", "api/stubs/deepinv.datasets.DIV2K.rst", "api/stubs/deepinv.datasets.FMD.rst", "api/stubs/deepinv.datasets.FastMRISliceDataset.rst", "api/stubs/deepinv.datasets.Flickr2kHR.rst", "api/stubs/deepinv.datasets.HDF5Dataset.rst", "api/stubs/deepinv.datasets.Kohler.rst", "api/stubs/deepinv.datasets.LidcIdriSliceDataset.rst", "api/stubs/deepinv.datasets.LsdirHR.rst", "api/stubs/deepinv.datasets.NBUDataset.rst", "api/stubs/deepinv.datasets.PatchDataset.rst", "api/stubs/deepinv.datasets.Set14HR.rst", "api/stubs/deepinv.datasets.Urban100HR.rst", "api/stubs/deepinv.datasets.generate_dataset.rst", "api/stubs/deepinv.loss.Artifact2ArtifactLoss.rst", "api/stubs/deepinv.loss.BaseLossScheduler.rst", "api/stubs/deepinv.loss.EILoss.rst", "api/stubs/deepinv.loss.FNEJacobianSpectralNorm.rst", "api/stubs/deepinv.loss.InterleavedEpochLossScheduler.rst", "api/stubs/deepinv.loss.InterleavedLossScheduler.rst", "api/stubs/deepinv.loss.JacobianSpectralNorm.rst", "api/stubs/deepinv.loss.Loss.rst", "api/stubs/deepinv.loss.MCLoss.rst", "api/stubs/deepinv.loss.MOEILoss.rst", "api/stubs/deepinv.loss.MOILoss.rst", "api/stubs/deepinv.loss.Neighbor2Neighbor.rst", "api/stubs/deepinv.loss.Phase2PhaseLoss.rst", "api/stubs/deepinv.loss.R2RLoss.rst", "api/stubs/deepinv.loss.RandomLossScheduler.rst", "api/stubs/deepinv.loss.ScoreLoss.rst", "api/stubs/deepinv.loss.SplittingLoss.rst", "api/stubs/deepinv.loss.StackedPhysicsLoss.rst", "api/stubs/deepinv.loss.StepLossScheduler.rst", "api/stubs/deepinv.loss.SupLoss.rst", "api/stubs/deepinv.loss.SureGaussianLoss.rst", "api/stubs/deepinv.loss.SurePGLoss.rst", "api/stubs/deepinv.loss.SurePoissonLoss.rst", "api/stubs/deepinv.loss.TVLoss.rst", "api/stubs/deepinv.loss.adversarial.DiscriminatorLoss.rst", "api/stubs/deepinv.loss.adversarial.DiscriminatorMetric.rst", "api/stubs/deepinv.loss.adversarial.GeneratorLoss.rst", "api/stubs/deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss.rst", "api/stubs/deepinv.loss.adversarial.SupAdversarialGeneratorLoss.rst", "api/stubs/deepinv.loss.adversarial.UAIRGeneratorLoss.rst", "api/stubs/deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss.rst", "api/stubs/deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss.rst", "api/stubs/deepinv.loss.metric.ERGAS.rst", "api/stubs/deepinv.loss.metric.L1L2.rst", "api/stubs/deepinv.loss.metric.LPIPS.rst", "api/stubs/deepinv.loss.metric.LpNorm.rst", "api/stubs/deepinv.loss.metric.MAE.rst", "api/stubs/deepinv.loss.metric.MSE.rst", "api/stubs/deepinv.loss.metric.Metric.rst", "api/stubs/deepinv.loss.metric.NIQE.rst", "api/stubs/deepinv.loss.metric.NMSE.rst", "api/stubs/deepinv.loss.metric.PSNR.rst", "api/stubs/deepinv.loss.metric.QNR.rst", "api/stubs/deepinv.loss.metric.SSIM.rst", "api/stubs/deepinv.loss.metric.SpectralAngleMapper.rst", "api/stubs/deepinv.models.ArtifactRemoval.rst", "api/stubs/deepinv.models.AutoEncoder.rst", "api/stubs/deepinv.models.BM3D.rst", "api/stubs/deepinv.models.CSGMGenerator.rst", "api/stubs/deepinv.models.ConvDecoder.rst", "api/stubs/deepinv.models.DCGANDiscriminator.rst", "api/stubs/deepinv.models.DCGANGenerator.rst", "api/stubs/deepinv.models.DRUNet.rst", "api/stubs/deepinv.models.DeepImagePrior.rst", "api/stubs/deepinv.models.Denoiser.rst", "api/stubs/deepinv.models.DiffUNet.rst", "api/stubs/deepinv.models.DnCNN.rst", "api/stubs/deepinv.models.EPLLDenoiser.rst", "api/stubs/deepinv.models.ESRGANDiscriminator.rst", "api/stubs/deepinv.models.EquivariantDenoiser.rst", "api/stubs/deepinv.models.GSDRUNet.rst", "api/stubs/deepinv.models.ICNN.rst", "api/stubs/deepinv.models.MedianFilter.rst", "api/stubs/deepinv.models.PDNet_DualBlock.rst", "api/stubs/deepinv.models.PDNet_PrimalBlock.rst", "api/stubs/deepinv.models.PanNet.rst", "api/stubs/deepinv.models.PatchGANDiscriminator.rst", "api/stubs/deepinv.models.Reconstructor.rst", "api/stubs/deepinv.models.Restormer.rst", "api/stubs/deepinv.models.SCUNet.rst", "api/stubs/deepinv.models.SwinIR.rst", "api/stubs/deepinv.models.TGVDenoiser.rst", "api/stubs/deepinv.models.TVDenoiser.rst", "api/stubs/deepinv.models.TimeAgnosticNet.rst", "api/stubs/deepinv.models.TimeAveragingNet.rst", "api/stubs/deepinv.models.UNet.rst", "api/stubs/deepinv.models.WaveletDenoiser.rst", "api/stubs/deepinv.models.WaveletDictDenoiser.rst", "api/stubs/deepinv.models.complex.to_complex_denoiser.rst", "api/stubs/deepinv.optim.AmplitudeLoss.rst", "api/stubs/deepinv.optim.AmplitudeLossDistance.rst", "api/stubs/deepinv.optim.BaseOptim.rst", "api/stubs/deepinv.optim.Bregman.rst", "api/stubs/deepinv.optim.BregmanL2.rst", "api/stubs/deepinv.optim.Bregman_ICNN.rst", "api/stubs/deepinv.optim.BurgEntropy.rst", "api/stubs/deepinv.optim.DPIR.rst", "api/stubs/deepinv.optim.DataFidelity.rst", "api/stubs/deepinv.optim.Distance.rst", "api/stubs/deepinv.optim.EPLL.rst", "api/stubs/deepinv.optim.FixedPoint.rst", "api/stubs/deepinv.optim.IndicatorL2.rst", "api/stubs/deepinv.optim.IndicatorL2Distance.rst", "api/stubs/deepinv.optim.L1.rst", "api/stubs/deepinv.optim.L12Prior.rst", "api/stubs/deepinv.optim.L1Distance.rst", "api/stubs/deepinv.optim.L1Prior.rst", "api/stubs/deepinv.optim.L2.rst", "api/stubs/deepinv.optim.L2Distance.rst", "api/stubs/deepinv.optim.LogPoissonLikelihood.rst", "api/stubs/deepinv.optim.LogPoissonLikelihoodDistance.rst", "api/stubs/deepinv.optim.NegEntropy.rst", "api/stubs/deepinv.optim.OptimIterator.rst", "api/stubs/deepinv.optim.PatchNR.rst", "api/stubs/deepinv.optim.PatchPrior.rst", "api/stubs/deepinv.optim.PnP.rst", "api/stubs/deepinv.optim.PoissonLikelihood.rst", "api/stubs/deepinv.optim.PoissonLikelihoodDistance.rst", "api/stubs/deepinv.optim.Potential.rst", "api/stubs/deepinv.optim.Prior.rst", "api/stubs/deepinv.optim.RED.rst", "api/stubs/deepinv.optim.ScorePrior.rst", "api/stubs/deepinv.optim.StackedPhysicsDataFidelity.rst", "api/stubs/deepinv.optim.TVPrior.rst", "api/stubs/deepinv.optim.Tikhonov.rst", "api/stubs/deepinv.optim.WaveletPrior.rst", "api/stubs/deepinv.optim.optim_builder.rst", "api/stubs/deepinv.optim.optim_iterators.ADMMIteration.rst", "api/stubs/deepinv.optim.optim_iterators.CPIteration.rst", "api/stubs/deepinv.optim.optim_iterators.DRSIteration.rst", "api/stubs/deepinv.optim.optim_iterators.FISTAIteration.rst", "api/stubs/deepinv.optim.optim_iterators.GDIteration.rst", "api/stubs/deepinv.optim.optim_iterators.HQSIteration.rst", "api/stubs/deepinv.optim.optim_iterators.MDIteration.rst", "api/stubs/deepinv.optim.optim_iterators.PGDIteration.rst", "api/stubs/deepinv.optim.optim_iterators.SMIteration.rst", "api/stubs/deepinv.optim.optim_iterators.fStep.rst", "api/stubs/deepinv.optim.optim_iterators.gStep.rst", "api/stubs/deepinv.optim.utils.GaussianMixtureModel.rst", "api/stubs/deepinv.optim.utils.conjugate_gradient.rst", "api/stubs/deepinv.optim.utils.gradient_descent.rst", "api/stubs/deepinv.physics.Blur.rst", "api/stubs/deepinv.physics.BlurFFT.rst", "api/stubs/deepinv.physics.CompressedSensing.rst", "api/stubs/deepinv.physics.Decolorize.rst", "api/stubs/deepinv.physics.DecomposablePhysics.rst", "api/stubs/deepinv.physics.Demosaicing.rst", "api/stubs/deepinv.physics.Denoising.rst", "api/stubs/deepinv.physics.Downsampling.rst", "api/stubs/deepinv.physics.DynamicMRI.rst", "api/stubs/deepinv.physics.GammaNoise.rst", "api/stubs/deepinv.physics.GaussianNoise.rst", "api/stubs/deepinv.physics.Haze.rst", "api/stubs/deepinv.physics.HyperSpectralUnmixing.rst", "api/stubs/deepinv.physics.Inpainting.rst", "api/stubs/deepinv.physics.LinearPhysics.rst", "api/stubs/deepinv.physics.LogPoissonNoise.rst", "api/stubs/deepinv.physics.MRI.rst", "api/stubs/deepinv.physics.MRIMixin.rst", "api/stubs/deepinv.physics.MultiCoilMRI.rst", "api/stubs/deepinv.physics.Pansharpen.rst", "api/stubs/deepinv.physics.PhaseRetrieval.rst", "api/stubs/deepinv.physics.Physics.rst", "api/stubs/deepinv.physics.PoissonGaussianNoise.rst", "api/stubs/deepinv.physics.PoissonNoise.rst", "api/stubs/deepinv.physics.Ptychography.rst", "api/stubs/deepinv.physics.PtychographyLinearOperator.rst", "api/stubs/deepinv.physics.RadioInterferometry.rst", "api/stubs/deepinv.physics.RandomPhaseRetrieval.rst", "api/stubs/deepinv.physics.SequentialMRI.rst", "api/stubs/deepinv.physics.SinglePhotonLidar.rst", "api/stubs/deepinv.physics.SinglePixelCamera.rst", "api/stubs/deepinv.physics.SpaceVaryingBlur.rst", "api/stubs/deepinv.physics.StackedLinearPhysics.rst", "api/stubs/deepinv.physics.StackedPhysics.rst", "api/stubs/deepinv.physics.StructuredRandom.rst", "api/stubs/deepinv.physics.StructuredRandomPhaseRetrieval.rst", "api/stubs/deepinv.physics.TimeMixin.rst", "api/stubs/deepinv.physics.Tomography.rst", "api/stubs/deepinv.physics.UniformGaussianNoise.rst", "api/stubs/deepinv.physics.UniformNoise.rst", "api/stubs/deepinv.physics.adjoint_function.rst", "api/stubs/deepinv.physics.blur.bicubic_filter.rst", "api/stubs/deepinv.physics.blur.bilinear_filter.rst", "api/stubs/deepinv.physics.blur.gaussian_blur.rst", "api/stubs/deepinv.physics.blur.sinc_filter.rst", "api/stubs/deepinv.physics.functional.IRadon.rst", "api/stubs/deepinv.physics.functional.Radon.rst", "api/stubs/deepinv.physics.functional.conv2d.rst", "api/stubs/deepinv.physics.functional.conv2d_fft.rst", "api/stubs/deepinv.physics.functional.conv3d_fft.rst", "api/stubs/deepinv.physics.functional.conv_transpose2d.rst", "api/stubs/deepinv.physics.functional.conv_transpose2d_fft.rst", "api/stubs/deepinv.physics.functional.conv_transpose3d_fft.rst", "api/stubs/deepinv.physics.functional.histogram.rst", "api/stubs/deepinv.physics.functional.histogramdd.rst", "api/stubs/deepinv.physics.functional.multiplier.rst", "api/stubs/deepinv.physics.functional.multiplier_adjoint.rst", "api/stubs/deepinv.physics.functional.product_convolution2d.rst", "api/stubs/deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator.rst", "api/stubs/deepinv.physics.generator.BaseMaskGenerator.rst", "api/stubs/deepinv.physics.generator.BernoulliSplittingMaskGenerator.rst", "api/stubs/deepinv.physics.generator.DiffractionBlurGenerator.rst", "api/stubs/deepinv.physics.generator.DiffractionBlurGenerator3D.rst", "api/stubs/deepinv.physics.generator.EquispacedMaskGenerator.rst", "api/stubs/deepinv.physics.generator.GaussianMaskGenerator.rst", "api/stubs/deepinv.physics.generator.GaussianSplittingMaskGenerator.rst", "api/stubs/deepinv.physics.generator.GeneratorMixture.rst", "api/stubs/deepinv.physics.generator.MotionBlurGenerator.rst", "api/stubs/deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator.rst", "api/stubs/deepinv.physics.generator.PhysicsGenerator.rst", "api/stubs/deepinv.physics.generator.ProductConvolutionBlurGenerator.rst", "api/stubs/deepinv.physics.generator.RandomMaskGenerator.rst", "api/stubs/deepinv.physics.generator.SigmaGenerator.rst", "api/stubs/deepinv.physics.phase_retrieval.build_probe.rst", "api/stubs/deepinv.physics.phase_retrieval.generate_shifts.rst", "api/stubs/deepinv.physics.stack.rst", "api/stubs/deepinv.sampling.DDRM.rst", "api/stubs/deepinv.sampling.DPS.rst", "api/stubs/deepinv.sampling.DiffPIR.rst", "api/stubs/deepinv.sampling.DiffusionSampler.rst", "api/stubs/deepinv.sampling.MonteCarlo.rst", "api/stubs/deepinv.sampling.SKRock.rst", "api/stubs/deepinv.sampling.ULA.rst", "api/stubs/deepinv.test.rst", "api/stubs/deepinv.train.rst", "api/stubs/deepinv.training.AdversarialTrainer.rst", "api/stubs/deepinv.transform.CPABDiffeomorphism.rst", "api/stubs/deepinv.transform.Homography.rst", "api/stubs/deepinv.transform.Reflect.rst", "api/stubs/deepinv.transform.Rotate.rst", "api/stubs/deepinv.transform.Scale.rst", "api/stubs/deepinv.transform.Shift.rst", "api/stubs/deepinv.transform.ShiftTime.rst", "api/stubs/deepinv.transform.Transform.rst", "api/stubs/deepinv.transform.projective.Affine.rst", "api/stubs/deepinv.transform.projective.Euclidean.rst", "api/stubs/deepinv.transform.projective.PanTiltRotate.rst", "api/stubs/deepinv.transform.projective.Similarity.rst", "api/stubs/deepinv.unfolded.BaseDEQ.rst", "api/stubs/deepinv.unfolded.BaseUnfold.rst", "api/stubs/deepinv.unfolded.DEQ_builder.rst", "api/stubs/deepinv.unfolded.unfolded_builder.rst", "api/stubs/deepinv.utils.TensorList.rst", "api/stubs/deepinv.utils.demo.demo_mri_model.rst", "api/stubs/deepinv.utils.get_data_home.rst", "api/stubs/deepinv.utils.get_freer_gpu.rst", "api/stubs/deepinv.utils.load_image.rst", "api/stubs/deepinv.utils.load_url_image.rst", "api/stubs/deepinv.utils.ones_like.rst", "api/stubs/deepinv.utils.plot.rst", "api/stubs/deepinv.utils.plot_curves.rst", "api/stubs/deepinv.utils.plot_inset.rst", "api/stubs/deepinv.utils.plot_ortho3D.rst", "api/stubs/deepinv.utils.plot_parameters.rst", "api/stubs/deepinv.utils.plot_videos.rst", "api/stubs/deepinv.utils.rand_like.rst", "api/stubs/deepinv.utils.randn_like.rst", "api/stubs/deepinv.utils.zeros_like.rst", "auto_examples/advanced/demo_ri_basic.rst", "auto_examples/advanced/index.rst", "auto_examples/advanced/sg_execution_times.rst", "auto_examples/adversarial-learning/demo_gan_imaging.rst", "auto_examples/adversarial-learning/index.rst", "auto_examples/adversarial-learning/sg_execution_times.rst", "auto_examples/basics/demo_blur_tour.rst", "auto_examples/basics/demo_custom_prior.rst", "auto_examples/basics/demo_dataset.rst", "auto_examples/basics/demo_dip.rst", "auto_examples/basics/demo_hf_dataset.rst", "auto_examples/basics/demo_lidar.rst", "auto_examples/basics/demo_loading.rst", "auto_examples/basics/demo_microscopy_3d.rst", "auto_examples/basics/demo_phase_retrieval.rst", "auto_examples/basics/demo_physics.rst", "auto_examples/basics/demo_physics_tour.rst", "auto_examples/basics/demo_ptychography.rst", "auto_examples/basics/demo_remote_sensing.rst", "auto_examples/basics/demo_train_inpainting.rst", "auto_examples/basics/demo_transforms.rst", "auto_examples/basics/index.rst", "auto_examples/basics/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/optimization/demo_3D_wavelets.rst", "auto_examples/optimization/demo_TV_minimisation.rst", "auto_examples/optimization/demo_wavelet_prior.rst", "auto_examples/optimization/index.rst", "auto_examples/optimization/sg_execution_times.rst", "auto_examples/patch-priors/demo_epll.rst", "auto_examples/patch-priors/demo_patch_priors_CT.rst", "auto_examples/patch-priors/index.rst", "auto_examples/patch-priors/sg_execution_times.rst", "auto_examples/plug-and-play/demo_PnP_DPIR_deblur.rst", "auto_examples/plug-and-play/demo_PnP_custom_optim.rst", "auto_examples/plug-and-play/demo_PnP_mirror_descent.rst", "auto_examples/plug-and-play/demo_RED_GSPnP_SR.rst", "auto_examples/plug-and-play/demo_vanilla_PnP.rst", "auto_examples/plug-and-play/index.rst", "auto_examples/plug-and-play/sg_execution_times.rst", "auto_examples/sampling/demo_custom_kernel.rst", "auto_examples/sampling/demo_ddrm.rst", "auto_examples/sampling/demo_diffpir.rst", "auto_examples/sampling/demo_dps.rst", "auto_examples/sampling/demo_sampling.rst", "auto_examples/sampling/index.rst", "auto_examples/sampling/sg_execution_times.rst", "auto_examples/self-supervised-learning/demo_artifact2artifact.rst", "auto_examples/self-supervised-learning/demo_ei_transforms.rst", "auto_examples/self-supervised-learning/demo_equivariant_imaging.rst", "auto_examples/self-supervised-learning/demo_multioperator_imaging.rst", "auto_examples/self-supervised-learning/demo_n2n_denoising.rst", "auto_examples/self-supervised-learning/demo_splitting_loss.rst", "auto_examples/self-supervised-learning/demo_sure_denoising.rst", "auto_examples/self-supervised-learning/demo_unsure.rst", "auto_examples/self-supervised-learning/index.rst", "auto_examples/self-supervised-learning/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/unfolded/demo_DEQ.rst", "auto_examples/unfolded/demo_LISTA.rst", "auto_examples/unfolded/demo_custom_prior_unfolded.rst", "auto_examples/unfolded/demo_learned_primal_dual.rst", "auto_examples/unfolded/demo_unfolded_constrained_LISTA.rst", "auto_examples/unfolded/demo_vanilla_unfolded.rst", "auto_examples/unfolded/index.rst", "auto_examples/unfolded/sg_execution_times.rst", "community.rst", "contributing.rst", "finding_help.rst", "index.rst", "quickstart.rst", "sg_execution_times.rst", "user_guide.rst", "user_guide/other/notation.rst", "user_guide/other/utils.rst", "user_guide/physics/defining.rst", "user_guide/physics/functional.rst", "user_guide/physics/intro.rst", "user_guide/physics/physics.rst", "user_guide/reconstruction/adversarial.rst", "user_guide/reconstruction/artifact.rst", "user_guide/reconstruction/denoisers.rst", "user_guide/reconstruction/introduction.rst", "user_guide/reconstruction/iterative.rst", "user_guide/reconstruction/optimization.rst", "user_guide/reconstruction/sampling.rst", "user_guide/reconstruction/specific.rst", "user_guide/reconstruction/unfolded.rst", "user_guide/reconstruction/weights.rst", "user_guide/training/datasets.rst", "user_guide/training/loss.rst", "user_guide/training/metric.rst", "user_guide/training/multigpu.rst", "user_guide/training/trainer.rst", "user_guide/training/transforms.rst"], "indexentries": {"__add__() (deepinv.physics.generator.physicsgenerator method)": [[227, "deepinv.physics.generator.PhysicsGenerator.__add__", false]], "__add__() (deepinv.transform.transform method)": [[251, "deepinv.transform.Transform.__add__", false]], "__add__() (deepinv.utils.tensorlist method)": [[260, "deepinv.utils.TensorList.__add__", false]], "__mul__() (deepinv.physics.inpainting method)": [[171, "deepinv.physics.Inpainting.__mul__", false]], "__mul__() (deepinv.physics.linearphysics method)": [[172, "deepinv.physics.LinearPhysics.__mul__", false]], "__mul__() (deepinv.physics.physics method)": [[179, "deepinv.physics.Physics.__mul__", false]], "__mul__() (deepinv.transform.transform method)": [[251, "deepinv.transform.Transform.__mul__", false]], "__mul__() (deepinv.utils.tensorlist method)": [[260, "deepinv.utils.TensorList.__mul__", false]], "__neg__() (deepinv.utils.tensorlist method)": [[260, "deepinv.utils.TensorList.__neg__", false]], "__sub__() (deepinv.utils.tensorlist method)": [[260, "deepinv.utils.TensorList.__sub__", false]], "__truediv__() (deepinv.utils.tensorlist method)": [[260, "deepinv.utils.TensorList.__truediv__", false]], "a() (deepinv.physics.blur method)": [[158, "deepinv.physics.Blur.A", false]], "a() (deepinv.physics.blurfft method)": [[159, "deepinv.physics.BlurFFT.A", false]], "a() (deepinv.physics.compressedsensing method)": [[160, "deepinv.physics.CompressedSensing.A", false]], "a() (deepinv.physics.decomposablephysics method)": [[162, "deepinv.physics.DecomposablePhysics.A", false]], "a() (deepinv.physics.downsampling method)": [[165, "deepinv.physics.Downsampling.A", false]], "a() (deepinv.physics.dynamicmri method)": [[166, "deepinv.physics.DynamicMRI.A", false]], "a() (deepinv.physics.haze method)": [[169, "deepinv.physics.Haze.A", false]], "a() (deepinv.physics.hyperspectralunmixing method)": [[170, "deepinv.physics.HyperSpectralUnmixing.A", false]], "a() (deepinv.physics.multicoilmri method)": [[176, "deepinv.physics.MultiCoilMRI.A", false]], "a() (deepinv.physics.phaseretrieval method)": [[178, "deepinv.physics.PhaseRetrieval.A", false]], "a() (deepinv.physics.physics method)": [[179, "deepinv.physics.Physics.A", false]], "a() (deepinv.physics.ptychographylinearoperator method)": [[183, "deepinv.physics.PtychographyLinearOperator.A", false]], "a() (deepinv.physics.radiointerferometry method)": [[184, "deepinv.physics.RadioInterferometry.A", false]], "a() (deepinv.physics.sequentialmri method)": [[186, "deepinv.physics.SequentialMRI.A", false]], "a() (deepinv.physics.singlephotonlidar method)": [[187, "deepinv.physics.SinglePhotonLidar.A", false]], "a() (deepinv.physics.spacevaryingblur method)": [[189, "deepinv.physics.SpaceVaryingBlur.A", false]], "a() (deepinv.physics.stackedphysics method)": [[191, "deepinv.physics.StackedPhysics.A", false]], "a() (deepinv.physics.tomography method)": [[195, "deepinv.physics.Tomography.A", false]], "a_a_adjoint() (deepinv.physics.decomposablephysics method)": [[162, "deepinv.physics.DecomposablePhysics.A_A_adjoint", false]], "a_a_adjoint() (deepinv.physics.linearphysics method)": [[172, "deepinv.physics.LinearPhysics.A_A_adjoint", false]], "a_adjoint() (deepinv.physics.blur method)": [[158, "deepinv.physics.Blur.A_adjoint", false]], "a_adjoint() (deepinv.physics.blurfft method)": [[159, "deepinv.physics.BlurFFT.A_adjoint", false]], "a_adjoint() (deepinv.physics.compressedsensing method)": [[160, "deepinv.physics.CompressedSensing.A_adjoint", false]], "a_adjoint() (deepinv.physics.decomposablephysics method)": [[162, "deepinv.physics.DecomposablePhysics.A_adjoint", false]], "a_adjoint() (deepinv.physics.downsampling method)": [[165, "deepinv.physics.Downsampling.A_adjoint", false]], "a_adjoint() (deepinv.physics.dynamicmri method)": [[166, "deepinv.physics.DynamicMRI.A_adjoint", false]], "a_adjoint() (deepinv.physics.hyperspectralunmixing method)": [[170, "deepinv.physics.HyperSpectralUnmixing.A_adjoint", false]], "a_adjoint() (deepinv.physics.linearphysics method)": [[172, "deepinv.physics.LinearPhysics.A_adjoint", false]], "a_adjoint() (deepinv.physics.multicoilmri method)": [[176, "deepinv.physics.MultiCoilMRI.A_adjoint", false]], "a_adjoint() (deepinv.physics.ptychographylinearoperator method)": [[183, "deepinv.physics.PtychographyLinearOperator.A_adjoint", false]], "a_adjoint() (deepinv.physics.radiointerferometry method)": [[184, "deepinv.physics.RadioInterferometry.A_adjoint", false]], "a_adjoint() (deepinv.physics.sequentialmri method)": [[186, "deepinv.physics.SequentialMRI.A_adjoint", false]], "a_adjoint() (deepinv.physics.spacevaryingblur method)": [[189, "deepinv.physics.SpaceVaryingBlur.A_adjoint", false]], "a_adjoint() (deepinv.physics.stackedlinearphysics method)": [[190, "deepinv.physics.StackedLinearPhysics.A_adjoint", false]], "a_adjoint() (deepinv.physics.tomography method)": [[195, "deepinv.physics.Tomography.A_adjoint", false]], "a_adjoint_a() (deepinv.physics.decomposablephysics method)": [[162, "deepinv.physics.DecomposablePhysics.A_adjoint_A", false]], "a_adjoint_a() (deepinv.physics.linearphysics method)": [[172, "deepinv.physics.LinearPhysics.A_adjoint_A", false]], "a_dagger() (deepinv.physics.compressedsensing method)": [[160, "deepinv.physics.CompressedSensing.A_dagger", false]], "a_dagger() (deepinv.physics.decomposablephysics method)": [[162, "deepinv.physics.DecomposablePhysics.A_dagger", false]], "a_dagger() (deepinv.physics.dynamicmri method)": [[166, "deepinv.physics.DynamicMRI.A_dagger", false]], "a_dagger() (deepinv.physics.haze method)": [[169, "deepinv.physics.Haze.A_dagger", false]], "a_dagger() (deepinv.physics.hyperspectralunmixing method)": [[170, "deepinv.physics.HyperSpectralUnmixing.A_dagger", false]], "a_dagger() (deepinv.physics.linearphysics method)": [[172, "deepinv.physics.LinearPhysics.A_dagger", false]], "a_dagger() (deepinv.physics.pansharpen method)": [[177, "deepinv.physics.Pansharpen.A_dagger", false]], "a_dagger() (deepinv.physics.phaseretrieval method)": [[178, "deepinv.physics.PhaseRetrieval.A_dagger", false]], "a_dagger() (deepinv.physics.physics method)": [[179, "deepinv.physics.Physics.A_dagger", false]], "a_dagger() (deepinv.physics.singlephotonlidar method)": [[187, "deepinv.physics.SinglePhotonLidar.A_dagger", false]], "a_dagger() (deepinv.physics.tomography method)": [[195, "deepinv.physics.Tomography.A_dagger", false]], "a_vjp() (deepinv.physics.linearphysics method)": [[172, "deepinv.physics.LinearPhysics.A_vjp", false]], "a_vjp() (deepinv.physics.phaseretrieval method)": [[178, "deepinv.physics.PhaseRetrieval.A_vjp", false]], "a_vjp() (deepinv.physics.physics method)": [[179, "deepinv.physics.Physics.A_vjp", false]], "adapt_model() (deepinv.loss.baselossscheduler method)": [[28, "deepinv.loss.BaseLossScheduler.adapt_model", false]], "adapt_model() (deepinv.loss.loss method)": [[34, "deepinv.loss.Loss.adapt_model", false]], "adapt_model() (deepinv.loss.phase2phaseloss method)": [[39, "deepinv.loss.Phase2PhaseLoss.adapt_model", false]], "adapt_model() (deepinv.loss.r2rloss method)": [[40, "deepinv.loss.R2RLoss.adapt_model", false]], "adapt_model() (deepinv.loss.scoreloss method)": [[42, "deepinv.loss.ScoreLoss.adapt_model", false]], "adapt_model() (deepinv.loss.splittingloss method)": [[43, "deepinv.loss.SplittingLoss.adapt_model", false]], "adjoint_function (class in deepinv.physics)": [[198, "deepinv.physics.adjoint_function", false]], "adjointness_test() (deepinv.physics.linearphysics method)": [[172, "deepinv.physics.LinearPhysics.adjointness_test", false]], "admmiteration (class in deepinv.optim.optim_iterators)": [[144, "deepinv.optim.optim_iterators.ADMMIteration", false]], "adversarial_loss() (deepinv.loss.adversarial.discriminatorloss method)": [[51, "deepinv.loss.adversarial.DiscriminatorLoss.adversarial_loss", false]], "adversarial_loss() (deepinv.loss.adversarial.generatorloss method)": [[53, "deepinv.loss.adversarial.GeneratorLoss.adversarial_loss", false]], "adversarialtrainer (class in deepinv.training)": [[243, "deepinv.training.AdversarialTrainer", false]], "affine (class in deepinv.transform.projective)": [[252, "deepinv.transform.projective.Affine", false]], "amplitudeloss (class in deepinv.optim)": [[106, "deepinv.optim.AmplitudeLoss", false]], "amplitudelossdistance (class in deepinv.optim)": [[107, "deepinv.optim.AmplitudeLossDistance", false]], "anderson_acceleration_step() (deepinv.optim.fixedpoint method)": [[117, "deepinv.optim.FixedPoint.anderson_acceleration_step", false]], "append() (deepinv.utils.tensorlist method)": [[260, "deepinv.utils.TensorList.append", false]], "artifact2artifactloss (class in deepinv.loss)": [[27, "deepinv.loss.Artifact2ArtifactLoss", false]], "artifact2artifactsplittingmaskgenerator (class in deepinv.physics.generator)": [[216, "deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator", false]], "artifactremoval (class in deepinv.models)": [[72, "deepinv.models.ArtifactRemoval", false]], "autoencoder (class in deepinv.models)": [[73, "deepinv.models.AutoEncoder", false]], "average() (deepinv.physics.timemixin static method)": [[194, "deepinv.physics.TimeMixin.average", false]], "b_dagger() (deepinv.physics.phaseretrieval method)": [[178, "deepinv.physics.PhaseRetrieval.B_dagger", false]], "b_dagger() (deepinv.physics.structuredrandomphaseretrieval method)": [[193, "deepinv.physics.StructuredRandomPhaseRetrieval.B_dagger", false]], "basedeq() (in module deepinv.unfolded)": [[256, "deepinv.unfolded.BaseDEQ", false]], "baselossscheduler (class in deepinv.loss)": [[28, "deepinv.loss.BaseLossScheduler", false]], "basemaskgenerator (class in deepinv.physics.generator)": [[217, "deepinv.physics.generator.BaseMaskGenerator", false]], "baseoptim() (in module deepinv.optim)": [[108, "deepinv.optim.BaseOptim", false]], "baseunfold() (in module deepinv.unfolded)": [[257, "deepinv.unfolded.BaseUnfold", false]], "batch_step() (deepinv.physics.generator.artifact2artifactsplittingmaskgenerator method)": [[216, "deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator.batch_step", false]], "batch_step() (deepinv.physics.generator.bernoullisplittingmaskgenerator method)": [[218, "deepinv.physics.generator.BernoulliSplittingMaskGenerator.batch_step", false]], "batch_step() (deepinv.physics.generator.gaussiansplittingmaskgenerator method)": [[223, "deepinv.physics.generator.GaussianSplittingMaskGenerator.batch_step", false]], "batch_step() (deepinv.physics.generator.phase2phasesplittingmaskgenerator method)": [[226, "deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator.batch_step", false]], "bernoullisplittingmaskgenerator (class in deepinv.physics.generator)": [[218, "deepinv.physics.generator.BernoulliSplittingMaskGenerator", false]], "bicubic_filter (class in deepinv.physics.blur)": [[199, "deepinv.physics.blur.bicubic_filter", false]], "bilinear_filter (class in deepinv.physics.blur)": [[200, "deepinv.physics.blur.bilinear_filter", false]], "blur (class in deepinv.physics)": [[158, "deepinv.physics.Blur", false]], "blurfft (class in deepinv.physics)": [[159, "deepinv.physics.BlurFFT", false]], "bm3d (class in deepinv.models)": [[74, "deepinv.models.BM3D", false]], "bregman (class in deepinv.optim)": [[109, "deepinv.optim.Bregman", false]], "bregman_icnn (class in deepinv.optim)": [[111, "deepinv.optim.Bregman_ICNN", false]], "bregman_prox() (deepinv.optim.potential method)": [[135, "deepinv.optim.Potential.bregman_prox", false]], "bregmanl2 (class in deepinv.optim)": [[110, "deepinv.optim.BregmanL2", false]], "build_probe (class in deepinv.physics.phase_retrieval)": [[231, "deepinv.physics.phase_retrieval.build_probe", false]], "burgentropy (class in deepinv.optim)": [[112, "deepinv.optim.BurgEntropy", false]], "cbsd68 (class in deepinv.datasets)": [[13, "deepinv.datasets.CBSD68", false]], "check_clip_grad() (deepinv.trainer method)": [[12, "deepinv.Trainer.check_clip_grad", false]], "check_clip_grad_d() (deepinv.training.adversarialtrainer method)": [[243, "deepinv.training.AdversarialTrainer.check_clip_grad_D", false]], "check_dataset_exists() (deepinv.datasets.cbsd68 method)": [[13, "deepinv.datasets.CBSD68.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.flickr2khr method)": [[17, "deepinv.datasets.Flickr2kHR.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.nbudataset method)": [[22, "deepinv.datasets.NBUDataset.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.set14hr method)": [[24, "deepinv.datasets.Set14HR.check_dataset_exists", false]], "check_dataset_exists() (deepinv.datasets.urban100hr method)": [[25, "deepinv.datasets.Urban100HR.check_dataset_exists", false]], "check_mask() (deepinv.physics.dynamicmri method)": [[166, "deepinv.physics.DynamicMRI.check_mask", false]], "check_mask() (deepinv.physics.mrimixin method)": [[175, "deepinv.physics.MRIMixin.check_mask", false]], "check_pixelwise() (deepinv.physics.generator.bernoullisplittingmaskgenerator method)": [[218, "deepinv.physics.generator.BernoulliSplittingMaskGenerator.check_pixelwise", false]], "classify() (deepinv.optim.utils.gaussianmixturemodel method)": [[155, "deepinv.optim.utils.GaussianMixtureModel.classify", false]], "clone() (deepinv.utils.tensorlist method)": [[260, "deepinv.utils.TensorList.clone", false]], "component_log_likelihoods() (deepinv.optim.utils.gaussianmixturemodel method)": [[155, "deepinv.optim.utils.GaussianMixtureModel.component_log_likelihoods", false]], "compressedsensing (class in deepinv.physics)": [[160, "deepinv.physics.CompressedSensing", false]], "compute_alpha() (deepinv.sampling.diffpir method)": [[236, "deepinv.sampling.DiffPIR.compute_alpha", false]], "compute_alpha_betas() (deepinv.sampling.dps method)": [[235, "deepinv.sampling.DPS.compute_alpha_betas", false]], "compute_loss() (deepinv.trainer method)": [[12, "deepinv.Trainer.compute_loss", false]], "compute_loss() (deepinv.training.adversarialtrainer method)": [[243, "deepinv.training.AdversarialTrainer.compute_loss", false]], "compute_metrics() (deepinv.trainer method)": [[12, "deepinv.Trainer.compute_metrics", false]], "compute_norm() (deepinv.physics.linearphysics method)": [[172, "deepinv.physics.LinearPhysics.compute_norm", false]], "conj() (deepinv.utils.tensorlist method)": [[260, "deepinv.utils.TensorList.conj", false]], "conjugate() (deepinv.optim.bregman_icnn method)": [[111, "deepinv.optim.Bregman_ICNN.conjugate", false]], "conjugate() (deepinv.optim.bregmanl2 method)": [[110, "deepinv.optim.BregmanL2.conjugate", false]], "conjugate() (deepinv.optim.burgentropy method)": [[112, "deepinv.optim.BurgEntropy.conjugate", false]], "conjugate() (deepinv.optim.negentropy method)": [[128, "deepinv.optim.NegEntropy.conjugate", false]], "conjugate() (deepinv.optim.potential method)": [[135, "deepinv.optim.Potential.conjugate", false]], "conjugate_gradient (class in deepinv.optim.utils)": [[156, "deepinv.optim.utils.conjugate_gradient", false]], "conv2d (class in deepinv.physics.functional)": [[205, "deepinv.physics.functional.conv2d", false]], "conv2d_fft (class in deepinv.physics.functional)": [[206, "deepinv.physics.functional.conv2d_fft", false]], "conv3d_fft (class in deepinv.physics.functional)": [[207, "deepinv.physics.functional.conv3d_fft", false]], "conv_transpose2d (class in deepinv.physics.functional)": [[208, "deepinv.physics.functional.conv_transpose2d", false]], "conv_transpose2d_fft (class in deepinv.physics.functional)": [[209, "deepinv.physics.functional.conv_transpose2d_fft", false]], "conv_transpose3d_fft (class in deepinv.physics.functional)": [[210, "deepinv.physics.functional.conv_transpose3d_fft", false]], "convdecoder (class in deepinv.models)": [[76, "deepinv.models.ConvDecoder", false]], "convert_to_fp16() (deepinv.models.diffunet method)": [[82, "deepinv.models.DiffUNet.convert_to_fp16", false]], "convert_to_fp32() (deepinv.models.diffunet method)": [[82, "deepinv.models.DiffUNet.convert_to_fp32", false]], "cpabdiffeomorphism (class in deepinv.transform)": [[244, "deepinv.transform.CPABDiffeomorphism", false]], "cpiteration (class in deepinv.optim.optim_iterators)": [[145, "deepinv.optim.optim_iterators.CPIteration", false]], "cpu() (deepinv.utils.tensorlist method)": [[260, "deepinv.utils.TensorList.cpu", false]], "create_sampler() (deepinv.models.pannet method)": [[92, "deepinv.models.PanNet.create_sampler", false]], "crop_output() (deepinv.models.waveletdenoiser method)": [[103, "deepinv.models.WaveletDenoiser.crop_output", false]], "csgmgenerator (class in deepinv.models)": [[75, "deepinv.models.CSGMGenerator", false]], "cuda() (deepinv.utils.tensorlist method)": [[260, "deepinv.utils.TensorList.cuda", false]], "d_lambda() (deepinv.loss.metric.qnr method)": [[69, "deepinv.loss.metric.QNR.D_lambda", false]], "d_s() (deepinv.loss.metric.qnr method)": [[69, "deepinv.loss.metric.QNR.D_s", false]], "datafidelity (class in deepinv.optim)": [[114, "deepinv.optim.DataFidelity", false]], "dcgandiscriminator (class in deepinv.models)": [[77, "deepinv.models.DCGANDiscriminator", false]], "dcgangenerator (class in deepinv.models)": [[78, "deepinv.models.DCGANGenerator", false]], "ddrm (class in deepinv.sampling)": [[234, "deepinv.sampling.DDRM", false]], "decolorize (class in deepinv.physics)": [[161, "deepinv.physics.Decolorize", false]], "decomposablephysics (class in deepinv.physics)": [[162, "deepinv.physics.DecomposablePhysics", false]], "deepimageprior (class in deepinv.models)": [[80, "deepinv.models.DeepImagePrior", false]], "demo_mri_model() (in module deepinv.utils.demo)": [[261, "deepinv.utils.demo.demo_mri_model", false]], "demosaicing (class in deepinv.physics)": [[163, "deepinv.physics.Demosaicing", false]], "denoiser (class in deepinv.models)": [[81, "deepinv.models.Denoiser", false]], "denoising (class in deepinv.physics)": [[164, "deepinv.physics.Denoising", false]], "deq_builder() (in module deepinv.unfolded)": [[258, "deepinv.unfolded.DEQ_builder", false]], "detach() (deepinv.utils.tensorlist method)": [[260, "deepinv.utils.TensorList.detach", false]], "diffpir (class in deepinv.sampling)": [[236, "deepinv.sampling.DiffPIR", false]], "diffractionblurgenerator (class in deepinv.physics.generator)": [[219, "deepinv.physics.generator.DiffractionBlurGenerator", false]], "diffractionblurgenerator3d (class in deepinv.physics.generator)": [[220, "deepinv.physics.generator.DiffractionBlurGenerator3D", false]], "diffunet (class in deepinv.models)": [[82, "deepinv.models.DiffUNet", false]], "diffusionsampler (class in deepinv.sampling)": [[237, "deepinv.sampling.DiffusionSampler", false]], "discriminatorloss (class in deepinv.loss.adversarial)": [[51, "deepinv.loss.adversarial.DiscriminatorLoss", false]], "discriminatormetric (class in deepinv.loss.adversarial)": [[52, "deepinv.loss.adversarial.DiscriminatorMetric", false]], "distance (class in deepinv.optim)": [[115, "deepinv.optim.Distance", false]], "div() (deepinv.optim.bregman method)": [[109, "deepinv.optim.Bregman.div", false]], "div() (deepinv.optim.bregmanl2 method)": [[110, "deepinv.optim.BregmanL2.div", false]], "div2k (class in deepinv.datasets)": [[14, "deepinv.datasets.DIV2K", false]], "dncnn (class in deepinv.models)": [[83, "deepinv.models.DnCNN", false]], "download() (deepinv.datasets.kohler class method)": [[19, "deepinv.datasets.Kohler.download", false]], "downsampling (class in deepinv.physics)": [[165, "deepinv.physics.Downsampling", false]], "dpir (class in deepinv.optim)": [[113, "deepinv.optim.DPIR", false]], "dps (class in deepinv.sampling)": [[235, "deepinv.sampling.DPS", false]], "drsiteration (class in deepinv.optim.optim_iterators)": [[146, "deepinv.optim.optim_iterators.DRSIteration", false]], "drunet (class in deepinv.models)": [[79, "deepinv.models.DRUNet", false]], "dwt() (deepinv.models.waveletdenoiser method)": [[103, "deepinv.models.WaveletDenoiser.dwt", false]], "dynamicmri (class in deepinv.physics)": [[166, "deepinv.physics.DynamicMRI", false]], "eiloss (class in deepinv.loss)": [[29, "deepinv.loss.EILoss", false]], "epll (class in deepinv.optim)": [[116, "deepinv.optim.EPLL", false]], "eplldenoiser (class in deepinv.models)": [[84, "deepinv.models.EPLLDenoiser", false]], "epsilon() (deepinv.models.tgvdenoiser static method)": [[98, "deepinv.models.TGVDenoiser.epsilon", false]], "epsilon_adjoint() (deepinv.models.tgvdenoiser static method)": [[98, "deepinv.models.TGVDenoiser.epsilon_adjoint", false]], "equispacedmaskgenerator (class in deepinv.physics.generator)": [[221, "deepinv.physics.generator.EquispacedMaskGenerator", false]], "equivariantdenoiser (class in deepinv.models)": [[86, "deepinv.models.EquivariantDenoiser", false]], "ergas (class in deepinv.loss.metric)": [[59, "deepinv.loss.metric.ERGAS", false]], "esrgandiscriminator (class in deepinv.models)": [[85, "deepinv.models.ESRGANDiscriminator", false]], "euclidean (class in deepinv.transform.projective)": [[253, "deepinv.transform.projective.Euclidean", false]], "f_matern() (deepinv.physics.generator.motionblurgenerator method)": [[225, "deepinv.physics.generator.MotionBlurGenerator.f_matern", false]], "fastmrislicedataset (class in deepinv.datasets)": [[16, "deepinv.datasets.FastMRISliceDataset", false]], "fastmrislicedataset.slicesamplefileidentifier (class in deepinv.datasets)": [[16, "deepinv.datasets.FastMRISliceDataset.SliceSampleFileIdentifier", false]], "fft() (deepinv.physics.mrimixin static method)": [[175, "deepinv.physics.MRIMixin.fft", false]], "find_nearest() (deepinv.models.diffunet method)": [[82, "deepinv.models.DiffUNet.find_nearest", false]], "find_nearest() (deepinv.sampling.diffpir method)": [[236, "deepinv.sampling.DiffPIR.find_nearest", false]], "fistaiteration (class in deepinv.optim.optim_iterators)": [[147, "deepinv.optim.optim_iterators.FISTAIteration", false]], "fit() (deepinv.optim.utils.gaussianmixturemodel method)": [[155, "deepinv.optim.utils.GaussianMixtureModel.fit", false]], "fixedpoint (class in deepinv.optim)": [[117, "deepinv.optim.FixedPoint", false]], "flatten() (deepinv.physics.timemixin static method)": [[194, "deepinv.physics.TimeMixin.flatten", false]], "flatten() (deepinv.utils.tensorlist method)": [[260, "deepinv.utils.TensorList.flatten", false]], "flatten_c() (deepinv.physics.timemixin static method)": [[194, "deepinv.physics.TimeMixin.flatten_C", false]], "flatten_coeffs() (deepinv.models.waveletdenoiser method)": [[103, "deepinv.models.WaveletDenoiser.flatten_coeffs", false]], "flickr2khr (class in deepinv.datasets)": [[17, "deepinv.datasets.Flickr2kHR", false]], "fmd (class in deepinv.datasets)": [[15, "deepinv.datasets.FMD", false]], "fmd.noisysampleidentifier (class in deepinv.datasets)": [[15, "deepinv.datasets.FMD.NoisySampleIdentifier", false]], "fn() (deepinv.optim.amplitudelossdistance method)": [[107, "deepinv.optim.AmplitudeLossDistance.fn", false]], "fn() (deepinv.optim.bregman_icnn method)": [[111, "deepinv.optim.Bregman_ICNN.fn", false]], "fn() (deepinv.optim.bregmanl2 method)": [[110, "deepinv.optim.BregmanL2.fn", false]], "fn() (deepinv.optim.burgentropy method)": [[112, "deepinv.optim.BurgEntropy.fn", false]], "fn() (deepinv.optim.datafidelity method)": [[114, "deepinv.optim.DataFidelity.fn", false]], "fn() (deepinv.optim.distance method)": [[115, "deepinv.optim.Distance.fn", false]], "fn() (deepinv.optim.indicatorl2distance method)": [[119, "deepinv.optim.IndicatorL2Distance.fn", false]], "fn() (deepinv.optim.l12prior method)": [[121, "deepinv.optim.L12Prior.fn", false]], "fn() (deepinv.optim.l1distance method)": [[122, "deepinv.optim.L1Distance.fn", false]], "fn() (deepinv.optim.l1prior method)": [[123, "deepinv.optim.L1Prior.fn", false]], "fn() (deepinv.optim.l2distance method)": [[125, "deepinv.optim.L2Distance.fn", false]], "fn() (deepinv.optim.logpoissonlikelihooddistance method)": [[127, "deepinv.optim.LogPoissonLikelihoodDistance.fn", false]], "fn() (deepinv.optim.negentropy method)": [[128, "deepinv.optim.NegEntropy.fn", false]], "fn() (deepinv.optim.patchnr method)": [[130, "deepinv.optim.PatchNR.fn", false]], "fn() (deepinv.optim.patchprior method)": [[131, "deepinv.optim.PatchPrior.fn", false]], "fn() (deepinv.optim.poissonlikelihooddistance method)": [[134, "deepinv.optim.PoissonLikelihoodDistance.fn", false]], "fn() (deepinv.optim.potential method)": [[135, "deepinv.optim.Potential.fn", false]], "fn() (deepinv.optim.stackedphysicsdatafidelity method)": [[139, "deepinv.optim.StackedPhysicsDataFidelity.fn", false]], "fn() (deepinv.optim.tikhonov method)": [[141, "deepinv.optim.Tikhonov.fn", false]], "fn() (deepinv.optim.tvprior method)": [[140, "deepinv.optim.TVPrior.fn", false]], "fn() (deepinv.optim.waveletprior method)": [[142, "deepinv.optim.WaveletPrior.fn", false]], "fname (deepinv.datasets.fastmrislicedataset.slicesamplefileidentifier attribute)": [[16, "deepinv.datasets.FastMRISliceDataset.SliceSampleFileIdentifier.fname", false]], "fname (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[15, "deepinv.datasets.FMD.NoisySampleIdentifier.fname", false]], "fnejacobianspectralnorm (class in deepinv.loss)": [[30, "deepinv.loss.FNEJacobianSpectralNorm", false]], "forward() (deepinv.loss.adversarial.discriminatorloss method)": [[51, "deepinv.loss.adversarial.DiscriminatorLoss.forward", false]], "forward() (deepinv.loss.adversarial.generatorloss method)": [[53, "deepinv.loss.adversarial.GeneratorLoss.forward", false]], "forward() (deepinv.loss.adversarial.supadversarialdiscriminatorloss method)": [[54, "deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss.forward", false]], "forward() (deepinv.loss.adversarial.supadversarialgeneratorloss method)": [[55, "deepinv.loss.adversarial.SupAdversarialGeneratorLoss.forward", false]], "forward() (deepinv.loss.adversarial.uairgeneratorloss method)": [[56, "deepinv.loss.adversarial.UAIRGeneratorLoss.forward", false]], "forward() (deepinv.loss.adversarial.unsupadversarialdiscriminatorloss method)": [[57, "deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss.forward", false]], "forward() (deepinv.loss.adversarial.unsupadversarialgeneratorloss method)": [[58, "deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss.forward", false]], "forward() (deepinv.loss.artifact2artifactloss method)": [[27, "deepinv.loss.Artifact2ArtifactLoss.forward", false]], "forward() (deepinv.loss.baselossscheduler method)": [[28, "deepinv.loss.BaseLossScheduler.forward", false]], "forward() (deepinv.loss.eiloss method)": [[29, "deepinv.loss.EILoss.forward", false]], "forward() (deepinv.loss.fnejacobianspectralnorm method)": [[30, "deepinv.loss.FNEJacobianSpectralNorm.forward", false]], "forward() (deepinv.loss.jacobianspectralnorm method)": [[33, "deepinv.loss.JacobianSpectralNorm.forward", false]], "forward() (deepinv.loss.loss method)": [[34, "deepinv.loss.Loss.forward", false]], "forward() (deepinv.loss.mcloss method)": [[35, "deepinv.loss.MCLoss.forward", false]], "forward() (deepinv.loss.metric.metric method)": [[65, "deepinv.loss.metric.Metric.forward", false]], "forward() (deepinv.loss.moeiloss method)": [[36, "deepinv.loss.MOEILoss.forward", false]], "forward() (deepinv.loss.moiloss method)": [[37, "deepinv.loss.MOILoss.forward", false]], "forward() (deepinv.loss.neighbor2neighbor method)": [[38, "deepinv.loss.Neighbor2Neighbor.forward", false]], "forward() (deepinv.loss.r2rloss method)": [[40, "deepinv.loss.R2RLoss.forward", false]], "forward() (deepinv.loss.scoreloss method)": [[42, "deepinv.loss.ScoreLoss.forward", false]], "forward() (deepinv.loss.splittingloss method)": [[43, "deepinv.loss.SplittingLoss.forward", false]], "forward() (deepinv.loss.stackedphysicsloss method)": [[44, "deepinv.loss.StackedPhysicsLoss.forward", false]], "forward() (deepinv.loss.suploss method)": [[46, "deepinv.loss.SupLoss.forward", false]], "forward() (deepinv.loss.suregaussianloss method)": [[47, "deepinv.loss.SureGaussianLoss.forward", false]], "forward() (deepinv.loss.surepgloss method)": [[48, "deepinv.loss.SurePGLoss.forward", false]], "forward() (deepinv.loss.surepoissonloss method)": [[49, "deepinv.loss.SurePoissonLoss.forward", false]], "forward() (deepinv.loss.tvloss method)": [[50, "deepinv.loss.TVLoss.forward", false]], "forward() (deepinv.models.artifactremoval method)": [[72, "deepinv.models.ArtifactRemoval.forward", false]], "forward() (deepinv.models.autoencoder method)": [[73, "deepinv.models.AutoEncoder.forward", false]], "forward() (deepinv.models.bm3d method)": [[74, "deepinv.models.BM3D.forward", false]], "forward() (deepinv.models.convdecoder method)": [[76, "deepinv.models.ConvDecoder.forward", false]], "forward() (deepinv.models.csgmgenerator method)": [[75, "deepinv.models.CSGMGenerator.forward", false]], "forward() (deepinv.models.dcgandiscriminator method)": [[77, "deepinv.models.DCGANDiscriminator.forward", false]], "forward() (deepinv.models.dcgangenerator method)": [[78, "deepinv.models.DCGANGenerator.forward", false]], "forward() (deepinv.models.deepimageprior method)": [[80, "deepinv.models.DeepImagePrior.forward", false]], "forward() (deepinv.models.denoiser method)": [[81, "deepinv.models.Denoiser.forward", false]], "forward() (deepinv.models.diffunet method)": [[82, "deepinv.models.DiffUNet.forward", false]], "forward() (deepinv.models.dncnn method)": [[83, "deepinv.models.DnCNN.forward", false]], "forward() (deepinv.models.drunet method)": [[79, "deepinv.models.DRUNet.forward", false]], "forward() (deepinv.models.eplldenoiser method)": [[84, "deepinv.models.EPLLDenoiser.forward", false]], "forward() (deepinv.models.equivariantdenoiser method)": [[86, "deepinv.models.EquivariantDenoiser.forward", false]], "forward() (deepinv.models.esrgandiscriminator method)": [[85, "deepinv.models.ESRGANDiscriminator.forward", false]], "forward() (deepinv.models.icnn method)": [[88, "deepinv.models.ICNN.forward", false]], "forward() (deepinv.models.medianfilter method)": [[89, "deepinv.models.MedianFilter.forward", false]], "forward() (deepinv.models.pannet method)": [[92, "deepinv.models.PanNet.forward", false]], "forward() (deepinv.models.patchgandiscriminator method)": [[93, "deepinv.models.PatchGANDiscriminator.forward", false]], "forward() (deepinv.models.pdnet_dualblock method)": [[90, "deepinv.models.PDNet_DualBlock.forward", false]], "forward() (deepinv.models.pdnet_primalblock method)": [[91, "deepinv.models.PDNet_PrimalBlock.forward", false]], "forward() (deepinv.models.reconstructor method)": [[94, "deepinv.models.Reconstructor.forward", false]], "forward() (deepinv.models.restormer method)": [[95, "deepinv.models.Restormer.forward", false]], "forward() (deepinv.models.scunet method)": [[96, "deepinv.models.SCUNet.forward", false]], "forward() (deepinv.models.swinir method)": [[97, "deepinv.models.SwinIR.forward", false]], "forward() (deepinv.models.tgvdenoiser method)": [[98, "deepinv.models.TGVDenoiser.forward", false]], "forward() (deepinv.models.timeagnosticnet method)": [[100, "deepinv.models.TimeAgnosticNet.forward", false]], "forward() (deepinv.models.timeaveragingnet method)": [[101, "deepinv.models.TimeAveragingNet.forward", false]], "forward() (deepinv.models.tvdenoiser method)": [[99, "deepinv.models.TVDenoiser.forward", false]], "forward() (deepinv.models.unet method)": [[102, "deepinv.models.UNet.forward", false]], "forward() (deepinv.models.waveletdenoiser method)": [[103, "deepinv.models.WaveletDenoiser.forward", false]], "forward() (deepinv.models.waveletdictdenoiser method)": [[104, "deepinv.models.WaveletDictDenoiser.forward", false]], "forward() (deepinv.optim.distance method)": [[115, "deepinv.optim.Distance.forward", false]], "forward() (deepinv.optim.epll method)": [[116, "deepinv.optim.EPLL.forward", false]], "forward() (deepinv.optim.fixedpoint method)": [[117, "deepinv.optim.FixedPoint.forward", false]], "forward() (deepinv.optim.optim_iterators.admmiteration method)": [[144, "deepinv.optim.optim_iterators.ADMMIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.cpiteration method)": [[145, "deepinv.optim.optim_iterators.CPIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.drsiteration method)": [[146, "deepinv.optim.optim_iterators.DRSIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.fistaiteration method)": [[147, "deepinv.optim.optim_iterators.FISTAIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.gditeration method)": [[148, "deepinv.optim.optim_iterators.GDIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.mditeration method)": [[150, "deepinv.optim.optim_iterators.MDIteration.forward", false]], "forward() (deepinv.optim.optim_iterators.smiteration method)": [[152, "deepinv.optim.optim_iterators.SMIteration.forward", false]], "forward() (deepinv.optim.optimiterator method)": [[129, "deepinv.optim.OptimIterator.forward", false]], "forward() (deepinv.optim.potential method)": [[135, "deepinv.optim.Potential.forward", false]], "forward() (deepinv.optim.utils.gaussianmixturemodel method)": [[155, "deepinv.optim.utils.GaussianMixtureModel.forward", false]], "forward() (deepinv.physics.functional.iradon method)": [[203, "deepinv.physics.functional.IRadon.forward", false]], "forward() (deepinv.physics.functional.radon method)": [[204, "deepinv.physics.functional.Radon.forward", false]], "forward() (deepinv.physics.gammanoise method)": [[167, "deepinv.physics.GammaNoise.forward", false]], "forward() (deepinv.physics.gaussiannoise method)": [[168, "deepinv.physics.GaussianNoise.forward", false]], "forward() (deepinv.physics.logpoissonnoise method)": [[173, "deepinv.physics.LogPoissonNoise.forward", false]], "forward() (deepinv.physics.phaseretrieval method)": [[178, "deepinv.physics.PhaseRetrieval.forward", false]], "forward() (deepinv.physics.physics method)": [[179, "deepinv.physics.Physics.forward", false]], "forward() (deepinv.physics.poissongaussiannoise method)": [[180, "deepinv.physics.PoissonGaussianNoise.forward", false]], "forward() (deepinv.physics.poissonnoise method)": [[181, "deepinv.physics.PoissonNoise.forward", false]], "forward() (deepinv.physics.uniformgaussiannoise method)": [[196, "deepinv.physics.UniformGaussianNoise.forward", false]], "forward() (deepinv.physics.uniformnoise method)": [[197, "deepinv.physics.UniformNoise.forward", false]], "forward() (deepinv.sampling.ddrm method)": [[234, "deepinv.sampling.DDRM.forward", false]], "forward() (deepinv.sampling.diffpir method)": [[236, "deepinv.sampling.DiffPIR.forward", false]], "forward() (deepinv.sampling.dps method)": [[235, "deepinv.sampling.DPS.forward", false]], "forward() (deepinv.sampling.montecarlo method)": [[238, "deepinv.sampling.MonteCarlo.forward", false]], "forward() (deepinv.transform.transform method)": [[251, "deepinv.transform.Transform.forward", false]], "forward_denoise() (deepinv.models.diffunet method)": [[82, "deepinv.models.DiffUNet.forward_denoise", false]], "forward_diffusion() (deepinv.models.diffunet method)": [[82, "deepinv.models.DiffUNet.forward_diffusion", false]], "forward_restormer() (deepinv.models.restormer method)": [[95, "deepinv.models.Restormer.forward_restormer", false]], "fov (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[15, "deepinv.datasets.FMD.NoisySampleIdentifier.fov", false]], "from_torch_complex() (deepinv.physics.mrimixin static method)": [[175, "deepinv.physics.MRIMixin.from_torch_complex", false]], "fstep (class in deepinv.optim.optim_iterators)": [[153, "deepinv.optim.optim_iterators.fStep", false]], "gammanoise (class in deepinv.physics)": [[167, "deepinv.physics.GammaNoise", false]], "gaussian_blur (class in deepinv.physics.blur)": [[201, "deepinv.physics.blur.gaussian_blur", false]], "gaussianmaskgenerator (class in deepinv.physics.generator)": [[222, "deepinv.physics.generator.GaussianMaskGenerator", false]], "gaussianmixturemodel (class in deepinv.optim.utils)": [[155, "deepinv.optim.utils.GaussianMixtureModel", false]], "gaussiannoise (class in deepinv.physics)": [[168, "deepinv.physics.GaussianNoise", false]], "gaussiansplittingmaskgenerator (class in deepinv.physics.generator)": [[223, "deepinv.physics.generator.GaussianSplittingMaskGenerator", false]], "gditeration (class in deepinv.optim.optim_iterators)": [[148, "deepinv.optim.optim_iterators.GDIteration", false]], "generate_coeff() (deepinv.physics.generator.diffractionblurgenerator method)": [[219, "deepinv.physics.generator.DiffractionBlurGenerator.generate_coeff", false]], "generate_dataset (class in deepinv.datasets)": [[26, "deepinv.datasets.generate_dataset", false]], "generate_shifts (class in deepinv.physics.phase_retrieval)": [[232, "deepinv.physics.phase_retrieval.generate_shifts", false]], "generatorloss (class in deepinv.loss.adversarial)": [[53, "deepinv.loss.adversarial.GeneratorLoss", false]], "generatormixture (class in deepinv.physics.generator)": [[224, "deepinv.physics.generator.GeneratorMixture", false]], "get_alpha_beta() (deepinv.sampling.diffpir method)": [[236, "deepinv.sampling.DiffPIR.get_alpha_beta", false]], "get_alpha_prod() (deepinv.models.diffunet method)": [[82, "deepinv.models.DiffUNet.get_alpha_prod", false]], "get_alpha_prod() (deepinv.sampling.diffpir method)": [[236, "deepinv.sampling.DiffPIR.get_alpha_prod", false]], "get_chain() (deepinv.sampling.montecarlo method)": [[238, "deepinv.sampling.MonteCarlo.get_chain", false]], "get_cov() (deepinv.optim.utils.gaussianmixturemodel method)": [[155, "deepinv.optim.utils.GaussianMixtureModel.get_cov", false]], "get_cov_inv_reg() (deepinv.optim.utils.gaussianmixturemodel method)": [[155, "deepinv.optim.utils.GaussianMixtureModel.get_cov_inv_reg", false]], "get_data_home() (in module deepinv.utils)": [[262, "deepinv.utils.get_data_home", false]], "get_freer_gpu() (in module deepinv.utils)": [[263, "deepinv.utils.get_freer_gpu", false]], "get_item() (deepinv.datasets.kohler method)": [[19, "deepinv.datasets.Kohler.get_item", false]], "get_noise_schedule() (deepinv.sampling.diffpir method)": [[236, "deepinv.sampling.DiffPIR.get_noise_schedule", false]], "get_overlap_img() (deepinv.physics.ptychographylinearoperator method)": [[183, "deepinv.physics.PtychographyLinearOperator.get_overlap_img", false]], "get_params() (deepinv.transform.transform method)": [[251, "deepinv.transform.Transform.get_params", false]], "get_pdf() (deepinv.physics.generator.gaussianmaskgenerator method)": [[222, "deepinv.physics.generator.GaussianMaskGenerator.get_pdf", false]], "get_pdf() (deepinv.physics.generator.randommaskgenerator method)": [[229, "deepinv.physics.generator.RandomMaskGenerator.get_pdf", false]], "get_samples() (deepinv.trainer method)": [[12, "deepinv.Trainer.get_samples", false]], "get_samples_offline() (deepinv.trainer method)": [[12, "deepinv.Trainer.get_samples_offline", false]], "get_samples_online() (deepinv.trainer method)": [[12, "deepinv.Trainer.get_samples_online", false]], "get_structure() (deepinv.physics.structuredrandomphaseretrieval static method)": [[193, "deepinv.physics.StructuredRandomPhaseRetrieval.get_structure", false]], "get_weights() (deepinv.optim.utils.gaussianmixturemodel method)": [[155, "deepinv.optim.utils.GaussianMixtureModel.get_weights", false]], "grad() (deepinv.optim.amplitudelossdistance method)": [[107, "deepinv.optim.AmplitudeLossDistance.grad", false]], "grad() (deepinv.optim.bregmanl2 method)": [[110, "deepinv.optim.BregmanL2.grad", false]], "grad() (deepinv.optim.burgentropy method)": [[112, "deepinv.optim.BurgEntropy.grad", false]], "grad() (deepinv.optim.datafidelity method)": [[114, "deepinv.optim.DataFidelity.grad", false]], "grad() (deepinv.optim.l1distance method)": [[122, "deepinv.optim.L1Distance.grad", false]], "grad() (deepinv.optim.l2distance method)": [[125, "deepinv.optim.L2Distance.grad", false]], "grad() (deepinv.optim.negentropy method)": [[128, "deepinv.optim.NegEntropy.grad", false]], "grad() (deepinv.optim.poissonlikelihooddistance method)": [[134, "deepinv.optim.PoissonLikelihoodDistance.grad", false]], "grad() (deepinv.optim.potential method)": [[135, "deepinv.optim.Potential.grad", false]], "grad() (deepinv.optim.red method)": [[137, "deepinv.optim.RED.grad", false]], "grad() (deepinv.optim.scoreprior method)": [[138, "deepinv.optim.ScorePrior.grad", false]], "grad() (deepinv.optim.stackedphysicsdatafidelity method)": [[139, "deepinv.optim.StackedPhysicsDataFidelity.grad", false]], "grad() (deepinv.optim.tikhonov method)": [[141, "deepinv.optim.Tikhonov.grad", false]], "grad_conj() (deepinv.optim.bregmanl2 method)": [[110, "deepinv.optim.BregmanL2.grad_conj", false]], "grad_conj() (deepinv.optim.burgentropy method)": [[112, "deepinv.optim.BurgEntropy.grad_conj", false]], "grad_conj() (deepinv.optim.negentropy method)": [[128, "deepinv.optim.NegEntropy.grad_conj", false]], "grad_conj() (deepinv.optim.potential method)": [[135, "deepinv.optim.Potential.grad_conj", false]], "grad_d() (deepinv.optim.datafidelity method)": [[114, "deepinv.optim.DataFidelity.grad_d", false]], "grad_d() (deepinv.optim.stackedphysicsdatafidelity method)": [[139, "deepinv.optim.StackedPhysicsDataFidelity.grad_d", false]], "gradient_descent (class in deepinv.optim.utils)": [[157, "deepinv.optim.utils.gradient_descent", false]], "gsdrunet (class in deepinv.models)": [[87, "deepinv.models.GSDRUNet", false]], "gstep (class in deepinv.optim.optim_iterators)": [[154, "deepinv.optim.optim_iterators.gStep", false]], "hard_threshold_topk() (deepinv.models.waveletdenoiser method)": [[103, "deepinv.models.WaveletDenoiser.hard_threshold_topk", false]], "haze (class in deepinv.physics)": [[169, "deepinv.physics.Haze", false]], "hdf5dataset (class in deepinv.datasets)": [[18, "deepinv.datasets.HDF5Dataset", false]], "histogram (class in deepinv.physics.functional)": [[211, "deepinv.physics.functional.histogram", false]], "histogramdd (class in deepinv.physics.functional)": [[212, "deepinv.physics.functional.histogramdd", false]], "homography (class in deepinv.transform)": [[245, "deepinv.transform.Homography", false]], "hqsiteration (class in deepinv.optim.optim_iterators)": [[149, "deepinv.optim.optim_iterators.HQSIteration", false]], "hyperspectralunmixing (class in deepinv.physics)": [[170, "deepinv.physics.HyperSpectralUnmixing", false]], "icnn (class in deepinv.models)": [[88, "deepinv.models.ICNN", false]], "identity() (deepinv.transform.transform method)": [[251, "deepinv.transform.Transform.identity", false]], "ifft() (deepinv.physics.mrimixin static method)": [[175, "deepinv.physics.MRIMixin.ifft", false]], "img_type (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[15, "deepinv.datasets.FMD.NoisySampleIdentifier.img_type", false]], "indicatorl2 (class in deepinv.optim)": [[118, "deepinv.optim.IndicatorL2", false]], "indicatorl2distance (class in deepinv.optim)": [[119, "deepinv.optim.IndicatorL2Distance", false]], "init_anderson_acceleration() (deepinv.optim.fixedpoint method)": [[117, "deepinv.optim.FixedPoint.init_anderson_acceleration", false]], "inpainting (class in deepinv.physics)": [[171, "deepinv.physics.Inpainting", false]], "interleavedepochlossscheduler (class in deepinv.loss)": [[31, "deepinv.loss.InterleavedEpochLossScheduler", false]], "interleavedlossscheduler (class in deepinv.loss)": [[32, "deepinv.loss.InterleavedLossScheduler", false]], "inverse() (deepinv.transform.transform method)": [[251, "deepinv.transform.Transform.inverse", false]], "invert_metric() (deepinv.loss.metric.metric method)": [[65, "deepinv.loss.metric.Metric.invert_metric", false]], "invert_metric() (deepinv.loss.metric.qnr method)": [[69, "deepinv.loss.metric.QNR.invert_metric", false]], "invert_metric() (deepinv.loss.metric.ssim method)": [[70, "deepinv.loss.metric.SSIM.invert_metric", false]], "invert_params() (deepinv.transform.transform method)": [[251, "deepinv.transform.Transform.invert_params", false]], "iradon (class in deepinv.physics.functional)": [[203, "deepinv.physics.functional.IRadon", false]], "is_standard_deblurring_network() (deepinv.models.restormer method)": [[95, "deepinv.models.Restormer.is_standard_deblurring_network", false]], "is_standard_denoising_network() (deepinv.models.restormer method)": [[95, "deepinv.models.Restormer.is_standard_denoising_network", false]], "is_standard_deraining_network() (deepinv.models.restormer method)": [[95, "deepinv.models.Restormer.is_standard_deraining_network", false]], "iwt() (deepinv.models.waveletdenoiser method)": [[103, "deepinv.models.WaveletDenoiser.iwt", false]], "jacobianspectralnorm (class in deepinv.loss)": [[33, "deepinv.loss.JacobianSpectralNorm", false]], "kohler (class in deepinv.datasets)": [[19, "deepinv.datasets.Kohler", false]], "l1 (class in deepinv.optim)": [[120, "deepinv.optim.L1", false]], "l12prior (class in deepinv.optim)": [[121, "deepinv.optim.L12Prior", false]], "l1distance (class in deepinv.optim)": [[122, "deepinv.optim.L1Distance", false]], "l1l2 (class in deepinv.loss.metric)": [[60, "deepinv.loss.metric.L1L2", false]], "l1prior (class in deepinv.optim)": [[123, "deepinv.optim.L1Prior", false]], "l2 (class in deepinv.optim)": [[124, "deepinv.optim.L2", false]], "l2distance (class in deepinv.optim)": [[125, "deepinv.optim.L2Distance", false]], "lidcidrislicedataset (class in deepinv.datasets)": [[20, "deepinv.datasets.LidcIdriSliceDataset", false]], "lidcidrislicedataset.slicesampleidentifier (class in deepinv.datasets)": [[20, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier", false]], "linearphysics (class in deepinv.physics)": [[172, "deepinv.physics.LinearPhysics", false]], "load_image() (in module deepinv.utils)": [[264, "deepinv.utils.load_image", false]], "load_state_dict() (deepinv.optim.utils.gaussianmixturemodel method)": [[155, "deepinv.optim.utils.GaussianMixtureModel.load_state_dict", false]], "load_url_image() (in module deepinv.utils)": [[265, "deepinv.utils.load_url_image", false]], "log_metrics_wandb() (deepinv.trainer method)": [[12, "deepinv.Trainer.log_metrics_wandb", false]], "logpoissonlikelihood (class in deepinv.optim)": [[126, "deepinv.optim.LogPoissonLikelihood", false]], "logpoissonlikelihooddistance (class in deepinv.optim)": [[127, "deepinv.optim.LogPoissonLikelihoodDistance", false]], "logpoissonnoise (class in deepinv.physics)": [[173, "deepinv.physics.LogPoissonNoise", false]], "loss (class in deepinv.loss)": [[34, "deepinv.loss.Loss", false]], "lpips (class in deepinv.loss.metric)": [[61, "deepinv.loss.metric.LPIPS", false]], "lpnorm (class in deepinv.loss.metric)": [[62, "deepinv.loss.metric.LpNorm", false]], "lsdirhr (class in deepinv.datasets)": [[21, "deepinv.datasets.LsdirHR", false]], "mae (class in deepinv.loss.metric)": [[63, "deepinv.loss.metric.MAE", false]], "matern_kernel() (deepinv.physics.generator.motionblurgenerator method)": [[225, "deepinv.physics.generator.MotionBlurGenerator.matern_kernel", false]], "mcloss (class in deepinv.loss)": [[35, "deepinv.loss.MCLoss", false]], "md_step() (deepinv.optim.bregman method)": [[109, "deepinv.optim.Bregman.MD_step", false]], "mditeration (class in deepinv.optim.optim_iterators)": [[150, "deepinv.optim.optim_iterators.MDIteration", false]], "mean_has_converged() (deepinv.sampling.montecarlo method)": [[238, "deepinv.sampling.MonteCarlo.mean_has_converged", false]], "medianfilter (class in deepinv.models)": [[89, "deepinv.models.MedianFilter", false]], "metric (class in deepinv.loss.metric)": [[65, "deepinv.loss.metric.Metric", false]], "metric() (deepinv.loss.metric.l1l2 method)": [[60, "deepinv.loss.metric.L1L2.metric", false]], "metric() (deepinv.loss.metric.lpips method)": [[61, "deepinv.loss.metric.LPIPS.metric", false]], "metric() (deepinv.loss.metric.lpnorm method)": [[62, "deepinv.loss.metric.LpNorm.metric", false]], "metric() (deepinv.loss.metric.mae method)": [[63, "deepinv.loss.metric.MAE.metric", false]], "metric() (deepinv.loss.metric.metric method)": [[65, "deepinv.loss.metric.Metric.metric", false]], "metric() (deepinv.loss.metric.mse method)": [[64, "deepinv.loss.metric.MSE.metric", false]], "metric() (deepinv.loss.metric.niqe method)": [[66, "deepinv.loss.metric.NIQE.metric", false]], "metric() (deepinv.loss.metric.nmse method)": [[67, "deepinv.loss.metric.NMSE.metric", false]], "metric() (deepinv.loss.metric.psnr method)": [[68, "deepinv.loss.metric.PSNR.metric", false]], "metric() (deepinv.loss.metric.qnr method)": [[69, "deepinv.loss.metric.QNR.metric", false]], "metric() (deepinv.loss.metric.spectralanglemapper method)": [[71, "deepinv.loss.metric.SpectralAngleMapper.metric", false]], "metric() (deepinv.loss.metric.ssim method)": [[70, "deepinv.loss.metric.SSIM.metric", false]], "model_inference() (deepinv.trainer method)": [[12, "deepinv.Trainer.model_inference", false]], "moeiloss (class in deepinv.loss)": [[36, "deepinv.loss.MOEILoss", false]], "moiloss (class in deepinv.loss)": [[37, "deepinv.loss.MOILoss", false]], "montecarlo (class in deepinv.sampling)": [[238, "deepinv.sampling.MonteCarlo", false]], "motionblurgenerator (class in deepinv.physics.generator)": [[225, "deepinv.physics.generator.MotionBlurGenerator", false]], "mri (class in deepinv.physics)": [[174, "deepinv.physics.MRI", false]], "mrimixin (class in deepinv.physics)": [[175, "deepinv.physics.MRIMixin", false]], "mse (class in deepinv.loss.metric)": [[64, "deepinv.loss.metric.MSE", false]], "multicoilmri (class in deepinv.physics)": [[176, "deepinv.physics.MultiCoilMRI", false]], "multiplier (class in deepinv.physics.functional)": [[213, "deepinv.physics.functional.multiplier", false]], "multiplier_adjoint (class in deepinv.physics.functional)": [[214, "deepinv.physics.functional.multiplier_adjoint", false]], "nabla() (deepinv.models.tgvdenoiser static method)": [[98, "deepinv.models.TGVDenoiser.nabla", false]], "nabla() (deepinv.models.tvdenoiser static method)": [[99, "deepinv.models.TVDenoiser.nabla", false]], "nabla() (deepinv.optim.tvprior method)": [[140, "deepinv.optim.TVPrior.nabla", false]], "nabla_adjoint() (deepinv.models.tgvdenoiser static method)": [[98, "deepinv.models.TGVDenoiser.nabla_adjoint", false]], "nabla_adjoint() (deepinv.models.tvdenoiser static method)": [[99, "deepinv.models.TVDenoiser.nabla_adjoint", false]], "nabla_adjoint() (deepinv.optim.tvprior method)": [[140, "deepinv.optim.TVPrior.nabla_adjoint", false]], "nbudataset (class in deepinv.datasets)": [[22, "deepinv.datasets.NBUDataset", false]], "negative_log_likelihood() (deepinv.optim.epll method)": [[116, "deepinv.optim.EPLL.negative_log_likelihood", false]], "negentropy (class in deepinv.optim)": [[128, "deepinv.optim.NegEntropy", false]], "neighbor2neighbor (class in deepinv.loss)": [[38, "deepinv.loss.Neighbor2Neighbor", false]], "next_physics() (deepinv.loss.moiloss method)": [[37, "deepinv.loss.MOILoss.next_physics", false]], "niqe (class in deepinv.loss.metric)": [[66, "deepinv.loss.metric.NIQE", false]], "nmse (class in deepinv.loss.metric)": [[67, "deepinv.loss.metric.NMSE", false]], "no_learning_inference() (deepinv.trainer method)": [[12, "deepinv.Trainer.no_learning_inference", false]], "noise() (deepinv.physics.dynamicmri method)": [[166, "deepinv.physics.DynamicMRI.noise", false]], "noise() (deepinv.physics.inpainting method)": [[171, "deepinv.physics.Inpainting.noise", false]], "noise() (deepinv.physics.physics method)": [[179, "deepinv.physics.Physics.noise", false]], "noise() (deepinv.physics.stackedphysics method)": [[191, "deepinv.physics.StackedPhysics.noise", false]], "noise_dirname (deepinv.datasets.fmd.noisysampleidentifier attribute)": [[15, "deepinv.datasets.FMD.NoisySampleIdentifier.noise_dirname", false]], "numpy() (deepinv.utils.tensorlist method)": [[260, "deepinv.utils.TensorList.numpy", false]], "ones_like (class in deepinv.utils)": [[266, "deepinv.utils.ones_like", false]], "optim_builder() (in module deepinv.optim)": [[143, "deepinv.optim.optim_builder", false]], "optimiterator (class in deepinv.optim)": [[129, "deepinv.optim.OptimIterator", false]], "optimize_z() (deepinv.models.csgmgenerator method)": [[75, "deepinv.models.CSGMGenerator.optimize_z", false]], "pad_input() (deepinv.models.waveletdenoiser method)": [[103, "deepinv.models.WaveletDenoiser.pad_input", false]], "pannet (class in deepinv.models)": [[92, "deepinv.models.PanNet", false]], "pansharpen (class in deepinv.physics)": [[177, "deepinv.physics.Pansharpen", false]], "pantiltrotate (class in deepinv.transform.projective)": [[254, "deepinv.transform.projective.PanTiltRotate", false]], "patchdataset (class in deepinv.datasets)": [[23, "deepinv.datasets.PatchDataset", false]], "patchgandiscriminator (class in deepinv.models)": [[93, "deepinv.models.PatchGANDiscriminator", false]], "patchnr (class in deepinv.optim)": [[130, "deepinv.optim.PatchNR", false]], "patchprior (class in deepinv.optim)": [[131, "deepinv.optim.PatchPrior", false]], "patient_id (deepinv.datasets.lidcidrislicedataset.slicesampleidentifier attribute)": [[20, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier.patient_id", false]], "pdnet_dualblock (class in deepinv.models)": [[90, "deepinv.models.PDNet_DualBlock", false]], "pdnet_primalblock (class in deepinv.models)": [[91, "deepinv.models.PDNet_PrimalBlock", false]], "pgditeration (class in deepinv.optim.optim_iterators)": [[151, "deepinv.optim.optim_iterators.PGDIteration", false]], "phase2phaseloss (class in deepinv.loss)": [[39, "deepinv.loss.Phase2PhaseLoss", false]], "phase2phasesplittingmaskgenerator (class in deepinv.physics.generator)": [[226, "deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator", false]], "phaseretrieval (class in deepinv.physics)": [[178, "deepinv.physics.PhaseRetrieval", false]], "physics (class in deepinv.physics)": [[179, "deepinv.physics.Physics", false]], "physicsgenerator (class in deepinv.physics.generator)": [[227, "deepinv.physics.generator.PhysicsGenerator", false]], "plot() (deepinv.trainer method)": [[12, "deepinv.Trainer.plot", false]], "plot() (in module deepinv.utils)": [[267, "deepinv.utils.plot", false]], "plot_curves() (in module deepinv.utils)": [[268, "deepinv.utils.plot_curves", false]], "plot_inset() (in module deepinv.utils)": [[269, "deepinv.utils.plot_inset", false]], "plot_ortho3d() (in module deepinv.utils)": [[270, "deepinv.utils.plot_ortho3D", false]], "plot_parameters() (in module deepinv.utils)": [[271, "deepinv.utils.plot_parameters", false]], "plot_videos() (in module deepinv.utils)": [[272, "deepinv.utils.plot_videos", false]], "pnp (class in deepinv.optim)": [[132, "deepinv.optim.PnP", false]], "poissongaussiannoise (class in deepinv.physics)": [[180, "deepinv.physics.PoissonGaussianNoise", false]], "poissonlikelihood (class in deepinv.optim)": [[133, "deepinv.optim.PoissonLikelihood", false]], "poissonlikelihooddistance (class in deepinv.optim)": [[134, "deepinv.optim.PoissonLikelihoodDistance", false]], "poissonnoise (class in deepinv.physics)": [[181, "deepinv.physics.PoissonNoise", false]], "potential (class in deepinv.optim)": [[135, "deepinv.optim.Potential", false]], "prior (class in deepinv.optim)": [[136, "deepinv.optim.Prior", false]], "product_convolution2d (class in deepinv.physics.functional)": [[215, "deepinv.physics.functional.product_convolution2d", false]], "productconvolutionblurgenerator (class in deepinv.physics.generator)": [[228, "deepinv.physics.generator.ProductConvolutionBlurGenerator", false]], "prox() (deepinv.optim.indicatorl2 method)": [[118, "deepinv.optim.IndicatorL2.prox", false]], "prox() (deepinv.optim.indicatorl2distance method)": [[119, "deepinv.optim.IndicatorL2Distance.prox", false]], "prox() (deepinv.optim.l1 method)": [[120, "deepinv.optim.L1.prox", false]], "prox() (deepinv.optim.l12prior method)": [[121, "deepinv.optim.L12Prior.prox", false]], "prox() (deepinv.optim.l1distance method)": [[122, "deepinv.optim.L1Distance.prox", false]], "prox() (deepinv.optim.l1prior method)": [[123, "deepinv.optim.L1Prior.prox", false]], "prox() (deepinv.optim.l2 method)": [[124, "deepinv.optim.L2.prox", false]], "prox() (deepinv.optim.l2distance method)": [[125, "deepinv.optim.L2Distance.prox", false]], "prox() (deepinv.optim.pnp method)": [[132, "deepinv.optim.PnP.prox", false]], "prox() (deepinv.optim.poissonlikelihooddistance method)": [[134, "deepinv.optim.PoissonLikelihoodDistance.prox", false]], "prox() (deepinv.optim.potential method)": [[135, "deepinv.optim.Potential.prox", false]], "prox() (deepinv.optim.tikhonov method)": [[141, "deepinv.optim.Tikhonov.prox", false]], "prox() (deepinv.optim.tvprior method)": [[140, "deepinv.optim.TVPrior.prox", false]], "prox() (deepinv.optim.waveletprior method)": [[142, "deepinv.optim.WaveletPrior.prox", false]], "prox_conjugate() (deepinv.optim.potential method)": [[135, "deepinv.optim.Potential.prox_conjugate", false]], "prox_d() (deepinv.optim.datafidelity method)": [[114, "deepinv.optim.DataFidelity.prox_d", false]], "prox_d() (deepinv.optim.stackedphysicsdatafidelity method)": [[139, "deepinv.optim.StackedPhysicsDataFidelity.prox_d", false]], "prox_d_conjugate() (deepinv.optim.datafidelity method)": [[114, "deepinv.optim.DataFidelity.prox_d_conjugate", false]], "prox_d_conjugate() (deepinv.optim.stackedphysicsdatafidelity method)": [[139, "deepinv.optim.StackedPhysicsDataFidelity.prox_d_conjugate", false]], "prox_l0() (deepinv.models.waveletdenoiser method)": [[103, "deepinv.models.WaveletDenoiser.prox_l0", false]], "prox_l1() (deepinv.models.waveletdenoiser method)": [[103, "deepinv.models.WaveletDenoiser.prox_l1", false]], "prox_l2() (deepinv.physics.decomposablephysics method)": [[162, "deepinv.physics.DecomposablePhysics.prox_l2", false]], "prox_l2() (deepinv.physics.downsampling method)": [[165, "deepinv.physics.Downsampling.prox_l2", false]], "prox_l2() (deepinv.physics.linearphysics method)": [[172, "deepinv.physics.LinearPhysics.prox_l2", false]], "prox_tau_fx() (deepinv.models.tvdenoiser method)": [[99, "deepinv.models.TVDenoiser.prox_tau_fx", false]], "psi() (deepinv.models.waveletdenoiser static method)": [[103, "deepinv.models.WaveletDenoiser.psi", false]], "psi() (deepinv.models.waveletdictdenoiser method)": [[104, "deepinv.models.WaveletDictDenoiser.psi", false]], "psi() (deepinv.optim.waveletprior method)": [[142, "deepinv.optim.WaveletPrior.psi", false]], "psnr (class in deepinv.loss.metric)": [[68, "deepinv.loss.metric.PSNR", false]], "ptychography (class in deepinv.physics)": [[182, "deepinv.physics.Ptychography", false]], "ptychographylinearoperator (class in deepinv.physics)": [[183, "deepinv.physics.PtychographyLinearOperator", false]], "qnr (class in deepinv.loss.metric)": [[69, "deepinv.loss.metric.QNR", false]], "r2rloss (class in deepinv.loss)": [[40, "deepinv.loss.R2RLoss", false]], "radiointerferometry (class in deepinv.physics)": [[184, "deepinv.physics.RadioInterferometry", false]], "radon (class in deepinv.physics.functional)": [[204, "deepinv.physics.functional.Radon", false]], "rand_like (class in deepinv.utils)": [[273, "deepinv.utils.rand_like", false]], "randn_like (class in deepinv.utils)": [[274, "deepinv.utils.randn_like", false]], "random_latent() (deepinv.models.csgmgenerator method)": [[75, "deepinv.models.CSGMGenerator.random_latent", false]], "randomlossscheduler (class in deepinv.loss)": [[41, "deepinv.loss.RandomLossScheduler", false]], "randommaskgenerator (class in deepinv.physics.generator)": [[229, "deepinv.physics.generator.RandomMaskGenerator", false]], "randomphaseretrieval (class in deepinv.physics)": [[185, "deepinv.physics.RandomPhaseRetrieval", false]], "reconstructor (class in deepinv.models)": [[94, "deepinv.models.Reconstructor", false]], "red (class in deepinv.optim)": [[137, "deepinv.optim.RED", false]], "reflect (class in deepinv.transform)": [[246, "deepinv.transform.Reflect", false]], "relaxation_step() (deepinv.optim.optimiterator method)": [[129, "deepinv.optim.OptimIterator.relaxation_step", false]], "repeat() (deepinv.physics.timemixin static method)": [[194, "deepinv.physics.TimeMixin.repeat", false]], "reset() (deepinv.sampling.montecarlo method)": [[238, "deepinv.sampling.MonteCarlo.reset", false]], "reset_metrics() (deepinv.trainer method)": [[12, "deepinv.Trainer.reset_metrics", false]], "reset_rng() (deepinv.physics.generator.physicsgenerator method)": [[227, "deepinv.physics.generator.PhysicsGenerator.reset_rng", false]], "reshape() (deepinv.utils.tensorlist method)": [[260, "deepinv.utils.TensorList.reshape", false]], "reshape_ths() (deepinv.models.waveletdenoiser method)": [[103, "deepinv.models.WaveletDenoiser.reshape_ths", false]], "restormer (class in deepinv.models)": [[95, "deepinv.models.Restormer", false]], "rng_manual_seed() (deepinv.physics.generator.physicsgenerator method)": [[227, "deepinv.physics.generator.PhysicsGenerator.rng_manual_seed", false]], "roll_reflect_1d() (deepinv.transform.shifttime method)": [[250, "deepinv.transform.ShiftTime.roll_reflect_1d", false]], "rotate (class in deepinv.transform)": [[247, "deepinv.transform.Rotate", false]], "sample_mask() (deepinv.physics.generator.basemaskgenerator method)": [[217, "deepinv.physics.generator.BaseMaskGenerator.sample_mask", false]], "sample_mask() (deepinv.physics.generator.equispacedmaskgenerator method)": [[221, "deepinv.physics.generator.EquispacedMaskGenerator.sample_mask", false]], "sample_mask() (deepinv.physics.generator.randommaskgenerator method)": [[229, "deepinv.physics.generator.RandomMaskGenerator.sample_mask", false]], "save_model() (deepinv.trainer method)": [[12, "deepinv.Trainer.save_model", false]], "save_model() (deepinv.training.adversarialtrainer method)": [[243, "deepinv.training.AdversarialTrainer.save_model", false]], "scale (class in deepinv.transform)": [[248, "deepinv.transform.Scale", false]], "scan_folder (deepinv.datasets.lidcidrislicedataset.slicesampleidentifier attribute)": [[20, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier.scan_folder", false]], "schedule() (deepinv.loss.baselossscheduler method)": [[28, "deepinv.loss.BaseLossScheduler.schedule", false]], "schedule() (deepinv.loss.interleavedepochlossscheduler method)": [[31, "deepinv.loss.InterleavedEpochLossScheduler.schedule", false]], "schedule() (deepinv.loss.interleavedlossscheduler method)": [[32, "deepinv.loss.InterleavedLossScheduler.schedule", false]], "schedule() (deepinv.loss.randomlossscheduler method)": [[41, "deepinv.loss.RandomLossScheduler.schedule", false]], "schedule() (deepinv.loss.steplossscheduler method)": [[45, "deepinv.loss.StepLossScheduler.schedule", false]], "scoreloss (class in deepinv.loss)": [[42, "deepinv.loss.ScoreLoss", false]], "scoreprior (class in deepinv.optim)": [[138, "deepinv.optim.ScorePrior", false]], "scunet (class in deepinv.models)": [[96, "deepinv.models.SCUNet", false]], "sensor() (deepinv.physics.physics method)": [[179, "deepinv.physics.Physics.sensor", false]], "sensor() (deepinv.physics.stackedphysics method)": [[191, "deepinv.physics.StackedPhysics.sensor", false]], "sequentialmri (class in deepinv.physics)": [[186, "deepinv.physics.SequentialMRI", false]], "set14hr (class in deepinv.datasets)": [[24, "deepinv.datasets.Set14HR", false]], "set_cov() (deepinv.optim.utils.gaussianmixturemodel method)": [[155, "deepinv.optim.utils.GaussianMixtureModel.set_cov", false]], "set_cov_reg() (deepinv.optim.utils.gaussianmixturemodel method)": [[155, "deepinv.optim.utils.GaussianMixtureModel.set_cov_reg", false]], "set_noise_model() (deepinv.physics.physics method)": [[179, "deepinv.physics.Physics.set_noise_model", false]], "set_noise_model() (deepinv.physics.stackedphysics method)": [[191, "deepinv.physics.StackedPhysics.set_noise_model", false]], "set_weights() (deepinv.optim.utils.gaussianmixturemodel method)": [[155, "deepinv.optim.utils.GaussianMixtureModel.set_weights", false]], "setup_train() (deepinv.trainer method)": [[12, "deepinv.Trainer.setup_train", false]], "setup_train() (deepinv.training.adversarialtrainer method)": [[243, "deepinv.training.AdversarialTrainer.setup_train", false]], "shift (class in deepinv.transform)": [[249, "deepinv.transform.Shift", false]], "shift() (deepinv.physics.ptychographylinearoperator method)": [[183, "deepinv.physics.PtychographyLinearOperator.shift", false]], "shifttime (class in deepinv.transform)": [[250, "deepinv.transform.ShiftTime", false]], "sigmagenerator (class in deepinv.physics.generator)": [[230, "deepinv.physics.generator.SigmaGenerator", false]], "similarity (class in deepinv.transform.projective)": [[255, "deepinv.transform.projective.Similarity", false]], "simulate_birdcage_csm() (deepinv.physics.multicoilmri method)": [[176, "deepinv.physics.MultiCoilMRI.simulate_birdcage_csm", false]], "sinc_filter (class in deepinv.physics.blur)": [[202, "deepinv.physics.blur.sinc_filter", false]], "singlephotonlidar (class in deepinv.physics)": [[187, "deepinv.physics.SinglePhotonLidar", false]], "singlepixelcamera (class in deepinv.physics)": [[188, "deepinv.physics.SinglePixelCamera", false]], "skrock (class in deepinv.sampling)": [[239, "deepinv.sampling.SKRock", false]], "slice_fname (deepinv.datasets.lidcidrislicedataset.slicesampleidentifier attribute)": [[20, "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier.slice_fname", false]], "slice_ind (deepinv.datasets.fastmrislicedataset.slicesamplefileidentifier attribute)": [[16, "deepinv.datasets.FastMRISliceDataset.SliceSampleFileIdentifier.slice_ind", false]], "smiteration (class in deepinv.optim.optim_iterators)": [[152, "deepinv.optim.optim_iterators.SMIteration", false]], "spacevaryingblur (class in deepinv.physics)": [[189, "deepinv.physics.SpaceVaryingBlur", false]], "spectralanglemapper (class in deepinv.loss.metric)": [[71, "deepinv.loss.metric.SpectralAngleMapper", false]], "split() (deepinv.loss.phase2phaseloss static method)": [[39, "deepinv.loss.Phase2PhaseLoss.split", false]], "split() (deepinv.loss.splittingloss static method)": [[43, "deepinv.loss.SplittingLoss.split", false]], "splittingloss (class in deepinv.loss)": [[43, "deepinv.loss.SplittingLoss", false]], "ssim (class in deepinv.loss.metric)": [[70, "deepinv.loss.metric.SSIM", false]], "stack (class in deepinv.physics)": [[233, "deepinv.physics.stack", false]], "stack() (deepinv.physics.linearphysics method)": [[172, "deepinv.physics.LinearPhysics.stack", false]], "stack() (deepinv.physics.physics method)": [[179, "deepinv.physics.Physics.stack", false]], "stackedlinearphysics (class in deepinv.physics)": [[190, "deepinv.physics.StackedLinearPhysics", false]], "stackedphysics (class in deepinv.physics)": [[191, "deepinv.physics.StackedPhysics", false]], "stackedphysicsdatafidelity (class in deepinv.optim)": [[139, "deepinv.optim.StackedPhysicsDataFidelity", false]], "stackedphysicsloss (class in deepinv.loss)": [[44, "deepinv.loss.StackedPhysicsLoss", false]], "step() (deepinv.physics.generator.basemaskgenerator method)": [[217, "deepinv.physics.generator.BaseMaskGenerator.step", false]], "step() (deepinv.physics.generator.bernoullisplittingmaskgenerator method)": [[218, "deepinv.physics.generator.BernoulliSplittingMaskGenerator.step", false]], "step() (deepinv.physics.generator.diffractionblurgenerator method)": [[219, "deepinv.physics.generator.DiffractionBlurGenerator.step", false]], "step() (deepinv.physics.generator.diffractionblurgenerator3d method)": [[220, "deepinv.physics.generator.DiffractionBlurGenerator3D.step", false]], "step() (deepinv.physics.generator.generatormixture method)": [[224, "deepinv.physics.generator.GeneratorMixture.step", false]], "step() (deepinv.physics.generator.motionblurgenerator method)": [[225, "deepinv.physics.generator.MotionBlurGenerator.step", false]], "step() (deepinv.physics.generator.physicsgenerator method)": [[227, "deepinv.physics.generator.PhysicsGenerator.step", false]], "step() (deepinv.physics.generator.productconvolutionblurgenerator method)": [[228, "deepinv.physics.generator.ProductConvolutionBlurGenerator.step", false]], "step() (deepinv.physics.generator.sigmagenerator method)": [[230, "deepinv.physics.generator.SigmaGenerator.step", false]], "step() (deepinv.trainer method)": [[12, "deepinv.Trainer.step", false]], "steplossscheduler (class in deepinv.loss)": [[45, "deepinv.loss.StepLossScheduler", false]], "structuredrandom (class in deepinv.physics)": [[192, "deepinv.physics.StructuredRandom", false]], "structuredrandomphaseretrieval (class in deepinv.physics)": [[193, "deepinv.physics.StructuredRandomPhaseRetrieval", false]], "sum() (deepinv.utils.tensorlist method)": [[260, "deepinv.utils.TensorList.sum", false]], "supadversarialdiscriminatorloss (class in deepinv.loss.adversarial)": [[54, "deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss", false]], "supadversarialgeneratorloss (class in deepinv.loss.adversarial)": [[55, "deepinv.loss.adversarial.SupAdversarialGeneratorLoss", false]], "suploss (class in deepinv.loss)": [[46, "deepinv.loss.SupLoss", false]], "suregaussianloss (class in deepinv.loss)": [[47, "deepinv.loss.SureGaussianLoss", false]], "surepgloss (class in deepinv.loss)": [[48, "deepinv.loss.SurePGLoss", false]], "surepoissonloss (class in deepinv.loss)": [[49, "deepinv.loss.SurePoissonLoss", false]], "swinir (class in deepinv.models)": [[97, "deepinv.models.SwinIR", false]], "symmetrize() (deepinv.transform.transform method)": [[251, "deepinv.transform.Transform.symmetrize", false]], "tensorlist (class in deepinv.utils)": [[260, "deepinv.utils.TensorList", false]], "test (class in deepinv)": [[241, "deepinv.test", false]], "test() (deepinv.trainer method)": [[12, "deepinv.Trainer.test", false]], "tgvdenoiser (class in deepinv.models)": [[98, "deepinv.models.TGVDenoiser", false]], "threshold_3d() (deepinv.models.waveletdenoiser method)": [[103, "deepinv.models.WaveletDenoiser.threshold_3D", false]], "threshold_nd() (deepinv.models.waveletdenoiser method)": [[103, "deepinv.models.WaveletDenoiser.threshold_ND", false]], "thresold_2d() (deepinv.models.waveletdenoiser method)": [[103, "deepinv.models.WaveletDenoiser.thresold_2D", false]], "thresold_func() (deepinv.models.waveletdenoiser method)": [[103, "deepinv.models.WaveletDenoiser.thresold_func", false]], "tikhonov (class in deepinv.optim)": [[141, "deepinv.optim.Tikhonov", false]], "timeagnosticnet (class in deepinv.models)": [[100, "deepinv.models.TimeAgnosticNet", false]], "timeaveragingnet (class in deepinv.models)": [[101, "deepinv.models.TimeAveragingNet", false]], "timemixin (class in deepinv.physics)": [[194, "deepinv.physics.TimeMixin", false]], "to() (deepinv.utils.tensorlist method)": [[260, "deepinv.utils.TensorList.to", false]], "to_complex_denoiser (class in deepinv.models.complex)": [[105, "deepinv.models.complex.to_complex_denoiser", false]], "to_static() (deepinv.physics.dynamicmri method)": [[166, "deepinv.physics.DynamicMRI.to_static", false]], "to_torch_complex() (deepinv.physics.mrimixin static method)": [[175, "deepinv.physics.MRIMixin.to_torch_complex", false]], "tomography (class in deepinv.physics)": [[195, "deepinv.physics.Tomography", false]], "train (class in deepinv)": [[242, "deepinv.train", false]], "train() (deepinv.trainer method)": [[12, "deepinv.Trainer.train", false]], "trainer (class in deepinv)": [[12, "deepinv.Trainer", false]], "transform (class in deepinv.transform)": [[251, "deepinv.transform.Transform", false]], "transform() (deepinv.transform.transform method)": [[251, "deepinv.transform.Transform.transform", false]], "tvdenoiser (class in deepinv.models)": [[99, "deepinv.models.TVDenoiser", false]], "tvloss (class in deepinv.loss)": [[50, "deepinv.loss.TVLoss", false]], "tvprior (class in deepinv.optim)": [[140, "deepinv.optim.TVPrior", false]], "type() (deepinv.utils.tensorlist method)": [[260, "deepinv.utils.TensorList.type", false]], "uairgeneratorloss (class in deepinv.loss.adversarial)": [[56, "deepinv.loss.adversarial.UAIRGeneratorLoss", false]], "ula (class in deepinv.sampling)": [[240, "deepinv.sampling.ULA", false]], "unet (class in deepinv.models)": [[102, "deepinv.models.UNet", false]], "unflatten() (deepinv.physics.timemixin static method)": [[194, "deepinv.physics.TimeMixin.unflatten", false]], "unfolded_builder() (in module deepinv.unfolded)": [[259, "deepinv.unfolded.unfolded_builder", false]], "uniformgaussiannoise (class in deepinv.physics)": [[196, "deepinv.physics.UniformGaussianNoise", false]], "uniformnoise (class in deepinv.physics)": [[197, "deepinv.physics.UniformNoise", false]], "unsupadversarialdiscriminatorloss (class in deepinv.loss.adversarial)": [[57, "deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss", false]], "unsupadversarialgeneratorloss (class in deepinv.loss.adversarial)": [[58, "deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss", false]], "update() (deepinv.physics.physics method)": [[179, "deepinv.physics.Physics.update", false]], "update_parameters() (deepinv.physics.blur method)": [[158, "deepinv.physics.Blur.update_parameters", false]], "update_parameters() (deepinv.physics.blurfft method)": [[159, "deepinv.physics.BlurFFT.update_parameters", false]], "update_parameters() (deepinv.physics.decomposablephysics method)": [[162, "deepinv.physics.DecomposablePhysics.update_parameters", false]], "update_parameters() (deepinv.physics.gammanoise method)": [[167, "deepinv.physics.GammaNoise.update_parameters", false]], "update_parameters() (deepinv.physics.gaussiannoise method)": [[168, "deepinv.physics.GaussianNoise.update_parameters", false]], "update_parameters() (deepinv.physics.hyperspectralunmixing method)": [[170, "deepinv.physics.HyperSpectralUnmixing.update_parameters", false]], "update_parameters() (deepinv.physics.logpoissonnoise method)": [[173, "deepinv.physics.LogPoissonNoise.update_parameters", false]], "update_parameters() (deepinv.physics.mri method)": [[174, "deepinv.physics.MRI.update_parameters", false]], "update_parameters() (deepinv.physics.multicoilmri method)": [[176, "deepinv.physics.MultiCoilMRI.update_parameters", false]], "update_parameters() (deepinv.physics.poissongaussiannoise method)": [[180, "deepinv.physics.PoissonGaussianNoise.update_parameters", false]], "update_parameters() (deepinv.physics.poissonnoise method)": [[181, "deepinv.physics.PoissonNoise.update_parameters", false]], "update_parameters() (deepinv.physics.spacevaryingblur method)": [[189, "deepinv.physics.SpaceVaryingBlur.update_parameters", false]], "update_parameters() (deepinv.physics.uniformnoise method)": [[197, "deepinv.physics.UniformNoise.update_parameters", false]], "urban100hr (class in deepinv.datasets)": [[25, "deepinv.datasets.Urban100HR", false]], "var_has_converged() (deepinv.sampling.montecarlo method)": [[238, "deepinv.sampling.MonteCarlo.var_has_converged", false]], "verify_split_dataset_integrity() (deepinv.datasets.div2k method)": [[14, "deepinv.datasets.DIV2K.verify_split_dataset_integrity", false]], "verify_split_dataset_integrity() (deepinv.datasets.lsdirhr method)": [[21, "deepinv.datasets.LsdirHR.verify_split_dataset_integrity", false]], "waveletdenoiser (class in deepinv.models)": [[103, "deepinv.models.WaveletDenoiser", false]], "waveletdictdenoiser (class in deepinv.models)": [[104, "deepinv.models.WaveletDictDenoiser", false]], "waveletprior (class in deepinv.optim)": [[142, "deepinv.optim.WaveletPrior", false]], "wrap_flatten_c() (deepinv.physics.timemixin static method)": [[194, "deepinv.physics.TimeMixin.wrap_flatten_C", false]], "zeros_like (class in deepinv.utils)": [[275, "deepinv.utils.zeros_like", false]]}, "objects": {"deepinv": [[12, 0, 1, "", "Trainer"], [241, 0, 1, "", "test"], [242, 0, 1, "", "train"]], "deepinv.Trainer": [[12, 1, 1, "", "check_clip_grad"], [12, 1, 1, "", "compute_loss"], [12, 1, 1, "", "compute_metrics"], [12, 1, 1, "", "get_samples"], [12, 1, 1, "", "get_samples_offline"], [12, 1, 1, "", "get_samples_online"], [12, 1, 1, "", "log_metrics_wandb"], [12, 1, 1, "", "model_inference"], [12, 1, 1, "", "no_learning_inference"], [12, 1, 1, "", "plot"], [12, 1, 1, "", "reset_metrics"], [12, 1, 1, "", "save_model"], [12, 1, 1, "", "setup_train"], [12, 1, 1, "", "step"], [12, 1, 1, "", "test"], [12, 1, 1, "", "train"]], "deepinv.datasets": [[13, 0, 1, "", "CBSD68"], [14, 0, 1, "", "DIV2K"], [15, 0, 1, "", "FMD"], [16, 0, 1, "", "FastMRISliceDataset"], [17, 0, 1, "", "Flickr2kHR"], [18, 0, 1, "", "HDF5Dataset"], [19, 0, 1, "", "Kohler"], [20, 0, 1, "", "LidcIdriSliceDataset"], [21, 0, 1, "", "LsdirHR"], [22, 0, 1, "", "NBUDataset"], [23, 0, 1, "", "PatchDataset"], [24, 0, 1, "", "Set14HR"], [25, 0, 1, "", "Urban100HR"], [26, 0, 1, "", "generate_dataset"]], "deepinv.datasets.CBSD68": [[13, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.DIV2K": [[14, 1, 1, "", "verify_split_dataset_integrity"]], "deepinv.datasets.FMD": [[15, 0, 1, "", "NoisySampleIdentifier"]], "deepinv.datasets.FMD.NoisySampleIdentifier": [[15, 2, 1, "", "fname"], [15, 2, 1, "", "fov"], [15, 2, 1, "", "img_type"], [15, 2, 1, "", "noise_dirname"]], "deepinv.datasets.FastMRISliceDataset": [[16, 0, 1, "", "SliceSampleFileIdentifier"]], "deepinv.datasets.FastMRISliceDataset.SliceSampleFileIdentifier": [[16, 2, 1, "", "fname"], [16, 2, 1, "", "slice_ind"]], "deepinv.datasets.Flickr2kHR": [[17, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.Kohler": [[19, 1, 1, "", "download"], [19, 1, 1, "", "get_item"]], "deepinv.datasets.LidcIdriSliceDataset": [[20, 0, 1, "", "SliceSampleIdentifier"]], "deepinv.datasets.LidcIdriSliceDataset.SliceSampleIdentifier": [[20, 2, 1, "", "patient_id"], [20, 2, 1, "", "scan_folder"], [20, 2, 1, "", "slice_fname"]], "deepinv.datasets.LsdirHR": [[21, 1, 1, "", "verify_split_dataset_integrity"]], "deepinv.datasets.NBUDataset": [[22, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.Set14HR": [[24, 1, 1, "", "check_dataset_exists"]], "deepinv.datasets.Urban100HR": [[25, 1, 1, "", "check_dataset_exists"]], "deepinv.loss": [[27, 0, 1, "", "Artifact2ArtifactLoss"], [28, 0, 1, "", "BaseLossScheduler"], [29, 0, 1, "", "EILoss"], [30, 0, 1, "", "FNEJacobianSpectralNorm"], [31, 0, 1, "", "InterleavedEpochLossScheduler"], [32, 0, 1, "", "InterleavedLossScheduler"], [33, 0, 1, "", "JacobianSpectralNorm"], [34, 0, 1, "", "Loss"], [35, 0, 1, "", "MCLoss"], [36, 0, 1, "", "MOEILoss"], [37, 0, 1, "", "MOILoss"], [38, 0, 1, "", "Neighbor2Neighbor"], [39, 0, 1, "", "Phase2PhaseLoss"], [40, 0, 1, "", "R2RLoss"], [41, 0, 1, "", "RandomLossScheduler"], [42, 0, 1, "", "ScoreLoss"], [43, 0, 1, "", "SplittingLoss"], [44, 0, 1, "", "StackedPhysicsLoss"], [45, 0, 1, "", "StepLossScheduler"], [46, 0, 1, "", "SupLoss"], [47, 0, 1, "", "SureGaussianLoss"], [48, 0, 1, "", "SurePGLoss"], [49, 0, 1, "", "SurePoissonLoss"], [50, 0, 1, "", "TVLoss"]], "deepinv.loss.Artifact2ArtifactLoss": [[27, 1, 1, "", "forward"]], "deepinv.loss.BaseLossScheduler": [[28, 1, 1, "", "adapt_model"], [28, 1, 1, "", "forward"], [28, 1, 1, "", "schedule"]], "deepinv.loss.EILoss": [[29, 1, 1, "", "forward"]], "deepinv.loss.FNEJacobianSpectralNorm": [[30, 1, 1, "", "forward"]], "deepinv.loss.InterleavedEpochLossScheduler": [[31, 1, 1, "", "schedule"]], "deepinv.loss.InterleavedLossScheduler": [[32, 1, 1, "", "schedule"]], "deepinv.loss.JacobianSpectralNorm": [[33, 1, 1, "", "forward"]], "deepinv.loss.Loss": [[34, 1, 1, "", "adapt_model"], [34, 1, 1, "", "forward"]], "deepinv.loss.MCLoss": [[35, 1, 1, "", "forward"]], "deepinv.loss.MOEILoss": [[36, 1, 1, "", "forward"]], "deepinv.loss.MOILoss": [[37, 1, 1, "", "forward"], [37, 1, 1, "", "next_physics"]], "deepinv.loss.Neighbor2Neighbor": [[38, 1, 1, "", "forward"]], "deepinv.loss.Phase2PhaseLoss": [[39, 1, 1, "", "adapt_model"], [39, 1, 1, "", "split"]], "deepinv.loss.R2RLoss": [[40, 1, 1, "", "adapt_model"], [40, 1, 1, "", "forward"]], "deepinv.loss.RandomLossScheduler": [[41, 1, 1, "", "schedule"]], "deepinv.loss.ScoreLoss": [[42, 1, 1, "", "adapt_model"], [42, 1, 1, "", "forward"]], "deepinv.loss.SplittingLoss": [[43, 1, 1, "", "adapt_model"], [43, 1, 1, "", "forward"], [43, 1, 1, "", "split"]], "deepinv.loss.StackedPhysicsLoss": [[44, 1, 1, "", "forward"]], "deepinv.loss.StepLossScheduler": [[45, 1, 1, "", "schedule"]], "deepinv.loss.SupLoss": [[46, 1, 1, "", "forward"]], "deepinv.loss.SureGaussianLoss": [[47, 1, 1, "", "forward"]], "deepinv.loss.SurePGLoss": [[48, 1, 1, "", "forward"]], "deepinv.loss.SurePoissonLoss": [[49, 1, 1, "", "forward"]], "deepinv.loss.TVLoss": [[50, 1, 1, "", "forward"]], "deepinv.loss.adversarial": [[51, 0, 1, "", "DiscriminatorLoss"], [52, 0, 1, "", "DiscriminatorMetric"], [53, 0, 1, "", "GeneratorLoss"], [54, 0, 1, "", "SupAdversarialDiscriminatorLoss"], [55, 0, 1, "", "SupAdversarialGeneratorLoss"], [56, 0, 1, "", "UAIRGeneratorLoss"], [57, 0, 1, "", "UnsupAdversarialDiscriminatorLoss"], [58, 0, 1, "", "UnsupAdversarialGeneratorLoss"]], "deepinv.loss.adversarial.DiscriminatorLoss": [[51, 1, 1, "", "adversarial_loss"], [51, 1, 1, "", "forward"]], "deepinv.loss.adversarial.GeneratorLoss": [[53, 1, 1, "", "adversarial_loss"], [53, 1, 1, "", "forward"]], "deepinv.loss.adversarial.SupAdversarialDiscriminatorLoss": [[54, 1, 1, "", "forward"]], "deepinv.loss.adversarial.SupAdversarialGeneratorLoss": [[55, 1, 1, "", "forward"]], "deepinv.loss.adversarial.UAIRGeneratorLoss": [[56, 1, 1, "", "forward"]], "deepinv.loss.adversarial.UnsupAdversarialDiscriminatorLoss": [[57, 1, 1, "", "forward"]], "deepinv.loss.adversarial.UnsupAdversarialGeneratorLoss": [[58, 1, 1, "", "forward"]], "deepinv.loss.metric": [[59, 0, 1, "", "ERGAS"], [60, 0, 1, "", "L1L2"], [61, 0, 1, "", "LPIPS"], [62, 0, 1, "", "LpNorm"], [63, 0, 1, "", "MAE"], [64, 0, 1, "", "MSE"], [65, 0, 1, "", "Metric"], [66, 0, 1, "", "NIQE"], [67, 0, 1, "", "NMSE"], [68, 0, 1, "", "PSNR"], [69, 0, 1, "", "QNR"], [70, 0, 1, "", "SSIM"], [71, 0, 1, "", "SpectralAngleMapper"]], "deepinv.loss.metric.L1L2": [[60, 1, 1, "", "metric"]], "deepinv.loss.metric.LPIPS": [[61, 1, 1, "", "metric"]], "deepinv.loss.metric.LpNorm": [[62, 1, 1, "", "metric"]], "deepinv.loss.metric.MAE": [[63, 1, 1, "", "metric"]], "deepinv.loss.metric.MSE": [[64, 1, 1, "", "metric"]], "deepinv.loss.metric.Metric": [[65, 1, 1, "", "forward"], [65, 1, 1, "", "invert_metric"], [65, 1, 1, "", "metric"]], "deepinv.loss.metric.NIQE": [[66, 1, 1, "", "metric"]], "deepinv.loss.metric.NMSE": [[67, 1, 1, "", "metric"]], "deepinv.loss.metric.PSNR": [[68, 1, 1, "", "metric"]], "deepinv.loss.metric.QNR": [[69, 1, 1, "", "D_lambda"], [69, 1, 1, "", "D_s"], [69, 1, 1, "", "invert_metric"], [69, 1, 1, "", "metric"]], "deepinv.loss.metric.SSIM": [[70, 1, 1, "", "invert_metric"], [70, 1, 1, "", "metric"]], "deepinv.loss.metric.SpectralAngleMapper": [[71, 1, 1, "", "metric"]], "deepinv.models": [[72, 0, 1, "", "ArtifactRemoval"], [73, 0, 1, "", "AutoEncoder"], [74, 0, 1, "", "BM3D"], [75, 0, 1, "", "CSGMGenerator"], [76, 0, 1, "", "ConvDecoder"], [77, 0, 1, "", "DCGANDiscriminator"], [78, 0, 1, "", "DCGANGenerator"], [79, 0, 1, "", "DRUNet"], [80, 0, 1, "", "DeepImagePrior"], [81, 0, 1, "", "Denoiser"], [82, 0, 1, "", "DiffUNet"], [83, 0, 1, "", "DnCNN"], [84, 0, 1, "", "EPLLDenoiser"], [85, 0, 1, "", "ESRGANDiscriminator"], [86, 0, 1, "", "EquivariantDenoiser"], [87, 0, 1, "", "GSDRUNet"], [88, 0, 1, "", "ICNN"], [89, 0, 1, "", "MedianFilter"], [90, 0, 1, "", "PDNet_DualBlock"], [91, 0, 1, "", "PDNet_PrimalBlock"], [92, 0, 1, "", "PanNet"], [93, 0, 1, "", "PatchGANDiscriminator"], [94, 0, 1, "", "Reconstructor"], [95, 0, 1, "", "Restormer"], [96, 0, 1, "", "SCUNet"], [97, 0, 1, "", "SwinIR"], [98, 0, 1, "", "TGVDenoiser"], [99, 0, 1, "", "TVDenoiser"], [100, 0, 1, "", "TimeAgnosticNet"], [101, 0, 1, "", "TimeAveragingNet"], [102, 0, 1, "", "UNet"], [103, 0, 1, "", "WaveletDenoiser"], [104, 0, 1, "", "WaveletDictDenoiser"]], "deepinv.models.ArtifactRemoval": [[72, 1, 1, "", "forward"]], "deepinv.models.AutoEncoder": [[73, 1, 1, "", "forward"]], "deepinv.models.BM3D": [[74, 1, 1, "", "forward"]], "deepinv.models.CSGMGenerator": [[75, 1, 1, "", "forward"], [75, 1, 1, "", "optimize_z"], [75, 1, 1, "", "random_latent"]], "deepinv.models.ConvDecoder": [[76, 1, 1, "", "forward"]], "deepinv.models.DCGANDiscriminator": [[77, 1, 1, "", "forward"]], "deepinv.models.DCGANGenerator": [[78, 1, 1, "", "forward"]], "deepinv.models.DRUNet": [[79, 1, 1, "", "forward"]], "deepinv.models.DeepImagePrior": [[80, 1, 1, "", "forward"]], "deepinv.models.Denoiser": [[81, 1, 1, "", "forward"]], "deepinv.models.DiffUNet": [[82, 1, 1, "", "convert_to_fp16"], [82, 1, 1, "", "convert_to_fp32"], [82, 1, 1, "", "find_nearest"], [82, 1, 1, "", "forward"], [82, 1, 1, "", "forward_denoise"], [82, 1, 1, "", "forward_diffusion"], [82, 1, 1, "", "get_alpha_prod"]], "deepinv.models.DnCNN": [[83, 1, 1, "", "forward"]], "deepinv.models.EPLLDenoiser": [[84, 1, 1, "", "forward"]], "deepinv.models.ESRGANDiscriminator": [[85, 1, 1, "", "forward"]], "deepinv.models.EquivariantDenoiser": [[86, 1, 1, "", "forward"]], "deepinv.models.ICNN": [[88, 1, 1, "", "forward"]], "deepinv.models.MedianFilter": [[89, 1, 1, "", "forward"]], "deepinv.models.PDNet_DualBlock": [[90, 1, 1, "", "forward"]], "deepinv.models.PDNet_PrimalBlock": [[91, 1, 1, "", "forward"]], "deepinv.models.PanNet": [[92, 1, 1, "", "create_sampler"], [92, 1, 1, "", "forward"]], "deepinv.models.PatchGANDiscriminator": [[93, 1, 1, "", "forward"]], "deepinv.models.Reconstructor": [[94, 1, 1, "", "forward"]], "deepinv.models.Restormer": [[95, 1, 1, "", "forward"], [95, 1, 1, "", "forward_restormer"], [95, 1, 1, "", "is_standard_deblurring_network"], [95, 1, 1, "", "is_standard_denoising_network"], [95, 1, 1, "", "is_standard_deraining_network"]], "deepinv.models.SCUNet": [[96, 1, 1, "", "forward"]], "deepinv.models.SwinIR": [[97, 1, 1, "", "forward"]], "deepinv.models.TGVDenoiser": [[98, 1, 1, "", "epsilon"], [98, 1, 1, "", "epsilon_adjoint"], [98, 1, 1, "", "forward"], [98, 1, 1, "", "nabla"], [98, 1, 1, "", "nabla_adjoint"]], "deepinv.models.TVDenoiser": [[99, 1, 1, "", "forward"], [99, 1, 1, "", "nabla"], [99, 1, 1, "", "nabla_adjoint"], [99, 1, 1, "", "prox_tau_fx"]], "deepinv.models.TimeAgnosticNet": [[100, 1, 1, "", "forward"]], "deepinv.models.TimeAveragingNet": [[101, 1, 1, "", "forward"]], "deepinv.models.UNet": [[102, 1, 1, "", "forward"]], "deepinv.models.WaveletDenoiser": [[103, 1, 1, "", "crop_output"], [103, 1, 1, "", "dwt"], [103, 1, 1, "", "flatten_coeffs"], [103, 1, 1, "", "forward"], [103, 1, 1, "", "hard_threshold_topk"], [103, 1, 1, "", "iwt"], [103, 1, 1, "", "pad_input"], [103, 1, 1, "", "prox_l0"], [103, 1, 1, "", "prox_l1"], [103, 1, 1, "", "psi"], [103, 1, 1, "", "reshape_ths"], [103, 1, 1, "", "threshold_3D"], [103, 1, 1, "", "threshold_ND"], [103, 1, 1, "", "thresold_2D"], [103, 1, 1, "", "thresold_func"]], "deepinv.models.WaveletDictDenoiser": [[104, 1, 1, "", "forward"], [104, 1, 1, "", "psi"]], "deepinv.models.complex": [[105, 0, 1, "", "to_complex_denoiser"]], "deepinv.optim": [[106, 0, 1, "", "AmplitudeLoss"], [107, 0, 1, "", "AmplitudeLossDistance"], [108, 3, 1, "", "BaseOptim"], [109, 0, 1, "", "Bregman"], [110, 0, 1, "", "BregmanL2"], [111, 0, 1, "", "Bregman_ICNN"], [112, 0, 1, "", "BurgEntropy"], [113, 0, 1, "", "DPIR"], [114, 0, 1, "", "DataFidelity"], [115, 0, 1, "", "Distance"], [116, 0, 1, "", "EPLL"], [117, 0, 1, "", "FixedPoint"], [118, 0, 1, "", "IndicatorL2"], [119, 0, 1, "", "IndicatorL2Distance"], [120, 0, 1, "", "L1"], [121, 0, 1, "", "L12Prior"], [122, 0, 1, "", "L1Distance"], [123, 0, 1, "", "L1Prior"], [124, 0, 1, "", "L2"], [125, 0, 1, "", "L2Distance"], [126, 0, 1, "", "LogPoissonLikelihood"], [127, 0, 1, "", "LogPoissonLikelihoodDistance"], [128, 0, 1, "", "NegEntropy"], [129, 0, 1, "", "OptimIterator"], [130, 0, 1, "", "PatchNR"], [131, 0, 1, "", "PatchPrior"], [132, 0, 1, "", "PnP"], [133, 0, 1, "", "PoissonLikelihood"], [134, 0, 1, "", "PoissonLikelihoodDistance"], [135, 0, 1, "", "Potential"], [136, 0, 1, "", "Prior"], [137, 0, 1, "", "RED"], [138, 0, 1, "", "ScorePrior"], [139, 0, 1, "", "StackedPhysicsDataFidelity"], [140, 0, 1, "", "TVPrior"], [141, 0, 1, "", "Tikhonov"], [142, 0, 1, "", "WaveletPrior"], [143, 3, 1, "", "optim_builder"]], "deepinv.optim.AmplitudeLossDistance": [[107, 1, 1, "", "fn"], [107, 1, 1, "", "grad"]], "deepinv.optim.Bregman": [[109, 1, 1, "", "MD_step"], [109, 1, 1, "", "div"]], "deepinv.optim.BregmanL2": [[110, 1, 1, "", "conjugate"], [110, 1, 1, "", "div"], [110, 1, 1, "", "fn"], [110, 1, 1, "", "grad"], [110, 1, 1, "", "grad_conj"]], "deepinv.optim.Bregman_ICNN": [[111, 1, 1, "", "conjugate"], [111, 1, 1, "", "fn"]], "deepinv.optim.BurgEntropy": [[112, 1, 1, "", "conjugate"], [112, 1, 1, "", "fn"], [112, 1, 1, "", "grad"], [112, 1, 1, "", "grad_conj"]], "deepinv.optim.DataFidelity": [[114, 1, 1, "", "fn"], [114, 1, 1, "", "grad"], [114, 1, 1, "", "grad_d"], [114, 1, 1, "", "prox_d"], [114, 1, 1, "", "prox_d_conjugate"]], "deepinv.optim.Distance": [[115, 1, 1, "", "fn"], [115, 1, 1, "", "forward"]], "deepinv.optim.EPLL": [[116, 1, 1, "", "forward"], [116, 1, 1, "", "negative_log_likelihood"]], "deepinv.optim.FixedPoint": [[117, 1, 1, "", "anderson_acceleration_step"], [117, 1, 1, "", "forward"], [117, 1, 1, "", "init_anderson_acceleration"]], "deepinv.optim.IndicatorL2": [[118, 1, 1, "", "prox"]], "deepinv.optim.IndicatorL2Distance": [[119, 1, 1, "", "fn"], [119, 1, 1, "", "prox"]], "deepinv.optim.L1": [[120, 1, 1, "", "prox"]], "deepinv.optim.L12Prior": [[121, 1, 1, "", "fn"], [121, 1, 1, "", "prox"]], "deepinv.optim.L1Distance": [[122, 1, 1, "", "fn"], [122, 1, 1, "", "grad"], [122, 1, 1, "", "prox"]], "deepinv.optim.L1Prior": [[123, 1, 1, "", "fn"], [123, 1, 1, "", "prox"]], "deepinv.optim.L2": [[124, 1, 1, "", "prox"]], "deepinv.optim.L2Distance": [[125, 1, 1, "", "fn"], [125, 1, 1, "", "grad"], [125, 1, 1, "", "prox"]], "deepinv.optim.LogPoissonLikelihoodDistance": [[127, 1, 1, "", "fn"]], "deepinv.optim.NegEntropy": [[128, 1, 1, "", "conjugate"], [128, 1, 1, "", "fn"], [128, 1, 1, "", "grad"], [128, 1, 1, "", "grad_conj"]], "deepinv.optim.OptimIterator": [[129, 1, 1, "", "forward"], [129, 1, 1, "", "relaxation_step"]], "deepinv.optim.PatchNR": [[130, 1, 1, "", "fn"]], "deepinv.optim.PatchPrior": [[131, 1, 1, "", "fn"]], "deepinv.optim.PnP": [[132, 1, 1, "", "prox"]], "deepinv.optim.PoissonLikelihoodDistance": [[134, 1, 1, "", "fn"], [134, 1, 1, "", "grad"], [134, 1, 1, "", "prox"]], "deepinv.optim.Potential": [[135, 1, 1, "", "bregman_prox"], [135, 1, 1, "", "conjugate"], [135, 1, 1, "", "fn"], [135, 1, 1, "", "forward"], [135, 1, 1, "", "grad"], [135, 1, 1, "", "grad_conj"], [135, 1, 1, "", "prox"], [135, 1, 1, "", "prox_conjugate"]], "deepinv.optim.RED": [[137, 1, 1, "", "grad"]], "deepinv.optim.ScorePrior": [[138, 1, 1, "", "grad"]], "deepinv.optim.StackedPhysicsDataFidelity": [[139, 1, 1, "", "fn"], [139, 1, 1, "", "grad"], [139, 1, 1, "", "grad_d"], [139, 1, 1, "", "prox_d"], [139, 1, 1, "", "prox_d_conjugate"]], "deepinv.optim.TVPrior": [[140, 1, 1, "", "fn"], [140, 1, 1, "", "nabla"], [140, 1, 1, "", "nabla_adjoint"], [140, 1, 1, "", "prox"]], "deepinv.optim.Tikhonov": [[141, 1, 1, "", "fn"], [141, 1, 1, "", "grad"], [141, 1, 1, "", "prox"]], "deepinv.optim.WaveletPrior": [[142, 1, 1, "", "fn"], [142, 1, 1, "", "prox"], [142, 1, 1, "", "psi"]], "deepinv.optim.optim_iterators": [[144, 0, 1, "", "ADMMIteration"], [145, 0, 1, "", "CPIteration"], [146, 0, 1, "", "DRSIteration"], [147, 0, 1, "", "FISTAIteration"], [148, 0, 1, "", "GDIteration"], [149, 0, 1, "", "HQSIteration"], [150, 0, 1, "", "MDIteration"], [151, 0, 1, "", "PGDIteration"], [152, 0, 1, "", "SMIteration"], [153, 0, 1, "", "fStep"], [154, 0, 1, "", "gStep"]], "deepinv.optim.optim_iterators.ADMMIteration": [[144, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.CPIteration": [[145, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.DRSIteration": [[146, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.FISTAIteration": [[147, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.GDIteration": [[148, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.MDIteration": [[150, 1, 1, "", "forward"]], "deepinv.optim.optim_iterators.SMIteration": [[152, 1, 1, "", "forward"]], "deepinv.optim.utils": [[155, 0, 1, "", "GaussianMixtureModel"], [156, 0, 1, "", "conjugate_gradient"], [157, 0, 1, "", "gradient_descent"]], "deepinv.optim.utils.GaussianMixtureModel": [[155, 1, 1, "", "classify"], [155, 1, 1, "", "component_log_likelihoods"], [155, 1, 1, "", "fit"], [155, 1, 1, "", "forward"], [155, 1, 1, "", "get_cov"], [155, 1, 1, "", "get_cov_inv_reg"], [155, 1, 1, "", "get_weights"], [155, 1, 1, "", "load_state_dict"], [155, 1, 1, "", "set_cov"], [155, 1, 1, "", "set_cov_reg"], [155, 1, 1, "", "set_weights"]], "deepinv.physics": [[158, 0, 1, "", "Blur"], [159, 0, 1, "", "BlurFFT"], [160, 0, 1, "", "CompressedSensing"], [161, 0, 1, "", "Decolorize"], [162, 0, 1, "", "DecomposablePhysics"], [163, 0, 1, "", "Demosaicing"], [164, 0, 1, "", "Denoising"], [165, 0, 1, "", "Downsampling"], [166, 0, 1, "", "DynamicMRI"], [167, 0, 1, "", "GammaNoise"], [168, 0, 1, "", "GaussianNoise"], [169, 0, 1, "", "Haze"], [170, 0, 1, "", "HyperSpectralUnmixing"], [171, 0, 1, "", "Inpainting"], [172, 0, 1, "", "LinearPhysics"], [173, 0, 1, "", "LogPoissonNoise"], [174, 0, 1, "", "MRI"], [175, 0, 1, "", "MRIMixin"], [176, 0, 1, "", "MultiCoilMRI"], [177, 0, 1, "", "Pansharpen"], [178, 0, 1, "", "PhaseRetrieval"], [179, 0, 1, "", "Physics"], [180, 0, 1, "", "PoissonGaussianNoise"], [181, 0, 1, "", "PoissonNoise"], [182, 0, 1, "", "Ptychography"], [183, 0, 1, "", "PtychographyLinearOperator"], [184, 0, 1, "", "RadioInterferometry"], [185, 0, 1, "", "RandomPhaseRetrieval"], [186, 0, 1, "", "SequentialMRI"], [187, 0, 1, "", "SinglePhotonLidar"], [188, 0, 1, "", "SinglePixelCamera"], [189, 0, 1, "", "SpaceVaryingBlur"], [190, 0, 1, "", "StackedLinearPhysics"], [191, 0, 1, "", "StackedPhysics"], [192, 0, 1, "", "StructuredRandom"], [193, 0, 1, "", "StructuredRandomPhaseRetrieval"], [194, 0, 1, "", "TimeMixin"], [195, 0, 1, "", "Tomography"], [196, 0, 1, "", "UniformGaussianNoise"], [197, 0, 1, "", "UniformNoise"], [198, 0, 1, "", "adjoint_function"], [233, 0, 1, "", "stack"]], "deepinv.physics.Blur": [[158, 1, 1, "", "A"], [158, 1, 1, "", "A_adjoint"], [158, 1, 1, "", "update_parameters"]], "deepinv.physics.BlurFFT": [[159, 1, 1, "", "A"], [159, 1, 1, "", "A_adjoint"], [159, 1, 1, "", "update_parameters"]], "deepinv.physics.CompressedSensing": [[160, 1, 1, "", "A"], [160, 1, 1, "", "A_adjoint"], [160, 1, 1, "", "A_dagger"]], "deepinv.physics.DecomposablePhysics": [[162, 1, 1, "", "A"], [162, 1, 1, "", "A_A_adjoint"], [162, 1, 1, "", "A_adjoint"], [162, 1, 1, "", "A_adjoint_A"], [162, 1, 1, "", "A_dagger"], [162, 1, 1, "", "prox_l2"], [162, 1, 1, "", "update_parameters"]], "deepinv.physics.Downsampling": [[165, 1, 1, "", "A"], [165, 1, 1, "", "A_adjoint"], [165, 1, 1, "", "prox_l2"]], "deepinv.physics.DynamicMRI": [[166, 1, 1, "", "A"], [166, 1, 1, "", "A_adjoint"], [166, 1, 1, "", "A_dagger"], [166, 1, 1, "", "check_mask"], [166, 1, 1, "", "noise"], [166, 1, 1, "", "to_static"]], "deepinv.physics.GammaNoise": [[167, 1, 1, "", "forward"], [167, 1, 1, "", "update_parameters"]], "deepinv.physics.GaussianNoise": [[168, 1, 1, "", "forward"], [168, 1, 1, "", "update_parameters"]], "deepinv.physics.Haze": [[169, 1, 1, "", "A"], [169, 1, 1, "", "A_dagger"]], "deepinv.physics.HyperSpectralUnmixing": [[170, 1, 1, "", "A"], [170, 1, 1, "", "A_adjoint"], [170, 1, 1, "", "A_dagger"], [170, 1, 1, "", "update_parameters"]], "deepinv.physics.Inpainting": [[171, 1, 1, "", "__mul__"], [171, 1, 1, "", "noise"]], "deepinv.physics.LinearPhysics": [[172, 1, 1, "", "A_A_adjoint"], [172, 1, 1, "", "A_adjoint"], [172, 1, 1, "", "A_adjoint_A"], [172, 1, 1, "", "A_dagger"], [172, 1, 1, "", "A_vjp"], [172, 1, 1, "", "__mul__"], [172, 1, 1, "", "adjointness_test"], [172, 1, 1, "", "compute_norm"], [172, 1, 1, "", "prox_l2"], [172, 1, 1, "", "stack"]], "deepinv.physics.LogPoissonNoise": [[173, 1, 1, "", "forward"], [173, 1, 1, "", "update_parameters"]], "deepinv.physics.MRI": [[174, 1, 1, "", "update_parameters"]], "deepinv.physics.MRIMixin": [[175, 1, 1, "", "check_mask"], [175, 1, 1, "", "fft"], [175, 1, 1, "", "from_torch_complex"], [175, 1, 1, "", "ifft"], [175, 1, 1, "", "to_torch_complex"]], "deepinv.physics.MultiCoilMRI": [[176, 1, 1, "", "A"], [176, 1, 1, "", "A_adjoint"], [176, 1, 1, "", "simulate_birdcage_csm"], [176, 1, 1, "", "update_parameters"]], "deepinv.physics.Pansharpen": [[177, 1, 1, "", "A_dagger"]], "deepinv.physics.PhaseRetrieval": [[178, 1, 1, "", "A"], [178, 1, 1, "", "A_dagger"], [178, 1, 1, "", "A_vjp"], [178, 1, 1, "", "B_dagger"], [178, 1, 1, "", "forward"]], "deepinv.physics.Physics": [[179, 1, 1, "", "A"], [179, 1, 1, "", "A_dagger"], [179, 1, 1, "", "A_vjp"], [179, 1, 1, "", "__mul__"], [179, 1, 1, "", "forward"], [179, 1, 1, "", "noise"], [179, 1, 1, "", "sensor"], [179, 1, 1, "", "set_noise_model"], [179, 1, 1, "", "stack"], [179, 1, 1, "", "update"]], "deepinv.physics.PoissonGaussianNoise": [[180, 1, 1, "", "forward"], [180, 1, 1, "", "update_parameters"]], "deepinv.physics.PoissonNoise": [[181, 1, 1, "", "forward"], [181, 1, 1, "", "update_parameters"]], "deepinv.physics.PtychographyLinearOperator": [[183, 1, 1, "", "A"], [183, 1, 1, "", "A_adjoint"], [183, 1, 1, "", "get_overlap_img"], [183, 1, 1, "", "shift"]], "deepinv.physics.RadioInterferometry": [[184, 1, 1, "", "A"], [184, 1, 1, "", "A_adjoint"]], "deepinv.physics.SequentialMRI": [[186, 1, 1, "", "A"], [186, 1, 1, "", "A_adjoint"]], "deepinv.physics.SinglePhotonLidar": [[187, 1, 1, "", "A"], [187, 1, 1, "", "A_dagger"]], "deepinv.physics.SpaceVaryingBlur": [[189, 1, 1, "", "A"], [189, 1, 1, "", "A_adjoint"], [189, 1, 1, "", "update_parameters"]], "deepinv.physics.StackedLinearPhysics": [[190, 1, 1, "", "A_adjoint"]], "deepinv.physics.StackedPhysics": [[191, 1, 1, "", "A"], [191, 1, 1, "", "noise"], [191, 1, 1, "", "sensor"], [191, 1, 1, "", "set_noise_model"]], "deepinv.physics.StructuredRandomPhaseRetrieval": [[193, 1, 1, "", "B_dagger"], [193, 1, 1, "", "get_structure"]], "deepinv.physics.TimeMixin": [[194, 1, 1, "", "average"], [194, 1, 1, "", "flatten"], [194, 1, 1, "", "flatten_C"], [194, 1, 1, "", "repeat"], [194, 1, 1, "", "unflatten"], [194, 1, 1, "", "wrap_flatten_C"]], "deepinv.physics.Tomography": [[195, 1, 1, "", "A"], [195, 1, 1, "", "A_adjoint"], [195, 1, 1, "", "A_dagger"]], "deepinv.physics.UniformGaussianNoise": [[196, 1, 1, "", "forward"]], "deepinv.physics.UniformNoise": [[197, 1, 1, "", "forward"], [197, 1, 1, "", "update_parameters"]], "deepinv.physics.blur": [[199, 0, 1, "", "bicubic_filter"], [200, 0, 1, "", "bilinear_filter"], [201, 0, 1, "", "gaussian_blur"], [202, 0, 1, "", "sinc_filter"]], "deepinv.physics.functional": [[203, 0, 1, "", "IRadon"], [204, 0, 1, "", "Radon"], [205, 0, 1, "", "conv2d"], [206, 0, 1, "", "conv2d_fft"], [207, 0, 1, "", "conv3d_fft"], [208, 0, 1, "", "conv_transpose2d"], [209, 0, 1, "", "conv_transpose2d_fft"], [210, 0, 1, "", "conv_transpose3d_fft"], [211, 0, 1, "", "histogram"], [212, 0, 1, "", "histogramdd"], [213, 0, 1, "", "multiplier"], [214, 0, 1, "", "multiplier_adjoint"], [215, 0, 1, "", "product_convolution2d"]], "deepinv.physics.functional.IRadon": [[203, 1, 1, "", "forward"]], "deepinv.physics.functional.Radon": [[204, 1, 1, "", "forward"]], "deepinv.physics.generator": [[216, 0, 1, "", "Artifact2ArtifactSplittingMaskGenerator"], [217, 0, 1, "", "BaseMaskGenerator"], [218, 0, 1, "", "BernoulliSplittingMaskGenerator"], [219, 0, 1, "", "DiffractionBlurGenerator"], [220, 0, 1, "", "DiffractionBlurGenerator3D"], [221, 0, 1, "", "EquispacedMaskGenerator"], [222, 0, 1, "", "GaussianMaskGenerator"], [223, 0, 1, "", "GaussianSplittingMaskGenerator"], [224, 0, 1, "", "GeneratorMixture"], [225, 0, 1, "", "MotionBlurGenerator"], [226, 0, 1, "", "Phase2PhaseSplittingMaskGenerator"], [227, 0, 1, "", "PhysicsGenerator"], [228, 0, 1, "", "ProductConvolutionBlurGenerator"], [229, 0, 1, "", "RandomMaskGenerator"], [230, 0, 1, "", "SigmaGenerator"]], "deepinv.physics.generator.Artifact2ArtifactSplittingMaskGenerator": [[216, 1, 1, "", "batch_step"]], "deepinv.physics.generator.BaseMaskGenerator": [[217, 1, 1, "", "sample_mask"], [217, 1, 1, "", "step"]], "deepinv.physics.generator.BernoulliSplittingMaskGenerator": [[218, 1, 1, "", "batch_step"], [218, 1, 1, "", "check_pixelwise"], [218, 1, 1, "", "step"]], "deepinv.physics.generator.DiffractionBlurGenerator": [[219, 1, 1, "", "generate_coeff"], [219, 1, 1, "", "step"]], "deepinv.physics.generator.DiffractionBlurGenerator3D": [[220, 1, 1, "", "step"]], "deepinv.physics.generator.EquispacedMaskGenerator": [[221, 1, 1, "", "sample_mask"]], "deepinv.physics.generator.GaussianMaskGenerator": [[222, 1, 1, "", "get_pdf"]], "deepinv.physics.generator.GaussianSplittingMaskGenerator": [[223, 1, 1, "", "batch_step"]], "deepinv.physics.generator.GeneratorMixture": [[224, 1, 1, "", "step"]], "deepinv.physics.generator.MotionBlurGenerator": [[225, 1, 1, "", "f_matern"], [225, 1, 1, "", "matern_kernel"], [225, 1, 1, "", "step"]], "deepinv.physics.generator.Phase2PhaseSplittingMaskGenerator": [[226, 1, 1, "", "batch_step"]], "deepinv.physics.generator.PhysicsGenerator": [[227, 1, 1, "", "__add__"], [227, 1, 1, "", "reset_rng"], [227, 1, 1, "", "rng_manual_seed"], [227, 1, 1, "", "step"]], "deepinv.physics.generator.ProductConvolutionBlurGenerator": [[228, 1, 1, "", "step"]], "deepinv.physics.generator.RandomMaskGenerator": [[229, 1, 1, "", "get_pdf"], [229, 1, 1, "", "sample_mask"]], "deepinv.physics.generator.SigmaGenerator": [[230, 1, 1, "", "step"]], "deepinv.physics.phase_retrieval": [[231, 0, 1, "", "build_probe"], [232, 0, 1, "", "generate_shifts"]], "deepinv.sampling": [[234, 0, 1, "", "DDRM"], [235, 0, 1, "", "DPS"], [236, 0, 1, "", "DiffPIR"], [237, 0, 1, "", "DiffusionSampler"], [238, 0, 1, "", "MonteCarlo"], [239, 0, 1, "", "SKRock"], [240, 0, 1, "", "ULA"]], "deepinv.sampling.DDRM": [[234, 1, 1, "", "forward"]], "deepinv.sampling.DPS": [[235, 1, 1, "", "compute_alpha_betas"], [235, 1, 1, "", "forward"]], "deepinv.sampling.DiffPIR": [[236, 1, 1, "", "compute_alpha"], [236, 1, 1, "", "find_nearest"], [236, 1, 1, "", "forward"], [236, 1, 1, "", "get_alpha_beta"], [236, 1, 1, "", "get_alpha_prod"], [236, 1, 1, "", "get_noise_schedule"]], "deepinv.sampling.MonteCarlo": [[238, 1, 1, "", "forward"], [238, 1, 1, "", "get_chain"], [238, 1, 1, "", "mean_has_converged"], [238, 1, 1, "", "reset"], [238, 1, 1, "", "var_has_converged"]], "deepinv.training": [[243, 0, 1, "", "AdversarialTrainer"]], "deepinv.training.AdversarialTrainer": [[243, 1, 1, "", "check_clip_grad_D"], [243, 1, 1, "", "compute_loss"], [243, 1, 1, "", "save_model"], [243, 1, 1, "", "setup_train"]], "deepinv.transform": [[244, 0, 1, "", "CPABDiffeomorphism"], [245, 0, 1, "", "Homography"], [246, 0, 1, "", "Reflect"], [247, 0, 1, "", "Rotate"], [248, 0, 1, "", "Scale"], [249, 0, 1, "", "Shift"], [250, 0, 1, "", "ShiftTime"], [251, 0, 1, "", "Transform"]], "deepinv.transform.ShiftTime": [[250, 1, 1, "", "roll_reflect_1d"]], "deepinv.transform.Transform": [[251, 1, 1, "", "__add__"], [251, 1, 1, "", "__mul__"], [251, 1, 1, "", "forward"], [251, 1, 1, "", "get_params"], [251, 1, 1, "", "identity"], [251, 1, 1, "", "inverse"], [251, 1, 1, "", "invert_params"], [251, 1, 1, "", "symmetrize"], [251, 1, 1, "", "transform"]], "deepinv.transform.projective": [[252, 0, 1, "", "Affine"], [253, 0, 1, "", "Euclidean"], [254, 0, 1, "", "PanTiltRotate"], [255, 0, 1, "", "Similarity"]], "deepinv.unfolded": [[256, 3, 1, "", "BaseDEQ"], [257, 3, 1, "", "BaseUnfold"], [258, 3, 1, "", "DEQ_builder"], [259, 3, 1, "", "unfolded_builder"]], "deepinv.utils": [[260, 0, 1, "", "TensorList"], [262, 3, 1, "", "get_data_home"], [263, 3, 1, "", "get_freer_gpu"], [264, 3, 1, "", "load_image"], [265, 3, 1, "", "load_url_image"], [266, 0, 1, "", "ones_like"], [267, 3, 1, "", "plot"], [268, 3, 1, "", "plot_curves"], [269, 3, 1, "", "plot_inset"], [270, 3, 1, "", "plot_ortho3D"], [271, 3, 1, "", "plot_parameters"], [272, 3, 1, "", "plot_videos"], [273, 0, 1, "", "rand_like"], [274, 0, 1, "", "randn_like"], [275, 0, 1, "", "zeros_like"]], "deepinv.utils.TensorList": [[260, 1, 1, "", "__add__"], [260, 1, 1, "", "__mul__"], [260, 1, 1, "", "__neg__"], [260, 1, 1, "", "__sub__"], [260, 1, 1, "", "__truediv__"], [260, 1, 1, "", "append"], [260, 1, 1, "", "clone"], [260, 1, 1, "", "conj"], [260, 1, 1, "", "cpu"], [260, 1, 1, "", "cuda"], [260, 1, 1, "", "detach"], [260, 1, 1, "", "flatten"], [260, 1, 1, "", "numpy"], [260, 1, 1, "", "reshape"], [260, 1, 1, "", "sum"], [260, 1, 1, "", "to"], [260, 1, 1, "", "type"]], "deepinv.utils.demo": [[261, 3, 1, "", "demo_mri_model"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "function", "Python function"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:function"}, "terms": {"": [12, 19, 22, 36, 40, 42, 56, 79, 82, 83, 87, 92, 96, 97, 98, 99, 112, 113, 138, 160, 162, 165, 170, 186, 219, 225, 238, 241, 242, 243, 255, 260, 269, 276, 279, 282, 283, 284, 285, 288, 289, 290, 294, 295, 296, 299, 300, 301, 305, 306, 309, 310, 311, 312, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 334, 335, 336, 337, 338, 339, 355, 361, 365], "0": [15, 16, 19, 20, 22, 26, 27, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 80, 82, 87, 88, 89, 92, 95, 96, 97, 99, 103, 104, 108, 109, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 133, 134, 135, 138, 140, 141, 142, 143, 144, 145, 146, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 176, 177, 179, 180, 181, 184, 185, 186, 187, 188, 189, 192, 193, 195, 196, 197, 199, 200, 201, 202, 204, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 234, 235, 236, 237, 238, 239, 240, 245, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 267, 269, 270, 273, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 341, 346, 347, 352, 353, 354, 357, 359, 360, 361, 363, 364, 367, 369, 370], "00": [21, 279, 283, 284, 285, 288, 290, 294, 295, 298, 301, 304, 305, 306, 308, 309, 310, 312, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 332, 333, 335, 338, 339, 341, 347], "000": [15, 283, 290, 333, 337, 365], "0000": [121, 158, 159, 161, 162, 166, 171, 174, 227, 360, 367], "00000": 13, "0000001": 21, "000001": 17, "00001": 13, "0000250": 21, "0001": [14, 20, 47, 48, 82, 108, 117, 236, 256], "0001000": 21, "001": [20, 30, 33, 42, 48, 49, 135, 172, 179, 238, 239, 240, 316, 337], "0014": [282, 289], "00143": 165, "002": [294, 329, 337, 338], "0022": [282, 289], "002592722410522517": 309, "002650": 17, "003": [279, 309, 330, 337], "0034": 290, "0037754916896422706": 309, "00378": 309, "004": [279, 309, 330], "00490826": 145, "005": [323, 330, 334], "006": [295, 330, 338], "0064": [282, 289], "007": [279, 328, 330], "008": [279, 295, 324], "0084001": 21, "0084991": 21, "0085000": 21, "0089": [282, 289], "009": 294, "0096": [282, 289], "00e": [283, 302, 317], "00it": [294, 320], "00m": [326, 327, 328], "01": [47, 48, 49, 55, 61, 80, 99, 230, 278, 279, 281, 288, 290, 291, 295, 298, 301, 305, 306, 308, 309, 310, 312, 313, 315, 316, 317, 318, 319, 320, 322, 323, 326, 330, 332, 335, 338, 339, 341, 346, 347, 359, 367], "0100": 288, "0109": [282, 289], "011": 294, "0144": 288, "0145": [282, 289], "0146": [165, 185, 288], "015": [295, 330], "0157": 288, "016": 309, "0164958180264647": 309, "017": 323, "01740006355477841": 323, "01831": 86, "01985": [47, 48, 330], "02": [82, 126, 127, 173, 236, 279, 290, 304, 305, 306, 308, 312, 313, 315, 316, 317, 318, 319, 322, 323, 326, 332, 339, 347], "020": 329, "020025727886898": 329, "0202": 33, "0204": [282, 289], "023670959472657": 279, "024": [279, 324], "0241": 165, "0247": [282, 289], "0271": 288, "029": 330, "02it": 324, "03": [269, 279, 283, 290, 291, 305, 306, 309, 310, 312, 313, 317, 319, 322, 323, 332, 334, 339], "0306": 288, "0318": [282, 289], "032": [324, 328], "0322": [282, 289], "0335": [282, 289], "034": 347, "0349": [282, 289], "03521": 160, "03679": 72, "039": 294, "0398": 165, "03981": 83, "03mb": 319, "04": [221, 222, 229, 279, 290, 298, 306, 312, 318, 319, 322, 323, 339, 347], "0413": 290, "0420": 293, "0431": [282, 289], "045": 298, "04715": 240, "04it": 306, "05": [98, 99, 108, 118, 120, 143, 155, 156, 157, 236, 239, 240, 283, 290, 292, 294, 295, 298, 301, 302, 306, 311, 312, 319, 323, 330, 332, 337, 339, 341, 347, 353, 365], "050": 330, "0501": [282, 289], "0515": [282, 289], "0519": [282, 289], "052": 328, "0523070216572739": 328, "0545": 294, "055": 330, "0559": [282, 289], "055923461914062": 328, "056": 328, "0568": [282, 289], "0588": 288, "05it": 306, "06": [283, 290, 298, 302, 304, 306, 312, 318, 319, 322, 323, 335, 339, 347], "0603": 174, "0605": 293, "061": [329, 332, 347], "062": 335, "0623": [282, 289], "0642": [282, 289], "06474": [90, 91], "066": 330, "0667": 288, "0671": 288, "069": 323, "0694199089554509": 323, "06m": 294, "07": [290, 306, 308, 312, 315, 318, 319, 323, 327, 347], "0707": [282, 289], "071": 279, "0710": 290, "0712": [164, 171], "0732": [282, 289], "077": [195, 204, 294], "077b83af57538aa183971a2fe0971ec1": 42, "07886": 202, "08": [140, 156, 276, 290, 298, 306, 309, 315, 318, 319, 323, 341, 347, 352], "0800": 14, "0801": 14, "082": 330, "083": 337, "085": [279, 281, 347], "0864": 185, "087": [302, 304, 310, 315, 347], "0872": 288, "08845": 239, "08995": 236, "09": [290, 318, 319, 323, 332, 341, 347], "0900": 14, "09327": [245, 254], "094": 339, "094568888346355": 338, "095": 338, "09500349114552311": 289, "097": [330, 337], "09it": 306, "0m": [279, 290, 295, 305, 312, 319, 323, 338, 339], "0mb": [294, 306, 323, 326, 328, 335], "0mib": [323, 338, 339], "0x7fcc818d9bd0": [285, 292, 320], "1": [12, 15, 16, 19, 20, 22, 23, 27, 29, 33, 34, 36, 37, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 76, 79, 82, 84, 86, 87, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 112, 113, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 234, 235, 236, 237, 238, 239, 240, 243, 245, 246, 247, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 267, 269, 270, 272, 273, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 346, 350, 352, 353, 354, 355, 357, 359, 360, 361, 363, 365, 366, 367, 370], "10": [15, 30, 33, 45, 68, 83, 88, 104, 152, 158, 159, 160, 165, 183, 185, 195, 204, 211, 212, 228, 231, 234, 238, 239, 279, 282, 285, 287, 289, 290, 291, 293, 294, 295, 296, 298, 300, 305, 306, 312, 316, 317, 318, 319, 320, 323, 324, 325, 326, 328, 329, 330, 334, 335, 336, 337, 338, 339, 342, 347, 352, 367], "100": [12, 14, 17, 25, 78, 108, 118, 120, 143, 155, 156, 157, 160, 172, 234, 236, 237, 242, 279, 283, 284, 285, 286, 287, 288, 290, 293, 294, 295, 301, 305, 306, 309, 310, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 335, 337, 338, 339, 365], "1000": [42, 73, 82, 98, 99, 140, 225, 235, 236, 238, 239, 240, 290, 295, 318, 319, 328, 334, 335, 336, 339, 365], "10000": 306, "1006": [171, 227], "100m": [319, 323], "101": [279, 306, 319, 324], "1010": 20, "1018": 20, "101m": [290, 319, 323], "102": [306, 319], "1024": [126, 127, 173, 294, 306], "1024x1024": 22, "102m": [290, 319, 323], "103": [306, 319], "1036": 287, "103m": [290, 323], "104": [306, 319], "104m": [290, 319, 323], "105": [306, 319], "105m": [290, 319, 323], "106": [285, 306, 319], "1068": 195, "106m": [290, 319, 323], "107": [306, 319], "107m": [290, 319, 323], "108": [285, 300, 306, 319, 330], "1080": 289, "10847507169258835": 330, "108m": [290, 319, 323], "109": [285, 306, 319], "109m": [290, 319, 323], "10it": 306, "10mb": 328, "10x": [335, 336], "11": [15, 45, 99, 202, 279, 289, 290, 294, 295, 305, 306, 309, 310, 312, 313, 318, 319, 320, 323, 324, 326, 327, 328, 329, 330, 332, 335, 336, 338, 339, 342, 347], "110": [285, 293, 306, 319], "1102": 202, "110m": [279, 290, 319, 323], "111": [306, 319], "111m": [290, 319], "112": [306, 319, 330], "11232": 29, "112m": [290, 319, 323], "113": [306, 319], "1135": 166, "1137": 83, "113m": [290, 319, 323], "114": [306, 319], "1140": 291, "1145": 301, "114m": [290, 319, 323, 324], "115": [306, 319, 322, 347], "115m": [290, 319, 323], "116": [306, 319, 323, 337], "116m": [290, 319, 323], "117": [306, 319], "11793": 234, "117m": [290, 319, 323], "118": [306, 319], "11888": 317, "118m": [290, 319, 323], "119": [306, 319], "119510806875491": 338, "119m": [290, 319, 323], "11it": [306, 317, 319], "11m": 339, "12": [15, 19, 45, 107, 279, 290, 294, 295, 300, 305, 306, 309, 312, 318, 319, 323, 326, 327, 328, 335, 336, 338, 339], "120": [293, 306, 319, 338], "1200": [267, 269, 294], "12000": 365, "1200x1280": 365, "120m": [290, 319, 323], "121": [306, 318, 319], "12151": 37, "121m": [290, 319, 323], "122": [306, 318, 319], "12231": 293, "1227": 171, "122m": [290, 319, 323], "123": [306, 319], "123m": [319, 323], "124": [306, 319], "124m": [290, 319, 323], "125": [282, 306, 319], "125m": [290, 319, 323], "126": [306, 319], "1269": 293, "126m": [319, 323], "127": [306, 318, 319], "127m": 323, "128": [61, 66, 78, 79, 82, 87, 97, 170, 279, 291, 293, 295, 296, 306, 309, 319, 323, 325, 337, 338, 357, 364], "128m": [319, 323], "128x128": [170, 279, 293, 295, 323, 325, 338], "129": [306, 319], "129m": [279, 319, 323, 324], "12m": [279, 290, 294, 295, 305, 310, 312, 319, 320, 323, 324, 325, 326, 328, 329], "13": [15, 279, 283, 289, 290, 295, 305, 306, 309, 312, 318, 319, 323, 326, 338, 339], "130": [293, 306, 318, 319], "130m": [319, 323], "131": [306, 319], "131m": [319, 323], "131mb": 335, "132": [306, 319], "1322": 337, "13247v2": [30, 33], "132m": 319, "133": [306, 319], "1332": 337, "1336401602927466": 309, "133m": [319, 323], "134": [292, 298, 306, 309, 319, 347], "134m": [319, 323], "134mb": 328, "135": [291, 298, 306, 319, 347], "135388067": [279, 324], "135m": [319, 323], "136": [306, 319], "136m": [319, 323], "137": [306, 319], "137m": [319, 323], "138": [306, 319], "138m": [319, 323], "139": [306, 319], "139m": [319, 323], "13it": 317, "13m": 328, "14": [15, 24, 202, 276, 278, 279, 290, 294, 295, 302, 305, 306, 308, 312, 318, 319, 323, 324, 326, 330, 338, 339, 347, 365], "140": [293, 306, 319, 339], "1406": 225, "140e": 289, "140m": [319, 323], "141": [306, 319], "141m": [319, 323], "142": [306, 319], "1428": 294, "142m": [319, 323], "143": [306, 319, 336], "143m": 323, "144": [306, 319, 336], "144m": [319, 323], "145": [279, 306, 319, 336], "145m": [319, 323], "146": [306, 319, 336, 339], "14610": 293, "14687": 235, "146m": [319, 323], "147": [306, 319, 336], "14756": 29, "147m": [319, 323], "148": [306, 319, 324, 336], "148m": [319, 323], "149": [279, 306, 319], "149m": [319, 323], "14m": [327, 329], "15": [15, 97, 170, 219, 220, 279, 283, 290, 295, 298, 301, 305, 306, 312, 316, 318, 319, 323, 324, 326, 336, 338, 339, 364], "150": [22, 293, 306, 319, 323, 325], "1500": 318, "1506": 160, "150m": 319, "151": [306, 319], "1510": 165, "1518": 185, "151m": [319, 323], "152": [306, 319, 336], "152m": [319, 323], "153": [306, 319], "153m": [319, 323], "154": [306, 319], "154m": [319, 323], "155": [306, 319, 336], "155m": [319, 323], "156": [306, 319], "156m": [319, 323], "157": [306, 319, 324], "157m": [319, 323], "158": [98, 99, 279, 306, 319], "158m": 323, "159": [306, 319, 324], "159m": [319, 323], "15it": 285, "16": [15, 21, 84, 116, 158, 159, 165, 172, 188, 189, 245, 252, 253, 254, 255, 259, 270, 272, 279, 282, 290, 295, 301, 305, 306, 312, 313, 318, 319, 323, 324, 325, 326, 334, 338, 339, 347, 350, 352, 353, 363, 366, 367], "160": [279, 293, 305, 306, 319], "1608": 83, "160m": [319, 323], "161": [283, 298, 306, 319, 324, 347], "1611": 72, "161m": [319, 323], "162": [279, 306, 319], "162m": [319, 323], "163": [306, 319, 324, 332, 347], "163m": [319, 323], "164": [306, 319], "16461435953776": 309, "164m": [319, 323], "165": [294, 306, 309, 319], "1650": 195, "1655": 121, "165m": [319, 323], "166": [306, 319], "1666": 195, "1668": 160, "166m": [319, 323], "167": [306, 319], "167m": [319, 323], "168": [306, 319], "168m": [319, 323], "169": [288, 298, 306, 319, 347], "1696": 293, "169m": [319, 323], "16it": [316, 317, 319], "16m": [323, 339], "16x16": [158, 159, 172, 245, 252, 253, 254, 255, 352], "17": [15, 267, 270, 279, 283, 290, 295, 305, 306, 312, 316, 318, 319, 323, 324, 330, 338], "170": [293, 306, 319], "1707": [90, 91], "170m": [319, 323], "171": [306, 319], "171m": [319, 323], "172": [306, 319], "172m": [319, 323], "173": [282, 306, 319, 324], "173828125": 276, "173m": [319, 323], "174": [279, 306, 319, 330], "174m": [319, 323], "175": [306, 319], "175m": 319, "176": [285, 298, 306, 319, 347], "176m": [319, 323], "177": [306, 319], "177m": [319, 323], "178": [306, 319, 338], "1788": [162, 171], "178m": [319, 323], "179": [306, 319], "179m": 323, "17it": [283, 317, 320], "17m": [295, 325, 338], "18": [15, 99, 279, 283, 284, 290, 305, 306, 312, 318, 319, 322, 323, 326, 337, 338, 339, 347], "180": [97, 195, 203, 204, 245, 247, 252, 253, 254, 255, 293, 306, 319], "180m": [319, 323], "181": [306, 319], "1814": 174, "181m": [319, 323], "182": [306, 319], "1820": 171, "182m": [319, 323], "183": [306, 319], "1830": 302, "183m": [319, 323], "184": [306, 319], "184m": [319, 323], "185": [306, 319], "185m": [319, 323], "186": [306, 319], "186646143595378": 309, "186m": [319, 323], "187": [306, 309, 319, 335, 336, 337, 341, 347], "187019": [323, 325], "187m": [319, 323], "188": [306, 319, 339], "188174": 339, "188m": [319, 323], "189": [306, 319], "189m": [319, 323], "18it": [306, 324], "18m": 323, "19": [15, 279, 285, 290, 295, 305, 306, 309, 312, 317, 318, 319, 323, 324, 325, 326, 327, 329, 330, 332, 337, 338, 339, 347], "190": [290, 293, 306, 319], "1908": 239, "190m": [319, 323], "190mb": 279, "191": [306, 319], "191m": [319, 323], "192": [306, 319], "192m": [319, 323], "193": [306, 319], "193m": [319, 323], "194": [306, 319], "194m": [319, 323], "195": [306, 319], "195m": [319, 323], "196": [306, 319], "196m": [319, 323], "197": [306, 319], "197m": 319, "198": [19, 306, 319, 326], "1985": 164, "198m": [319, 323], "198mb": 324, "199": [19, 306, 319], "1991": 289, "199m": [319, 323], "19it": 306, "19m": 294, "1_alex": 309, "1conv": 97, "1d": [86, 222, 223, 229, 296, 352], "1e": [33, 75, 98, 99, 107, 108, 117, 118, 120, 140, 155, 156, 157, 159, 256, 276, 279, 283, 285, 291, 295, 300, 301, 306, 312, 323, 324, 325, 326, 327, 328, 329, 330, 334, 337, 338, 339, 360], "1e16": 119, "1e2": 316, "1e3": [238, 316], "1e4": 337, "1f": 149, "1j": [276, 290, 293], "1m": [279, 290, 305, 312, 319, 323, 324, 339], "1mb": [279, 290, 294, 312, 319, 326, 327, 328], "1mib": [284, 323, 339], "1x1024x1024": 365, "1z2us9zhjdgolu6r1jee0s2bbej2xv5": 306, "2": [15, 16, 20, 22, 27, 29, 35, 36, 37, 38, 39, 40, 42, 43, 46, 47, 48, 49, 50, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 79, 80, 81, 82, 84, 86, 87, 89, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 116, 117, 118, 120, 121, 122, 124, 125, 129, 135, 138, 140, 141, 142, 145, 146, 147, 151, 152, 158, 159, 160, 162, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 207, 216, 218, 219, 220, 221, 222, 223, 225, 229, 235, 236, 237, 238, 239, 240, 243, 246, 251, 253, 255, 267, 269, 270, 272, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 300, 301, 302, 305, 306, 308, 309, 310, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 350, 352, 353, 354, 355, 359, 360, 361, 364, 365, 367, 370], "20": [15, 68, 83, 276, 279, 288, 290, 292, 293, 294, 295, 296, 301, 305, 306, 311, 312, 317, 318, 319, 323, 326, 328, 330, 334, 336, 338, 339, 360, 364], "200": [19, 84, 116, 293, 306, 310, 311, 319, 335, 336, 338, 365], "2000": 301, "2000x2000": 365, "2007": 74, "2009": [99, 283, 300, 301, 309, 312], "200m": [319, 323], "201": 290, "2010": 98, "2011": 116, "2012": [30, 33], "2013": [98, 99], "2017": [92, 113, 215, 283, 309], "2018": [80, 285, 337], "20185546875": 328, "201m": [319, 323], "202": [302, 328], "2020": 337, "2021": 42, "2022": [285, 316, 317, 320], "2024": [276, 309, 342], "2025": 342, "202m": [319, 323], "203m": [319, 323], "2040": 14, "2040x2040": 365, "204661061157774": [295, 338], "2048": 292, "204m": [319, 323], "205": [295, 338], "205m": [319, 323], "2064": 164, "2067779": 295, "2069441": 326, "206m": [319, 323], "207m": [319, 323], "208m": [319, 323], "209m": 323, "20it": 319, "20m1387961": 83, "21": [202, 220, 279, 290, 301, 305, 306, 310, 312, 315, 318, 319, 323, 324, 326, 330, 334, 335, 339, 347], "2103": [29, 240], "210m": [319, 323], "211m": [319, 323], "211mb": 279, "212m": [319, 323], "213": 334, "2139": 164, "213m": [319, 323], "214m": [319, 323], "215m": [319, 323], "2160x2160": 365, "216m": [319, 323], "217m": [319, 323], "218m": 319, "219": 335, "2197": 160, "219m": [319, 323], "21it": [285, 319], "22": [279, 285, 290, 295, 305, 306, 318, 319, 323, 325, 326, 328, 329, 330, 335, 338, 339], "2201": [37, 234], "2209": [235, 317], "220m": [319, 323], "221m": [319, 323], "222m": [319, 323], "223m": [319, 323], "224": 286, "224m": [319, 323], "224x224": 286, "225m": [319, 323], "226m": [319, 323], "2270": 121, "227m": [319, 323], "227mb": 279, "228": [294, 330], "228m": [319, 323], "229m": [319, 323], "22it": 319, "22m": 295, "23": [279, 290, 294, 305, 306, 310, 311, 312, 316, 318, 319, 323, 326, 328, 329, 330, 339], "2305": 236, "230904405045883": 279, "230m": [319, 323], "231": 279, "2312": [29, 86], "231m": [319, 323], "231mb": 324, "232m": [319, 323], "233m": [319, 323], "2348": 121, "234m": [319, 323], "235m": [319, 323], "235mb": 279, "236m": [319, 323], "237": [287, 298, 347], "237m": [319, 323], "237mb": 279, "238": 328, "23841247558594": 328, "238m": [319, 323], "238mb": [279, 324], "239": 329, "239m": [319, 323], "239mb": 324, "23it": [306, 319], "23m": [323, 338], "24": [279, 285, 290, 294, 295, 302, 305, 306, 312, 318, 319, 323, 327, 328, 329, 338, 339, 342], "240": [296, 298, 347], "2402": 293, "2403": [245, 254], "24033": 293, "2409": [47, 48, 330], "240m": 319, "2419": 99, "241m": 323, "242m": [319, 323], "2434": 99, "243m": [319, 323], "243mb": 324, "244m": [319, 323], "245m": [319, 323], "246m": [319, 323], "247": 306, "247m": [319, 323], "248": 365, "2489": 293, "248m": [319, 323], "249m": [319, 323], "24it": [306, 319], "24m": 339, "25": [97, 183, 184, 219, 220, 225, 228, 232, 236, 276, 279, 289, 290, 305, 306, 312, 316, 318, 319, 323, 334, 337, 339, 364], "250": 21, "2500": [75, 80, 158, 159, 352], "250m": [319, 323], "251m": [319, 323], "252m": [319, 323], "2532": [227, 230], "253m": [319, 323], "2544": 293, "254m": [319, 323], "255": [97, 305, 306, 318, 319, 320, 364], "2550": 291, "25592549641927": 312, "255m": [319, 323], "256": [16, 76, 79, 82, 87, 96, 130, 189, 219, 267, 279, 282, 283, 284, 292, 294, 301, 302, 312, 318, 319, 324, 357, 364], "256m": [319, 323], "256x256": [318, 319], "257m": [319, 323], "258": [195, 204], "25852": [112, 311], "2588": 185, "258m": [319, 323], "259m": 323, "25it": 319, "25m": [279, 290, 294, 305, 310, 312, 319, 320, 326, 328, 329], "26": [279, 290, 305, 306, 312, 318, 319, 323, 326, 334, 337, 339, 342], "260m": 319, "261m": [319, 323], "262m": [319, 323], "263m": [319, 323], "2640": 195, "264m": [319, 323], "265": [325, 336], "2652720747247512": 325, "265m": [319, 323], "266": [318, 322, 347], "266m": [319, 323], "2674": 195, "267m": [319, 323], "268m": [319, 323], "269m": [319, 323], "26it": [285, 306, 319], "26m": 295, "27": [279, 290, 295, 306, 312, 317, 318, 319, 323, 324, 338, 339], "270": [247, 312], "27044744932888226": 312, "270m": [319, 323], "271m": [319, 323], "272m": [319, 323], "273": 323, "273216157077679": 323, "273m": [319, 323], "2744": 121, "274m": [319, 323], "275": 294, "275m": [319, 323], "276": [24, 316, 322, 339, 347], "276m": [319, 323], "277m": [319, 323], "278m": [319, 323], "279": [300, 304, 347], "279m": 323, "27it": 319, "27m": 338, "28": [279, 290, 294, 305, 306, 312, 316, 318, 319, 323, 326, 328, 335, 336, 337, 339, 342, 353, 365], "280m": [319, 323], "281m": [319, 323], "282": 337, "282m": 319, "283m": [319, 323], "284m": [319, 323], "285": 202, "285m": [319, 323], "28690": 276, "286m": [319, 323], "28786186322774": 325, "287m": [319, 323], "288": [325, 335, 336], "288m": [319, 323], "2899": 293, "289m": [319, 323], "28crop": [285, 316, 317, 320], "28it": [283, 319], "28m": 323, "29": [279, 281, 285, 290, 292, 305, 306, 312, 316, 317, 318, 319, 320, 322, 323, 325, 327, 328, 337, 338, 339, 347], "2908": 174, "290m": [319, 323], "291m": [319, 323], "292m": [319, 323], "293": 295, "293m": [319, 323], "294m": [319, 323], "295m": [319, 323], "296": 335, "296m": [319, 323], "297m": [319, 323], "298": [293, 298, 347], "2989": 291, "298m": [319, 323], "299": [294, 298, 347], "299m": [319, 323], "29it": 319, "2_2": [56, 68, 279], "2a": 48, "2artifact": 27, "2ax_": 310, "2cm": 117, "2d": [16, 20, 103, 158, 166, 174, 175, 176, 182, 183, 184, 186, 188, 192, 205, 206, 208, 209, 215, 219, 223, 225, 245, 247, 248, 249, 252, 253, 254, 255, 276, 282, 292, 296, 323, 324, 352], "2e": [276, 279, 291], "2f": [30, 276, 285, 290, 291, 300, 301, 302, 305, 306, 310, 311, 313, 316, 317, 320], "2m": [160, 185, 279, 290, 305, 312, 319, 323, 326, 338, 339], "2mb": [279, 290, 294, 305, 310, 319, 320, 323, 326, 327], "2mib": 323, "2nd": 98, "2x": 323, "2x2": [158, 159, 174, 176, 353], "2x_": [310, 338], "3": [12, 15, 16, 20, 22, 33, 42, 44, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 77, 78, 79, 82, 83, 84, 87, 88, 90, 91, 93, 95, 96, 97, 98, 102, 103, 104, 116, 121, 124, 139, 142, 147, 160, 161, 162, 163, 164, 171, 172, 177, 185, 186, 187, 188, 195, 198, 199, 202, 218, 219, 220, 223, 224, 225, 227, 234, 236, 244, 245, 251, 252, 253, 254, 255, 267, 270, 272, 276, 279, 282, 283, 284, 287, 288, 289, 290, 291, 294, 295, 300, 301, 302, 304, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 323, 324, 325, 326, 328, 329, 330, 334, 335, 336, 337, 338, 339, 350, 352, 353, 357, 363, 366, 367, 370], "30": [251, 279, 290, 293, 305, 306, 309, 312, 313, 317, 318, 319, 323, 335, 337, 338, 339, 342], "300": [290, 301, 302, 353, 365], "300m": 319, "301m": [319, 323], "302": [289, 298, 347], "302m": [319, 323], "303m": [319, 323], "304m": [319, 323], "305m": [319, 323], "306m": [319, 323], "307": 295, "307m": [319, 323], "308m": [319, 323], "309": 339, "309m": [319, 323], "30e": 283, "30it": [306, 319], "30m": 339, "31": [279, 282, 290, 301, 305, 306, 312, 318, 319, 323, 326, 328, 339], "310": 338, "310m": [319, 323], "311": 279, "311m": [319, 323], "312m": [319, 323], "3132": 291, "313m": [319, 323], "314m": [319, 323], "315m": 323, "31698811848958": 323, "316m": [319, 323], "317": 323, "317m": [319, 323], "318": [282, 298, 347], "318m": [319, 323], "319m": [319, 323], "31it": 306, "31m": [294, 295], "31mb": 319, "32": [27, 39, 70, 73, 84, 90, 91, 116, 160, 165, 172, 177, 188, 189, 234, 236, 279, 282, 284, 285, 288, 290, 291, 295, 305, 306, 309, 312, 313, 316, 317, 319, 320, 323, 327, 329, 330, 334, 337, 338, 339, 353, 357], "320": [166, 174, 176, 186, 305], "320m": [319, 323], "320x320": [325, 365], "321m": 319, "3223": 164, "322m": [319, 323], "323": 334, "323m": [319, 323], "324m": [319, 323], "325m": [319, 323], "326": 336, "326m": [319, 323], "327m": [319, 323], "328m": [319, 323], "329m": [319, 323], "32m": [323, 338], "32x32": [165, 172, 177, 188, 234, 236, 295, 338], "33": [279, 283, 290, 305, 306, 312, 317, 318, 319, 323, 324, 338, 339, 341, 347], "330m": [319, 323], "331m": [319, 323], "332": [284, 298, 347], "3322": 293, "332m": [319, 323], "333": 215, "333m": [319, 323], "334": 283, "334139506022137": 283, "334m": [319, 323], "335m": [319, 323], "336m": [319, 323], "337m": [319, 323], "338m": [319, 323], "339m": [319, 323], "34": [279, 285, 290, 305, 306, 312, 319, 323, 324, 332, 339], "340m": [319, 323], "341m": [319, 323], "3429": 293, "342m": 319, "343": 294, "343m": 323, "344m": [319, 323], "345m": 319, "346": [327, 329], "346023559570312": [327, 329], "3467": 293, "346m": [319, 323], "347m": [319, 323], "348": 215, "3487": 293, "348m": 319, "349": 338, "349m": [319, 323], "34it": 306, "35": [279, 289, 290, 305, 306, 312, 318, 319, 323, 339], "350m": [319, 323], "351": [301, 304, 347], "351m": [319, 323], "352m": [319, 323], "353m": [319, 323], "3542": 293, "354m": [319, 323], "355": 339, "355m": [319, 323], "356": 334, "356m": [319, 323], "357": 82, "357m": [319, 323], "358m": 323, "3595": 296, "359m": 323, "35it": 306, "36": [279, 290, 306, 312, 319, 323, 326, 339], "360": [195, 247], "3608000": 279, "3617": 323, "361m": 323, "362": 306, "3624": 164, "362m": 323, "3636": 121, "363m": 323, "364m": 323, "365": 279, "365m": 323, "366m": 323, "367m": 323, "368m": 323, "3695": 121, "369m": 323, "36m": [295, 339], "36mb": 335, "37": [279, 290, 305, 306, 312, 318, 319, 323, 325, 337, 339], "370m": 323, "371": [335, 336], "371m": 323, "372m": 323, "3731": [171, 293], "373m": 323, "374": 330, "3744": 174, "374m": 323, "375": 326, "3750396285973236": 326, "375m": 323, "376m": 323, "377m": 323, "378m": 323, "379m": 323, "37it": 306, "37m": [323, 338], "38": [279, 290, 295, 306, 312, 318, 319, 323, 325, 338, 339], "3809": 293, "380m": 323, "381m": 323, "382m": 323, "383m": 323, "3856": 195, "385k": [284, 301, 309, 339], "385m": 323, "386": [339, 341, 347], "386m": 323, "387m": 323, "3881": 121, "38880230629281": 325, "388m": 323, "389": 325, "389m": 323, "38e": 283, "38m": [279, 290, 294, 305, 312, 319, 329], "39": [279, 290, 298, 306, 312, 318, 319, 323, 339], "390m": 323, "391m": 323, "3929": [113, 309], "392m": 323, "393": [276, 309], "3938": [113, 309], "393999002205344": 326, "393m": 323, "394": [309, 326, 337], "394m": 323, "395e": 289, "395m": 323, "396m": 323, "397m": 323, "3986": [162, 171], "398m": 323, "399m": 323, "39it": 306, "3c353_gdth": 276, "3conv": 97, "3d": [16, 74, 81, 103, 104, 142, 158, 168, 172, 174, 175, 176, 179, 207, 210, 220, 227, 254, 263, 267, 270, 297, 298, 299, 303, 304, 323, 324, 347, 350, 352, 354], "3f": [290, 330], "3k": 288, "3m": [279, 323, 339], "3mb": [279, 290, 305, 312, 319, 324, 326, 328], "3mib": [295, 323, 338, 339], "3x3": [121, 160, 161, 164, 171, 172, 185, 195], "4": [15, 16, 19, 20, 22, 26, 27, 39, 59, 75, 76, 79, 84, 86, 89, 92, 95, 96, 97, 100, 101, 102, 108, 116, 117, 121, 158, 159, 163, 170, 172, 175, 177, 195, 198, 199, 202, 217, 220, 221, 222, 223, 229, 246, 251, 256, 267, 269, 270, 276, 279, 282, 283, 284, 287, 290, 292, 294, 295, 296, 300, 302, 305, 306, 309, 310, 312, 313, 317, 318, 319, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 342, 350, 352, 353, 360, 365], "40": [279, 290, 293, 305, 306, 311, 312, 317, 318, 319, 323, 324, 339], "402": 309, "4024091561635335": 309, "403": [328, 335], "4033": [162, 171], "4081": 121, "4099398": 47, "40it": 306, "41": [279, 290, 306, 312, 315, 319, 323, 326, 337, 339], "411": [318, 319, 325], "411393798566601": 325, "4133": 294, "416": 316, "419": 332, "41it": 279, "41m": 295, "42": [279, 286, 290, 294, 306, 312, 318, 319, 323, 339], "421": 295, "4249": 293, "4290": 174, "42it": 306, "42m": [323, 338, 339], "42mib": 323, "43": [279, 290, 295, 300, 301, 304, 305, 306, 312, 318, 319, 323, 324, 335, 338, 339, 341, 347], "4312": 293, "4322": 164, "4375": 276, "4385367335731565": 328, "439": 328, "43it": 306, "44": [279, 288, 290, 298, 306, 310, 312, 319, 320, 323, 328, 329, 332, 339, 347], "444737": [327, 328, 329, 330], "444867": [279, 324], "4453": 166, "4468237274226996": 309, "447": [291, 309, 341], "45": [195, 279, 290, 291, 292, 306, 312, 318, 319, 323, 335, 339], "450": 294, "4564": 174, "4569": 290, "458": 336, "46": [276, 279, 285, 290, 305, 306, 312, 319, 323, 326, 336, 337, 339, 347], "460": [98, 99], "465": 330, "4666": 121, "46m": [295, 338], "46mb": 319, "47": [19, 279, 290, 306, 312, 316, 318, 319, 323, 339], "4710": 293, "473597717285156": 279, "4736": 294, "474": [279, 316], "4746": 293, "4776": 121, "479": [98, 99], "47it": [285, 306], "47m": 339, "48": [19, 95, 188, 279, 290, 295, 306, 312, 319, 323, 338, 339, 365], "4805": 293, "481x321": 365, "482": [337, 338], "485": [328, 332, 347], "4860": 195, "4882": 195, "489": [336, 341, 347], "489e": 289, "48it": 285, "48mib": 323, "49": [33, 279, 290, 305, 306, 312, 319, 323, 339, 341], "492": 98, "4949": 121, "49it": 324, "49m": 323, "4a": 199, "4e": 279, "4m": [279, 290, 305, 312, 319, 323, 324, 326, 339], "4mb": [279, 290, 305, 310, 312, 319, 320, 324, 326, 327, 329, 335], "4mib": [295, 323, 338, 339], "4x": 166, "4x4": [163, 195], "5": [15, 16, 22, 40, 42, 43, 44, 48, 49, 56, 60, 82, 88, 90, 91, 92, 97, 98, 99, 102, 108, 117, 121, 130, 159, 160, 164, 172, 175, 176, 192, 193, 195, 196, 198, 199, 200, 204, 219, 224, 225, 230, 234, 236, 240, 245, 248, 252, 253, 254, 255, 256, 257, 259, 269, 272, 276, 279, 282, 283, 285, 288, 289, 290, 291, 292, 294, 295, 296, 300, 305, 306, 312, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 335, 336, 337, 338, 339, 346, 352, 353, 357, 359, 360, 363], "50": [15, 33, 97, 117, 135, 152, 172, 179, 187, 202, 245, 252, 253, 254, 255, 256, 276, 279, 287, 288, 290, 292, 293, 294, 295, 305, 306, 309, 312, 317, 318, 319, 323, 326, 327, 338, 339, 353, 364], "500": 283, "5000": [15, 276, 305], "501": 327, "5012940824804186": 327, "505": 336, "507": 328, "5073385957994816": 328, "50it": 306, "50m": [279, 290, 305, 312, 319, 326, 327, 329], "50th": 287, "51": [33, 220, 289, 290, 302, 304, 305, 306, 312, 319, 323, 327, 339], "510": 365, "512": [15, 20, 24, 79, 87, 220, 346, 359, 365], "512x512": 365, "519": 337, "51it": 306, "51m": 338, "51mib": 323, "52": [279, 290, 305, 306, 308, 312, 318, 319, 323, 324, 325, 326, 339, 347], "525": 337, "526": 98, "5281": [195, 204], "5282": 160, "529": 336, "52it": 306, "52m": 295, "53": [279, 290, 295, 306, 312, 318, 319, 323, 324, 339], "531": 337, "534": [296, 336], "5369": 121, "538": [295, 336], "539": [326, 332, 347], "53it": 306, "53m": 339, "54": [276, 279, 290, 305, 306, 312, 318, 319, 323, 338, 339], "5410": [162, 171], "543": 336, "548789978027344": 328, "549": [328, 334], "549949645996094": 337, "54it": [285, 306], "54k": [328, 335], "54m": 323, "54mib": 323, "55": [22, 283, 289, 290, 293, 306, 312, 319, 323, 337, 339], "550": 337, "5513": 121, "553": 336, "556": [317, 322, 347], "5567108": 169, "558": [327, 329, 330], "55it": 324, "55m": [294, 310], "56": [279, 290, 294, 306, 312, 319, 323, 339], "564": 337, "5684": [160, 162, 171], "569": 323, "56it": [306, 324], "56m": [320, 338], "57": [195, 204, 276, 290, 293, 305, 306, 312, 318, 319, 323, 326, 339], "5720": 195, "573": [286, 298, 347], "5748996872970398": 312, "575": 312, "576": 338, "5779": 160, "579": 336, "57it": 306, "58": [215, 279, 285, 290, 306, 312, 319, 323, 339, 347], "5842": 202, "586": 295, "5870": 291, "58it": 306, "58m": 339, "59": [290, 295, 306, 312, 318, 319, 323, 338, 339], "593": 294, "594": [337, 341, 347], "5955": 293, "5976": 276, "59it": 279, "5a": 199, "5d": [27, 39, 251, 289, 357, 370], "5e": [295, 325, 326, 327, 329, 330, 336, 339], "5e3": 320, "5j": 290, "5m": [279, 290, 305, 312, 319, 323, 326, 339], "5mb": [279, 294, 305, 310, 319, 320, 324, 326, 329], "5mib": [295, 309, 323, 338, 339], "5x5": [316, 318], "6": [15, 22, 23, 84, 91, 95, 97, 116, 130, 131, 185, 218, 223, 276, 279, 282, 286, 289, 290, 293, 294, 295, 300, 301, 305, 306, 312, 317, 318, 319, 323, 324, 326, 328, 330, 336, 337, 338, 339, 341, 342, 365], "60": [15, 22, 279, 290, 293, 302, 306, 312, 317, 318, 319, 323, 339], "60it": 306, "61": [290, 305, 306, 312, 319, 323, 339], "611": 337, "61101531982422": 337, "6160": 160, "6179": 293, "61e": 317, "61it": 306, "61m": 323, "62": [279, 290, 306, 312, 319, 323, 326, 339], "6209": 174, "627": [325, 332, 347], "62it": 306, "62m": [279, 290, 305, 312, 319, 327], "63": [279, 290, 305, 306, 312, 318, 319, 323, 339], "631": [330, 332, 347], "633": 327, "633206176757813": 327, "638": 337, "639": 338, "63it": 285, "64": [65, 69, 77, 78, 79, 83, 87, 88, 93, 96, 170, 221, 222, 228, 229, 279, 282, 285, 290, 291, 292, 295, 301, 302, 306, 310, 311, 312, 319, 323, 326, 335, 336, 338, 339, 357], "6418031": 62, "645": 325, "64it": [306, 324], "64x64": [292, 318], "65": [290, 306, 312, 319, 323, 324, 339], "650": 365, "651": 334, "6536": 195, "657": [309, 315, 347], "6592": 293, "65m": [328, 335], "66": [95, 279, 290, 305, 306, 312, 316, 319, 323, 326, 329, 339], "667": [276, 278, 347], "668229": 334, "6687": 291, "67": [283, 290, 306, 312, 317, 318, 319, 323, 324, 339], "671": 336, "6714502": [48, 49], "6752": 160, "677": 336, "678": 335, "679": 335, "67it": 306, "68": [13, 279, 290, 306, 312, 319, 323, 339, 365], "682": [311, 315, 347], "68878173828125": 330, "689": [326, 330], "68945770263672": 326, "68it": [306, 317], "68mb": 319, "69": [279, 290, 305, 306, 312, 319, 323, 339], "69037": 318, "6995": 195, "69it": [306, 317], "6m": [279, 290, 295, 305, 312, 319, 323, 326, 338, 339], "6mb": [288, 290, 319, 326, 328, 329], "6mib": [323, 338, 339], "7": [15, 76, 90, 158, 159, 165, 171, 184, 202, 228, 236, 276, 279, 283, 290, 294, 295, 305, 306, 311, 312, 317, 318, 319, 323, 324, 326, 330, 336, 337, 338, 339, 352], "70": [171, 279, 285, 290, 293, 294, 295, 306, 312, 317, 318, 319, 323, 324, 338, 339], "701": [312, 315, 347], "7012": 293, "7061": 293, "70675455729167": 323, "707": 323, "70e": [283, 289], "70it": [306, 317], "71": [279, 290, 306, 312, 317, 319, 323, 324, 326, 339], "712": 337, "7125": 121, "713": [320, 322, 347], "7137": 195, "716": 304, "717": 339, "7193": [162, 171], "71it": [279, 306, 317], "72": [98, 290, 305, 306, 311, 312, 319, 323], "722": 336, "723600006103515": 279, "724": 279, "726": 323, "7261516614270602": 323, "72it": [306, 317], "73": [279, 290, 306, 318, 319, 323, 339], "7302": 164, "7340": 195, "735636393229164": 283, "736": 283, "738": 328, "73807144244024": 328, "739k": 306, "73it": [306, 317], "74": [290, 306, 312, 319, 323, 339], "7400": 293, "7412": 290, "7444": 225, "7488": 293, "74e": 291, "74mib": 323, "75": [166, 248, 279, 290, 292, 295, 305, 306, 312, 318, 319, 323, 336, 338], "7510": 293, "754": 324, "75595": 337, "757126": 276, "75it": [279, 306], "75m": [279, 290, 305, 319, 326], "76": [279, 290, 306, 312, 319, 323, 339], "768": [24, 365], "769": 336, "77": [279, 290, 306, 312, 318, 319, 323, 326, 339], "77124": 294, "7715": 293, "775": 330, "776": 336, "7769": 160, "77it": 306, "78": [276, 287, 290, 305, 306, 319, 323, 324, 327, 328, 335, 336], "782": 334, "783": 308, "78353894777952": 279, "784": 279, "785": 323, "786": [327, 329], "78632784200239": [327, 329], "788": [295, 298, 347], "7883": 121, "78it": [283, 306], "79": [279, 290, 306, 309, 312, 317, 319, 320, 323, 339], "7914941": 294, "7928400039672852": 323, "793": 323, "7930": 293, "794": [306, 308, 347], "7944": 293, "795": [335, 336], "7969": 166, "797": 336, "798": 337, "79it": 306, "7db": 328, "7m": [279, 295, 305, 323, 338, 339], "7mb": [279, 290, 294, 305, 312, 319, 325, 326, 327, 328], "7mib": 323, "8": [15, 20, 22, 40, 43, 59, 60, 62, 63, 64, 67, 68, 71, 84, 95, 97, 99, 100, 101, 116, 140, 158, 159, 172, 177, 202, 221, 222, 223, 228, 229, 270, 272, 276, 279, 282, 283, 285, 289, 290, 292, 294, 295, 296, 301, 302, 305, 306, 309, 310, 312, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 338, 339, 352, 353, 357, 365], "80": [68, 285, 290, 293, 295, 305, 306, 312, 317, 318, 319, 323, 338, 339], "800": 365, "800x800": 365, "8064": 164, "8075": 185, "80it": 306, "81": [290, 306, 319, 323], "811": 337, "8137": 166, "8181": 160, "81it": 306, "82": [279, 285, 290, 305, 306, 312, 319, 323, 326, 339], "820": [313, 315, 347], "824": 323, "826": 330, "82mb": 319, "83": [290, 306, 312, 318, 319, 323, 337, 339], "8307932": [195, 204], "8343": 293, "8380": 171, "8395": 293, "84": [279, 290, 294, 306, 319, 323], "8405": 185, "843": 337, "84499": 365, "8457": 195, "8477": 293, "848833121419835": 295, "849": 295, "84it": 285, "85": [234, 276, 279, 290, 295, 305, 306, 312, 319, 323, 339], "856": 337, "8567": 171, "859": 295, "85it": [283, 306], "86": [279, 290, 306, 319, 320, 323, 338, 339], "8622": 174, "864": 339, "865": 279, "8652135153100127": 279, "87": [279, 290, 306, 310, 312, 318, 319, 323, 324, 326, 339], "872": 323, "876": 329, "876023864746095": 329, "877": [334, 341, 347], "88": [279, 290, 305, 306, 310, 312, 319, 320, 323, 324, 329], "881": 330, "8814043693576259": 330, "882": [290, 298, 347], "887": 323, "8872030258178711": 323, "88m": [279, 290, 305, 319], "89": [290, 306, 319, 323, 339], "8986": 121, "8994": 227, "899650573730469": [295, 338], "8a": 199, "8m": [279, 290, 295, 305, 312, 319, 323, 326, 338, 339], "8mb": [279, 290, 294, 305, 312, 319, 325, 326], "8mib": [301, 323], "8x64x64": [221, 222, 229], "9": [15, 43, 47, 48, 89, 108, 172, 218, 223, 279, 282, 283, 289, 290, 294, 295, 296, 302, 305, 306, 312, 317, 318, 319, 320, 323, 324, 326, 328, 330, 335, 336, 337, 338, 339], "90": [22, 86, 247, 251, 279, 282, 290, 293, 296, 300, 306, 312, 317, 318, 319, 323, 324, 325, 339], "900": [92, 295, 325, 338], "9000": 121, "9002": 195, "902": [290, 312], "902324676513672": 312, "9026750869443771": 283, "903": 283, "904505920410156": 326, "905": 326, "908": 295, "90it": 279, "90m": 324, "91": [279, 290, 295, 305, 306, 312, 317, 319, 323, 338], "9127841": 187, "913": [338, 341, 347], "91m": [328, 335], "92": [279, 290, 306, 319, 323, 326, 339], "921": 295, "921340942382812": 295, "925": 337, "927": 322, "93": [279, 290, 306, 312, 318, 319, 323], "9332": 160, "9360": 195, "9387": 293, "93it": 306, "93mib": 323, "94": [285, 290, 305, 306, 319, 323, 339], "946": [315, 323, 332, 347], "9493": 195, "94it": 306, "95": [202, 279, 290, 306, 312, 319, 323, 339], "952": 334, "9531": 293, "9547": 365, "955k": 294, "9577798": 40, "96": [290, 291, 295, 305, 306, 312, 319, 323, 326], "9605e": 352, "9648": 293, "967": [327, 332, 347], "96mb": 319, "97": [279, 290, 306, 311, 318, 319, 320, 323, 338, 339], "972": 337, "973": 325, "9793": 195, "98": [290, 294, 305, 306, 312, 319, 323, 339], "980697631835938": 279, "98084411621094": 330, "981": [279, 330], "9860": 166, "9866807773844393": 279, "987": 279, "9897": 195, "98it": 316, "99": [99, 279, 285, 290, 305, 306, 310, 312, 319, 323, 337, 339], "990": [305, 308, 347], "992": 337, "996": 339, "9971": 195, "999": 290, "9999": [45, 367], "99e": 302, "99it": 279, "99mib": 323, "9k": [306, 328, 335], "9m": [279, 290, 295, 305, 312, 319, 323, 326, 338, 339], "9mb": [279, 294, 306, 319, 326, 329], "9mib": [323, 339], "A": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 33, 35, 40, 43, 47, 48, 49, 72, 79, 81, 82, 92, 94, 98, 99, 103, 108, 114, 117, 118, 120, 129, 145, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 195, 198, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 217, 219, 221, 222, 224, 225, 227, 228, 229, 233, 235, 239, 240, 241, 243, 257, 263, 265, 267, 272, 276, 283, 288, 291, 294, 295, 297, 298, 299, 300, 301, 302, 305, 306, 310, 311, 312, 313, 316, 318, 319, 326, 333, 335, 336, 337, 338, 345, 347, 348, 349, 351, 353, 354, 355, 356, 358, 359, 360, 361, 363, 365, 369, 370], "And": [95, 102], "As": [112, 136, 142, 170, 261, 276, 279, 300, 305, 306, 309, 311, 318, 319, 323, 324, 325, 326], "At": [27, 39, 42, 75, 95], "By": [12, 19, 26, 27, 29, 35, 36, 37, 38, 39, 42, 43, 46, 47, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 95, 121, 129, 134, 135, 137, 172, 177, 179, 238, 239, 240, 242, 245, 247, 248, 262, 282, 296, 367], "For": [16, 22, 43, 51, 53, 86, 95, 98, 99, 136, 142, 150, 156, 160, 173, 187, 193, 206, 209, 218, 221, 222, 229, 239, 240, 245, 247, 251, 256, 258, 276, 279, 282, 285, 288, 289, 294, 295, 296, 300, 301, 302, 306, 310, 311, 313, 318, 319, 323, 324, 328, 334, 335, 336, 338, 339, 359, 360, 365, 367, 368, 369, 370], "If": [12, 13, 14, 15, 17, 18, 19, 21, 24, 25, 26, 27, 36, 37, 43, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 79, 80, 82, 83, 86, 87, 92, 96, 97, 103, 108, 116, 119, 129, 130, 135, 138, 142, 143, 144, 145, 146, 153, 154, 158, 159, 160, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 192, 193, 194, 195, 197, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 226, 227, 238, 239, 240, 241, 243, 251, 257, 258, 259, 264, 265, 267, 270, 272, 276, 288, 291, 306, 326, 335, 336, 338, 343, 344, 353, 358, 361, 369, 370], "In": [12, 16, 19, 20, 26, 39, 69, 72, 82, 99, 106, 113, 120, 145, 160, 161, 172, 188, 195, 276, 279, 282, 283, 286, 287, 288, 289, 290, 292, 294, 295, 300, 301, 302, 305, 306, 309, 310, 311, 312, 316, 317, 318, 319, 320, 323, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339, 348, 357, 360, 363, 366, 367, 368, 369], "It": [12, 13, 19, 25, 26, 27, 29, 39, 50, 65, 66, 74, 82, 83, 89, 101, 103, 104, 124, 130, 156, 158, 159, 165, 172, 173, 177, 179, 188, 189, 192, 193, 199, 200, 234, 243, 260, 282, 289, 293, 301, 302, 306, 323, 325, 338, 349, 350, 353, 357, 363], "No": [69, 84, 116, 174, 223, 251, 276, 357, 358, 360, 366, 370], "On": 306, "One": [282, 319, 335], "The": [12, 13, 14, 15, 16, 19, 20, 21, 23, 24, 25, 26, 27, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 56, 65, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 110, 112, 113, 114, 116, 117, 119, 121, 122, 128, 129, 130, 133, 134, 136, 139, 147, 148, 149, 150, 151, 152, 158, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 183, 184, 186, 187, 188, 190, 191, 193, 194, 195, 198, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 219, 220, 221, 222, 224, 227, 228, 229, 230, 233, 234, 235, 236, 238, 239, 240, 241, 243, 245, 251, 254, 256, 260, 267, 269, 270, 271, 279, 282, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 300, 301, 302, 306, 309, 310, 311, 312, 313, 316, 317, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 343, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 369, 370], "Their": 337, "Then": [86, 176, 202, 282, 306, 323], "There": [15, 19, 20, 126, 127, 184, 276, 319, 329, 330, 355, 370], "These": [9, 12, 136, 195, 244, 252, 253, 255, 257, 279, 292, 294, 296, 324, 335, 336, 366, 370], "To": [16, 20, 26, 27, 39, 40, 43, 65, 68, 70, 95, 136, 216, 226, 251, 272, 279, 282, 289, 292, 305, 318, 319, 323, 328, 334, 338, 339, 357, 367], "With": [286, 290, 319], "_": [20, 33, 36, 37, 54, 55, 56, 57, 58, 86, 98, 99, 108, 114, 118, 119, 120, 121, 122, 123, 124, 125, 129, 132, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 147, 149, 151, 152, 162, 224, 235, 236, 276, 279, 290, 300, 301, 302, 306, 310, 318, 319, 323, 326, 334, 335, 336, 338, 339, 342, 352, 355, 359, 360], "_0": 319, "_1": [108, 117, 120, 122, 123, 300, 335, 360, 367], "_2": [30, 33, 40, 47, 48, 49, 50, 98, 99, 108, 110, 117, 118, 119, 120, 121, 122, 124, 125, 141, 195, 239, 240, 276, 279, 283, 300, 301, 302, 319, 326, 329, 330, 335, 336, 338, 355, 360, 367], "_4": 296, "__add__": [227, 251, 260], "__class__": 324, "__getitem__": 19, "__init__": [51, 53, 54, 55, 56, 57, 58, 238, 276, 283, 286, 291, 310, 312, 316, 337], "__iter__": 286, "__mul__": [171, 172, 179, 251, 260], "__name__": 324, "__neg__": 260, "__sub__": 260, "__truediv__": 260, "_c": [47, 192, 227, 285, 292, 320], "_f": [129, 257, 363], "_future_warn": [294, 323], "_g": [257, 363], "_get_param": 251, "_i": [44, 68, 170, 367], "_k": 279, "_m": 43, "_n": [103, 104], "_p": [62, 367], "_t": [235, 236, 318, 319], "_transform": 251, "_vf": 296, "_x": [114, 139, 172, 179], "_z": [279, 355], "a_": [36, 37, 160, 172, 178, 179, 326], "a_1": [36, 38, 43, 171, 172, 179, 191, 233, 327, 328, 353], "a_2": [36, 38, 43, 171, 172, 179, 191, 233, 327, 328, 353], "a_a_adjoint": [162, 172], "a_adjoint": [12, 108, 117, 158, 159, 160, 162, 165, 166, 170, 172, 176, 183, 184, 186, 189, 190, 195, 198, 241, 276, 285, 288, 291, 292, 294, 301, 302, 310, 311, 313, 316, 317, 318, 320, 323, 334, 335, 336, 338, 339, 351, 353], "a_adjoint_a": [162, 172], "a_dagg": [12, 47, 160, 162, 166, 169, 170, 172, 177, 178, 179, 187, 195, 241, 276, 287, 290, 291, 292, 294, 306, 328, 337, 353], "a_forward": [108, 117], "a_g": 37, "a_i": [139, 190, 233], "a_n": [191, 233], "a_t": [235, 319], "a_vjp": [114, 139, 172, 178, 179], "aa": [162, 172], "ab": [29, 30, 33, 37, 47, 48, 83, 86, 90, 91, 160, 165, 188, 234, 235, 236, 239, 240, 245, 254, 282, 289, 293, 317, 318, 320, 330], "aberr": [282, 289], "abl": [244, 286, 318, 319], "about": [19, 94, 276, 290, 329, 357, 365, 366], "about_mapstyle_vs_iter": 286, "abov": [22, 45, 86, 108, 145, 166, 174, 176, 186, 272, 276, 279, 318, 324, 353, 354], "abs_angl": [105, 290], "absenc": [133, 134], "absolut": [63, 97, 105, 156, 157, 172, 179], "abstract": [47, 48, 49, 62, 169, 187], "abund": 170, "abus": 129, "ac": [17, 323], "acar": [43, 223], "acceler": [76, 108, 117, 166, 174, 176, 186, 207, 210, 217, 221, 222, 229, 239, 244, 256, 292, 316, 323, 325, 361], "accept": [9, 105, 251, 370], "access": [16, 19, 20, 24, 25, 286, 324, 353], "accord": [40, 75, 163, 183, 188, 217, 218, 221, 222, 223, 224, 229, 366], "accordingli": [84, 116, 369], "account": [79, 316, 343, 366], "accur": 282, "achiev": [40, 108, 244, 328], "acknowledg": 343, "acorss": 170, "acquir": [19, 290], "acquisit": [172, 179, 188, 238, 239, 240, 325, 348, 353], "across": [12, 26, 101, 108, 188, 194, 217, 221, 222, 229, 232, 269, 288, 323, 335, 336, 338, 339, 352, 365, 366, 370], "act": [100, 108, 173, 251, 285, 329, 353, 360], "act_mod": [79, 87], "action": [86, 252, 253, 254, 255], "activ": [45, 79, 83, 87, 93, 219, 220, 282, 289, 366], "actual": [39, 129, 319, 323], "ad": [40, 168, 173, 180, 181, 196, 197, 227, 299, 318, 349, 355], "adam": [80, 243, 279, 285, 294, 295, 306, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "adapt": [12, 27, 28, 34, 38, 39, 40, 42, 43, 44, 47, 48, 49, 75, 82, 93, 95, 97, 98, 99, 100, 101, 108, 113, 139, 195, 204, 223, 284, 323, 328, 350, 355, 356, 357, 366], "adapt_model": [27, 28, 34, 39, 40, 42, 43, 323, 328], "add": [12, 40, 95, 97, 167, 168, 172, 173, 179, 180, 181, 194, 196, 197, 222, 260, 276, 283, 284, 300, 301, 309, 312, 318, 334, 353], "add_safe_glob": [306, 323, 325, 338], "addit": [12, 30, 40, 79, 82, 87, 95, 108, 124, 143, 153, 154, 160, 172, 192, 193, 195, 243, 258, 259, 279, 290, 319, 360, 366], "addition": [243, 248, 319], "address": 343, "adj_project": 276, "adjnufftobj": 276, "adjoint": [72, 98, 99, 108, 116, 140, 158, 159, 160, 161, 162, 165, 166, 172, 176, 183, 184, 186, 189, 190, 195, 198, 205, 206, 207, 209, 210, 213, 214, 276, 291, 294, 301, 302, 313, 337, 338, 349, 351, 352, 353, 356], "adjoint_funct": [172, 351], "adjointness_test": [172, 291], "adjust": [162, 222, 283], "adler": 337, "admit": 300, "admm": [117, 143, 144, 257, 258, 259, 283, 345, 360], "adv": [54, 55, 56, 57, 58, 279, 355], "advanc": [12, 75, 278, 282, 289, 347, 366], "advantag": 316, "adversari": [12, 18, 25, 26, 34, 46, 51, 52, 53, 54, 55, 56, 57, 58, 75, 77, 78, 81, 85, 93, 94, 102, 158, 172, 179, 225, 227, 243, 262, 263, 281, 347, 348], "adversarial_loss": [51, 53], "adversarialoptim": [243, 279], "adversarialschedul": 279, "adversarialtrain": [279, 355], "advis": 319, "af_": 285, "aff": [252, 324], "affect": [26, 118, 172, 179, 348, 353], "affin": [244, 245, 296, 324, 370], "after": [19, 45, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 95, 97, 117, 134, 183, 184, 238, 243, 251, 271, 272, 276, 279, 288, 293, 300, 306, 316, 328, 343], "afterward": [76, 78, 88, 90, 91, 92, 101, 203, 204, 337], "ag_": 80, "again": [13, 14, 15, 17, 18, 21, 24, 25], "against": 19, "aghabigl": 276, "agnost": [100, 357], "ahead": 243, "ai": [12, 70, 276], "aim": [170, 276, 343, 355, 363], "airi": [276, 282, 289], "al": [43, 54, 55, 56, 57, 58, 69, 74, 75, 77, 78, 80, 82, 85, 92, 93, 98, 102, 222, 223, 244, 245, 254, 276, 279, 283, 285, 294, 296, 301, 309, 312, 318, 319, 323, 324, 364], "algebra": 316, "algorithm": [5, 7, 10, 12, 13, 18, 24, 26, 34, 46, 75, 81, 83, 89, 90, 91, 98, 99, 104, 108, 109, 112, 113, 114, 117, 118, 120, 124, 129, 132, 133, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 165, 168, 172, 179, 181, 188, 194, 195, 201, 222, 235, 236, 237, 238, 239, 240, 241, 256, 257, 258, 259, 262, 263, 265, 267, 268, 271, 276, 288, 290, 291, 293, 299, 314, 315, 321, 322, 338, 340, 341, 345, 347, 348, 358, 365], "alia": [15, 16, 20, 242], "alias": 202, "align": [144, 145, 146, 147, 148, 149, 150, 151, 152, 201, 235, 236, 257, 300, 310, 318, 319, 338, 359, 363], "all": [9, 12, 13, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 34, 36, 43, 63, 64, 65, 76, 78, 79, 80, 84, 86, 88, 90, 91, 92, 95, 101, 103, 108, 115, 116, 129, 131, 142, 143, 171, 175, 193, 195, 203, 204, 212, 216, 218, 223, 226, 244, 246, 251, 257, 258, 259, 269, 272, 276, 282, 283, 284, 285, 286, 290, 295, 296, 299, 300, 309, 310, 311, 312, 313, 319, 323, 324, 325, 326, 327, 329, 330, 334, 335, 336, 338, 339, 343, 347, 348, 353, 354, 357, 358, 360, 361, 364, 365, 366, 367, 368, 369, 370], "allclos": [172, 198, 290, 353], "alloc": 350, "allow": [19, 99, 159, 171, 188, 243, 244, 260, 306, 323, 325, 338, 350, 370], "allowlist": [306, 323, 325, 338], "almost": 218, "alon": [29, 358, 366], "along": [82, 91, 108, 117, 166, 201, 241, 245, 251, 252, 253, 254, 255, 260, 276, 283, 301, 302, 310, 311, 313, 337], "alongsid": 243, "alparon": 69, "alpha": [40, 60, 69, 82, 87, 235, 236, 238, 239, 240, 316, 318, 319, 320, 367], "alpha_j": 319, "alpha_k": [147, 360], "alpha_t": [82, 319], "alphas_cumprod": 318, "alreadi": [13, 14, 15, 17, 21, 24, 25, 26, 101, 313, 329], "also": [12, 18, 26, 27, 36, 39, 43, 47, 48, 65, 79, 82, 83, 87, 96, 97, 103, 122, 136, 138, 159, 162, 166, 171, 172, 176, 186, 192, 193, 194, 212, 243, 251, 279, 282, 289, 290, 291, 292, 294, 296, 313, 317, 319, 323, 328, 329, 330, 335, 336, 343, 351, 353, 354, 359, 360, 361, 363, 364, 365, 366, 367, 369, 370], "altern": [12, 31, 32, 129, 144, 166, 171, 186, 279, 286, 309, 313, 318, 319, 355, 360], "although": [43, 76, 78, 88, 90, 91, 92, 101, 136, 203, 204], "altogeth": 328, "alwai": [60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 188, 223, 251, 319, 360], "amazonaw": [328, 335], "ambientgan": [57, 58, 75, 355], "among": [15, 20, 142, 282, 286, 301, 309, 334, 337, 360, 368], "amount": [170, 240, 250, 251, 313, 318, 349], "amplitud": [106, 107, 197, 220, 289], "amplitudeloss": 360, "an": [12, 19, 20, 27, 30, 39, 47, 48, 49, 65, 75, 76, 79, 80, 82, 83, 86, 87, 93, 94, 96, 98, 99, 103, 104, 108, 114, 115, 124, 129, 130, 133, 135, 136, 142, 143, 145, 147, 150, 155, 160, 162, 166, 168, 170, 171, 172, 174, 176, 178, 179, 183, 185, 188, 192, 193, 201, 218, 220, 223, 235, 236, 238, 239, 240, 241, 243, 245, 248, 251, 254, 256, 257, 258, 259, 261, 263, 264, 265, 267, 270, 272, 276, 279, 282, 283, 284, 286, 288, 290, 291, 292, 294, 295, 296, 297, 298, 299, 305, 306, 310, 311, 312, 316, 317, 319, 320, 323, 324, 325, 326, 329, 330, 335, 336, 338, 342, 343, 344, 347, 348, 350, 352, 353, 355, 356, 358, 360, 363, 365, 366, 367, 370], "analog": 243, "analogi": 170, "analysi": [342, 350, 352], "analyz": [170, 350], "ancestr": 319, "anderson": [108, 117, 256], "anderson_acceler": [108, 117, 334], "anderson_acceleration_backward": [256, 334], "anderson_acceleration_step": 117, "andrew": 345, "angap": 289, "angl": [12, 23, 71, 84, 114, 116, 126, 130, 131, 135, 136, 162, 164, 172, 173, 179, 195, 197, 201, 203, 204, 245, 247, 252, 253, 254, 255, 267, 282, 289, 290, 292, 293, 299, 305, 307, 308, 313, 328, 337, 347, 364, 370], "angular": 289, "ani": [12, 26, 27, 29, 35, 36, 37, 38, 39, 43, 46, 47, 52, 63, 64, 75, 86, 88, 130, 145, 166, 172, 174, 176, 179, 186, 194, 195, 204, 222, 229, 241, 242, 251, 256, 257, 279, 284, 286, 290, 291, 294, 296, 306, 323, 325, 338, 343, 344, 354, 355, 357, 358, 359, 363, 366], "anim": [272, 323, 350], "anim_kwarg": 272, "anim_writ": 272, "anisotrop": 201, "anneal": 42, "annoi": 194, "annot": [20, 365], "annual": 342, "anoth": 27, "ansi": 282, "ansi_standard_indic": 282, "anti": 202, "antiproportion": 173, "anyth": 323, "ap": 97, "apertur": [220, 289], "appear": [276, 353], "append": [260, 290, 293, 318, 319], "appli": [15, 18, 28, 39, 43, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 81, 82, 86, 88, 89, 92, 94, 96, 98, 99, 102, 103, 105, 108, 138, 140, 142, 158, 159, 162, 165, 166, 170, 171, 172, 174, 176, 177, 178, 183, 184, 186, 187, 188, 189, 191, 194, 203, 207, 210, 218, 223, 235, 245, 252, 253, 254, 255, 276, 279, 282, 285, 294, 300, 301, 302, 306, 310, 316, 317, 318, 319, 320, 328, 335, 339, 352, 355, 356, 358, 360], "applic": [98, 99, 183, 276, 294, 352, 353], "apply_nois": [29, 37], "approach": [72, 75, 170, 276, 296, 326, 337, 368], "appropri": [27, 39, 43, 61, 66, 103, 124, 318], "approx": [33, 42, 195, 316, 319, 320, 349, 355], "approxim": [19, 40, 42, 47, 48, 49, 86, 103, 116, 138, 142, 195, 215, 218, 223, 235, 239, 276, 289, 292, 306, 313, 316, 320, 336, 361, 364], "ar": [3, 12, 15, 16, 19, 20, 22, 26, 27, 28, 35, 36, 37, 39, 40, 42, 43, 45, 48, 52, 72, 75, 80, 81, 82, 83, 86, 90, 91, 94, 95, 99, 102, 103, 104, 105, 117, 129, 133, 134, 142, 144, 145, 146, 149, 158, 160, 161, 162, 165, 166, 169, 171, 172, 174, 176, 177, 179, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 201, 203, 204, 208, 212, 215, 216, 218, 219, 221, 222, 223, 226, 227, 228, 233, 235, 238, 239, 240, 241, 243, 245, 247, 251, 252, 253, 255, 257, 264, 265, 267, 269, 270, 271, 272, 276, 279, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 323, 324, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339, 343, 346, 348, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370], "arang": [27, 39, 203, 204, 323], "arbitrari": [103, 251, 290, 306, 318, 319, 323, 325, 338, 365], "architectur": [10, 72, 73, 76, 79, 83, 87, 92, 95, 96, 97, 102, 259, 261, 279, 285, 288, 295, 318, 323, 325, 327, 328, 329, 330, 334, 338, 339, 345, 348, 355, 357, 358], "archiv": 19, "aren": [61, 66, 251], "arg": [36, 51, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 78, 84, 86, 92, 98, 99, 103, 104, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 142, 145, 146, 147, 148, 150, 152, 155, 172, 179, 217, 218, 221, 222, 223, 229, 242, 244, 246, 247, 248, 249, 250, 251, 256, 257, 260, 272, 276, 283, 300, 306, 312, 336, 337, 338, 359, 360], "argentina": [285, 316, 317, 320], "argmin": [82, 118, 120, 122, 124, 125, 135, 236, 279, 318, 355], "args_model": 30, "argument": [21, 22, 30, 46, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 84, 95, 116, 117, 126, 127, 143, 153, 154, 194, 211, 242, 243, 251, 257, 258, 259, 286, 296, 365, 367], "aris": 306, "arithmet": [251, 296], "around": [201, 287, 342, 350], "arrai": [20, 82, 182, 183, 232, 234, 236, 260, 276, 292, 318], "array_lik": [182, 183], "arridg": 337, "arrow": 13, "art": [276, 345], "artefact": 364, "artifact": [12, 27, 72, 97, 195, 204, 241, 242, 323, 326, 348, 355, 357, 358], "artifact2artifact": [12, 27, 34, 39, 43, 162, 166, 172, 174, 175, 179, 186, 194, 216, 217, 218, 222, 227, 229, 261, 263, 267, 272, 299, 331, 332, 347], "artifact2artifactloss": [43, 216, 323, 366], "artifact2artifactsplittingmaskgener": 354, "artifact_remov": 338, "artifactremov": [44, 81, 160, 172, 195, 295, 326, 327, 328, 329, 330, 356, 368], "arxiv": [29, 30, 33, 37, 47, 48, 72, 83, 86, 90, 91, 160, 165, 225, 234, 235, 236, 239, 240, 245, 254, 317, 330], "asarrai": 318, "ascent": [47, 48], "ask": 343, "assert": [276, 290, 353], "assess": 69, "assign": [26, 177, 323, 354], "associ": [19, 26, 27, 29, 34, 35, 36, 37, 38, 40, 42, 43, 47, 48, 49, 51, 53, 98, 99, 108, 117, 124, 135, 140, 183, 212, 238, 276, 287, 292, 318, 335, 364, 365, 369], "assum": [12, 29, 36, 55, 56, 58, 82, 101, 119, 159, 170, 194, 195, 203, 204, 239, 240, 251, 294, 318, 319, 323, 366], "assumpt": [145, 235, 366], "astigmat": 282, "at_next": 319, "atan": 313, "aten": [287, 296], "atmospher": 169, "attempt": [251, 263, 358], "attent": [82, 95, 97, 313], "attn_drop_r": 97, "attr": 296, "attribut": [65, 75, 144, 145, 146, 168, 173, 180, 181, 196, 197, 271, 284, 318, 354, 368], "atu": 91, "au": [118, 120, 124], "augment": [9, 23, 26, 29, 34, 37, 81, 86, 89, 168, 194, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 265, 267, 272, 297, 298, 299, 347, 348, 370], "author": [40, 82, 97, 318, 319, 337, 364], "authorship": 343, "auto_exampl": [278, 281, 298, 304, 308, 315, 322, 332, 333, 341], "auto_examples_jupyt": 299, "auto_examples_python": 299, "autocalibr": 223, "autoencod": [27, 39, 357], "autograd": [319, 351], "automat": [135, 136, 137, 172, 179, 251, 283, 289, 290, 313, 319, 343, 351, 364], "aux": 108, "aux_x": 319, "auxiliari": [98, 108, 117], "avail": [72, 79, 82, 83, 86, 87, 96, 97, 103, 104, 118, 120, 142, 172, 215, 276, 282, 286, 293, 294, 295, 300, 325, 338, 350, 352, 354, 355, 357, 359, 363, 364, 365], "averag": [12, 15, 39, 40, 43, 79, 86, 87, 101, 126, 127, 158, 159, 161, 172, 173, 177, 194, 241, 251, 291, 296, 300, 317, 320, 323, 328, 353, 357, 367, 370], "averagemet": [12, 367], "avg": [306, 369], "avg16": 15, "avg2": 15, "avg4": 15, "avg8": 15, "avgpool": [79, 87], "avoid": [26, 80, 107, 131, 238, 243, 285, 286, 316], "awar": 357, "award": 342, "awgn": 319, "ax": [108, 116, 117, 120, 124, 145, 156, 160, 162, 172, 195, 201, 246, 267, 276, 283, 301, 302, 305, 306, 320, 335, 336, 338, 352, 361], "ax_": 316, "ax_cur": 90, "ax_k": [335, 336], "axi": [121, 195, 204, 245, 246, 252, 300, 318], "axial": 289, "b": [27, 39, 47, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 89, 92, 97, 100, 101, 106, 107, 115, 118, 119, 122, 125, 127, 152, 156, 158, 161, 166, 170, 174, 175, 176, 178, 182, 183, 185, 186, 187, 189, 193, 194, 198, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 221, 226, 228, 229, 238, 239, 240, 251, 267, 270, 272, 279, 285, 287, 288, 289, 290, 293, 294, 305, 306, 310, 312, 316, 317, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 335, 336, 338, 354, 357, 360, 367, 370], "b1hw": 69, "b4": [285, 316, 317, 320], "b_": [183, 185, 187, 287], "b_1": 183, "b_2": 183, "b_dagger": [178, 193], "b_i": [47, 106, 360], "b_l": 183, "b_t": [235, 319], "back": [12, 26, 72, 110, 195, 258, 259, 276, 318, 335, 336], "backbon": [42, 75, 92, 285, 295, 335, 363, 367, 368], "backbone_gener": 75, "backbone_net": [72, 92, 100, 101, 326], "backend": 276, "background": [133, 134, 187, 287], "backproject": [91, 276, 292, 306, 334, 335, 336, 337, 339], "backpropag": [30, 33, 74, 130, 319, 348, 361], "backtrack": [108, 283, 302, 312], "backtrak": 283, "backward": [12, 55, 56, 58, 118, 120, 195, 243, 256, 283, 306, 345, 363, 369], "balanc": [355, 367], "ball": [118, 119, 120, 338], "band": [142, 170, 177, 294, 335, 367], "bar": [12, 26, 75, 236, 241, 295, 319, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339], "barbara": [282, 310], "bare": 19, "base": [1, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 266, 273, 274, 275, 279, 285, 305, 316, 319, 323, 337, 345, 352, 355, 357, 358, 359, 360, 361, 365, 366, 367], "base_dir": [279, 283, 284, 288, 290, 295, 300, 301, 302, 309, 310, 311, 312, 313, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "baseclass": 65, "basedeq": [258, 363], "baselin": [279, 328], "baselossschedul": [31, 32, 41, 45, 366], "basemaskgener": [221, 222, 229], "baseoptim": [113, 143, 257, 259, 309, 312, 313, 360], "baseunfold": [256, 258, 259, 363], "bash": 263, "basi": [288, 300, 335, 338, 342], "basic": [158, 159, 170, 172, 176, 243, 245, 292, 298, 345, 347, 352, 353], "basplib": 276, "batch": [12, 20, 23, 26, 27, 34, 39, 42, 51, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 79, 80, 82, 83, 84, 93, 100, 102, 107, 115, 116, 119, 122, 125, 127, 130, 155, 166, 170, 171, 174, 186, 187, 194, 198, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 230, 241, 244, 245, 248, 251, 252, 253, 254, 255, 267, 269, 270, 284, 286, 301, 306, 309, 312, 325, 326, 334, 335, 336, 357, 367], "batch_dimens": 155, "batch_norm": [93, 102, 279, 295, 324], "batch_siz": [20, 26, 47, 48, 49, 50, 79, 84, 90, 91, 116, 171, 183, 194, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 279, 282, 283, 284, 286, 289, 295, 305, 306, 309, 312, 319, 323, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339, 353, 365], "batch_step": [216, 218, 223, 226], "batchnorm": 102, "batchnorm2d": 102, "batchwis": 251, "bay": 319, "bayer": [163, 292], "bayer_filt": 163, "bayesian": 320, "bch": 69, "beam": [195, 204], "becaus": [288, 338], "beck": 99, "been": [12, 13, 14, 17, 21, 24, 25, 26, 38, 117, 276, 279, 283, 284, 285, 294, 295, 309, 311, 312, 313, 318, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 338, 339], "befor": [26, 27, 28, 33, 34, 39, 40, 43, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 80, 97, 101, 117, 143, 165, 171, 174, 176, 181, 186, 251, 257, 258, 259, 271, 279, 318, 319, 338], "begin": [12, 108, 118, 119, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 172, 179, 183, 191, 199, 200, 201, 202, 233, 235, 236, 256, 257, 276, 300, 301, 302, 306, 310, 318, 319, 335, 338, 353, 359, 360, 363], "beginn": [77, 78], "behav": 98, "behavior": 19, "behaviour": [63, 64, 251], "behind": 19, "being": [12, 19, 134, 290, 318, 365], "below": [27, 39, 59, 65, 71, 171, 276, 282, 289, 343, 349, 358, 366], "benchmark": [13, 19, 22, 173, 294, 365], "benefit": [65, 244], "bergman": 311, "berkelei": [13, 365], "bernoulli": [48, 49, 171, 218, 329], "bernoullisplittingmaskgener": [43, 171, 223, 226, 323, 328, 354], "besid": 290, "bessel": 184, "best": [40, 43, 75, 290, 318, 319, 327, 328, 329, 330], "beta": [69, 84, 116, 117, 129, 133, 134, 144, 145, 146, 169, 202, 235, 236, 305, 318, 319, 337, 339, 360, 367], "beta_": 319, "beta_anderson_acc": [108, 117], "beta_anderson_acc_backward": 256, "beta_end": [82, 236, 318, 319], "beta_start": [82, 236, 318, 319], "beta_t": 319, "better": [19, 40, 43, 65, 69, 70, 290, 295, 300, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339, 358, 367], "between": [12, 14, 15, 16, 19, 21, 29, 30, 31, 32, 41, 43, 54, 55, 57, 58, 60, 61, 71, 73, 99, 102, 108, 114, 115, 129, 135, 172, 178, 179, 184, 190, 195, 204, 220, 228, 236, 238, 240, 247, 267, 270, 276, 279, 283, 285, 293, 306, 309, 312, 313, 318, 319, 349, 355, 359, 360, 367, 370], "beyond": [296, 324, 325], "bfbatchnorm2d": 102, "bia": [83, 90, 91, 93, 95, 97, 102, 295, 325, 326, 327, 329, 334, 335, 336, 337, 338, 339, 355], "bias": [12, 83, 102], "biasfre": [95, 102], "bicub": [165, 177, 199, 248, 312], "bicubic_filt": 354, "bigcup_t": 186, "bigger": [43, 160, 188, 267, 270], "bilinear": [165, 177, 200, 245, 252, 253, 254, 255], "bilinear_filt": 354, "bin": [187, 211, 212, 287], "binari": [162, 166, 171, 174, 176, 186, 188, 218, 223, 292, 326], "biolog": 15, "birdcag": 176, "bkg": [133, 134], "bkg_level": 287, "black": [158, 159, 165, 172, 343, 352], "blank": [216, 226], "blind": [54, 55, 93, 96, 102, 279, 353, 365], "bling": 95, "blob": [306, 323, 325, 338], "block": [52, 79, 87, 90, 91, 95, 97, 130, 223, 267, 357, 363, 368], "blue": 287, "blur": [19, 159, 162, 165, 172, 177, 179, 189, 199, 200, 201, 202, 205, 208, 215, 219, 224, 225, 227, 228, 265, 267, 279, 289, 297, 298, 299, 302, 311, 312, 316, 318, 334, 339, 347, 353, 354], "blur_col": 289, "blur_confoc": 289, "blur_gener": 279, "blurfft": [282, 283, 301, 309, 311, 316, 334, 353, 354], "blurri": [19, 365], "blurry_shot": 19, "bm3d": 357, "bmatrix": [172, 179, 191, 233, 353], "bologna": 342, "bool": [12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 33, 37, 39, 43, 47, 48, 52, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 80, 82, 83, 86, 87, 88, 90, 91, 93, 95, 96, 97, 98, 99, 102, 108, 117, 129, 131, 133, 134, 142, 143, 153, 154, 155, 160, 166, 171, 172, 174, 175, 176, 177, 181, 183, 184, 185, 186, 188, 193, 195, 203, 204, 205, 206, 207, 208, 209, 210, 212, 216, 218, 223, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 247, 251, 256, 257, 258, 259, 263, 264, 265, 267, 268, 269, 270, 271, 272, 276], "boolean": [16, 89, 130, 238], "bora": [54, 55, 57, 58, 75, 279], "borrow": 212, "both": [12, 16, 19, 188, 195, 223, 225, 243, 279, 289, 306, 313, 328, 335, 336, 337, 353, 360, 369], "bottom": [16, 269], "bound": [211, 212], "boundari": [131, 228, 276, 282], "box": [238, 239, 240, 316], "brain": [15, 16, 300, 365], "brainweb": 300, "brainweb_t1_icbm_1mm_subject_0": [289, 300], "breath": [27, 39, 216, 226], "bredi": 98, "bregman": [110, 111, 112, 128, 135, 143, 150, 258, 259, 311], "bregman_icnn": 360, "bregman_potenti": [135, 143, 150, 258, 259, 311], "bregman_prox": 135, "bregmanl2": [150, 360], "briefli": 364, "briggs_weight": 276, "bright": 276, "broad": 95, "broadcast": [171, 205, 206, 208, 209, 213, 214], "brovei": [177, 294], "bsd68": 13, "bsds500": [84, 116, 305, 364], "buffer_s": 286, "bug": 344, "build": [23, 52, 81, 89, 114, 124, 131, 135, 136, 138, 143, 159, 162, 168, 172, 179, 231, 238, 240, 258, 259, 263, 265, 267, 276, 284, 296, 299, 310, 320, 321, 322, 345, 347, 353, 357, 363, 368], "build_prob": [182, 183, 293, 354], "builder": 363, "built": [88, 130], "burg": [112, 311], "burgentropi": [311, 360], "burn": [238, 239, 240], "burnin": [237, 316], "burnin_ratio": [237, 238, 239, 240, 316], "butterfli": [311, 318, 319], "bx": [178, 182], "byaman14": 223, "bytesio": 306, "bz": 157, "c": [22, 23, 27, 39, 48, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 80, 82, 92, 95, 97, 100, 101, 119, 158, 159, 160, 161, 162, 163, 166, 170, 171, 174, 175, 176, 177, 183, 184, 185, 186, 188, 189, 192, 193, 194, 198, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 221, 222, 223, 226, 228, 229, 251, 267, 270, 272, 276, 289, 292, 300, 323, 336, 338, 353, 357, 365, 367, 370], "c2": 319, "c_": 142, "c_1": 367, "c_2": 367, "cach": [16, 279, 288, 290, 294, 305, 306, 309, 310, 312, 319, 320, 323, 324, 325, 326, 327, 328, 329], "cal": 172, "cal_psnr": 290, "calcul": [40, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 110, 112, 114, 121, 123, 128, 135, 137, 139, 141, 174, 176, 186, 194, 251, 267, 272, 293, 316, 367], "call": [12, 19, 28, 32, 34, 41, 46, 51, 53, 76, 78, 86, 88, 90, 91, 92, 99, 101, 114, 117, 129, 139, 171, 172, 198, 203, 204, 216, 241, 251, 267, 272, 282, 289, 290, 296, 353, 357, 361, 363], "callabl": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 47, 63, 64, 65, 71, 86, 109, 114, 115, 131, 132, 135, 136, 137, 143, 156, 157, 162, 172, 179, 191, 194, 198, 227, 237, 251, 258, 259], "camera": [19, 170, 188, 252, 253, 254, 255, 310, 324, 364, 370], "cameraman": [346, 359], "can": [1, 9, 12, 16, 19, 22, 26, 27, 29, 35, 36, 37, 38, 39, 40, 43, 46, 47, 48, 49, 52, 65, 73, 74, 75, 79, 80, 81, 82, 83, 86, 87, 88, 96, 97, 100, 101, 102, 103, 104, 105, 108, 117, 121, 124, 130, 138, 142, 143, 160, 165, 166, 171, 172, 174, 176, 177, 178, 179, 184, 185, 186, 188, 189, 195, 198, 204, 205, 206, 207, 208, 209, 210, 213, 214, 217, 218, 221, 223, 227, 229, 234, 235, 238, 241, 242, 244, 256, 257, 258, 259, 262, 269, 271, 272, 276, 279, 282, 283, 284, 286, 288, 289, 290, 291, 292, 294, 295, 296, 299, 300, 301, 302, 309, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 343, 345, 346, 348, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370], "cancer": [20, 365], "cancerimagingarch": 20, "capabl": 194, "capac": 286, "capitol": [112, 311], "captur": [170, 172, 179, 348, 349, 353], "care": [76, 78, 88, 90, 91, 92, 101, 203, 204, 236, 316, 366], "carefulli": 318, "carlo": [27, 40, 43, 47, 48, 49, 86, 237, 238, 239, 240, 251, 296, 316, 320, 357, 358], "cartesian": [166, 174, 176, 186, 221, 222, 229, 292], "cascad": 222, "case": [26, 27, 39, 42, 68, 70, 72, 82, 106, 118, 119, 120, 129, 160, 172, 179, 188, 195, 199, 200, 202, 235, 252, 253, 254, 255, 276, 282, 284, 286, 287, 289, 300, 301, 306, 310, 319, 323, 325, 328, 335, 338, 357, 359, 360, 365, 368, 369], "cast": 18, "cat": [102, 287, 291, 292, 319], "caus": [19, 102], "caveat": [12, 319], "cbar": [267, 276], "cbsb68": 13, "cbsbd68": 13, "cbsd500": [334, 339], "cbsd68": [283, 292, 295, 338, 365], "cbsd_0010": [282, 292, 293, 305], "cc": 42, "cdot": [103, 104, 108, 114, 118, 138, 139, 142, 152, 170, 200, 202, 235, 236, 251, 279, 300, 318, 319, 348, 355, 360, 361, 363, 367], "celeba": [26, 365], "celeba_exampl": [61, 66, 296, 324], "cell": [15, 244], "center": [118, 119, 120, 158, 159, 165, 172, 175, 205, 207, 217, 221, 222, 223, 229, 338], "center_block": 223, "center_fract": [217, 221, 222, 229], "centercrop": [279, 283, 284, 295, 301, 302, 309, 312, 324, 334, 338, 339], "centr": 323, "certain": [19, 80, 251, 285, 286, 365], "cfloat": [160, 185, 193, 276], "cg": 156, "cgan": 355, "ch": 21, "chain": [114, 139, 237, 238, 239, 240, 251, 296, 358, 370], "challeng": [14, 16, 276, 323], "chambol": [12, 18, 26, 34, 46, 81, 98, 99, 103, 114, 118, 132, 135, 136, 143, 145, 147, 162, 171, 172, 179, 241, 257, 258, 259, 263, 288, 299, 337, 340, 341, 347, 360], "chang": [12, 108, 117, 158, 251, 282, 343, 369], "channel": [23, 43, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 76, 77, 78, 79, 82, 83, 84, 87, 88, 90, 91, 93, 95, 96, 97, 102, 116, 130, 160, 161, 163, 166, 170, 171, 174, 176, 185, 186, 187, 188, 192, 194, 205, 206, 207, 208, 209, 210, 217, 218, 219, 220, 221, 222, 223, 225, 229, 267, 270, 282, 284, 285, 287, 291, 292, 293, 300, 301, 305, 309, 312, 323, 334, 337, 364], "channelwis": [160, 185, 292], "character": [172, 179, 348, 353], "characteris": 279, "cheap": 103, "chebyshev": [239, 361], "check": [12, 13, 14, 15, 17, 21, 24, 25, 95, 117, 172, 174, 175, 176, 218, 243, 251, 276, 336, 338, 339, 343], "check_clip_grad": [12, 243], "check_clip_grad_d": 243, "check_conv_fn": 117, "check_dataset_exist": [13, 17, 22, 24, 25], "check_grad": 12, "check_input_rang": [61, 66], "check_iteration_fn": 117, "check_mask": [166, 174, 175, 176], "check_pixelwis": 218, "checkpoint": [12, 97, 279, 283, 288, 290, 294, 305, 306, 310, 312, 319, 320, 323, 324, 325, 326, 327, 328, 329], "checksum": 14, "chen": [296, 324, 345], "child": [136, 217, 221, 229, 256, 257, 360], "choic": [19, 47, 48, 49, 84, 113, 116, 305, 306, 313, 349, 355, 357, 360], "choos": [22, 27, 31, 32, 38, 41, 78, 82, 108, 117, 142, 163, 190, 205, 207, 208, 210, 283, 288, 292, 295, 306, 310, 318, 319, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339, 363], "choosen": 306, "chose": [301, 309, 334], "chosen": [12, 26, 40, 86, 97, 172, 173, 241, 305, 311, 313, 318, 334, 339, 359], "chung": 319, "chunk": [27, 216, 323], "chw": 68, "circ": [62, 171, 172, 179, 360], "circl": [195, 203, 204, 313, 337], "circular": [102, 158, 159, 165, 172, 177, 189, 195, 204, 205, 206, 207, 208, 209, 210, 215, 228, 249, 279, 282, 289, 352], "circular_pad": [102, 279, 324], "cirm": 342, "ckp_": 12, "ckp_10_demo_sur": 329, "ckp_50_demo_n2n": 327, "ckp_interv": [12, 325, 326], "ckpt": [279, 288, 294, 295, 311, 312, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "ckpt_dir": [288, 295, 311, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339], "ckpt_path": 72, "ckpt_pretrain": 12, "ckpt_state_dict": 288, "claim": 108, "clamp": [142, 276, 302, 318], "clamp_max": 142, "clamp_min": [142, 276], "class": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 266, 273, 274, 275, 276, 282, 283, 284, 286, 289, 290, 291, 292, 295, 300, 301, 302, 306, 309, 310, 313, 317, 318, 319, 320, 330, 334, 335, 336, 337, 338, 339, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 363, 365, 366, 367, 369], "classic": [177, 294, 348], "classif": 243, "classifi": [51, 53, 93, 155, 366, 367], "classmethod": 19, "clean": [15, 40, 160, 166, 171, 179, 195, 337, 339, 343, 355], "click": 20, "clip": [12, 181, 237, 238, 239, 240, 241, 243, 247, 267, 270, 290, 305, 306, 316, 319, 346, 359, 360], "clip_posit": 181, "clone": [260, 292, 300, 306, 311, 318, 319], "close": [40, 103, 104, 118, 119, 120, 126, 127, 160, 165, 172, 179, 195, 291, 300, 316, 317, 351, 353, 355, 358], "closer": [172, 234, 236, 290], "cm": [195, 204], "cmap": [267, 269, 270, 276, 300], "cnn": [113, 285, 309, 357], "co": [13, 17, 25, 201, 279, 286, 288, 289, 290, 294, 300, 305, 306, 310, 312, 319, 320, 323, 324, 325, 326, 327, 328, 329, 346, 359], "code": [12, 38, 68, 70, 82, 97, 98, 99, 117, 221, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 343, 351, 359, 360, 364, 368, 369], "coeff": [103, 219, 220, 282, 289], "coeff_col": 289, "coeffic": 103, "coeffici": [103, 104, 142, 161, 219, 220, 282, 289, 290, 292], "coil": [16, 166, 174, 176, 186, 323, 325], "coil_map": 176, "coincid": 289, "colab": 299, "coll": 289, "collabor": 74, "collat": 251, "collate_batch": 251, "collect": [2, 4, 20, 86, 251, 289, 323, 345, 353, 360, 363], "colon": 349, "color": [13, 84, 116, 163, 170, 177, 282, 283, 284, 290, 291, 292, 293, 295, 301, 302, 309, 310, 311, 312, 313, 334, 337, 338, 339, 364], "colorjitt": 296, "colormap": [267, 270, 276], "colour": [282, 291, 296], "column": [171, 222, 229, 267, 270, 335, 336], "com": [176, 299, 306, 323, 325, 328, 335, 338, 346], "combett": 300, "combin": [60, 170, 172, 179, 190, 191, 227, 228, 236, 294, 296, 318, 351, 368], "come": [109, 115, 135, 136, 172, 258, 259, 360], "command": [263, 343], "comment": [279, 323], "commerci": 15, "common": [142, 276, 285, 316, 317, 320, 334, 335, 339, 360, 370], "commonli": [24, 25, 117, 352], "commun": 343, "commut": 86, "compar": [12, 14, 19, 27, 52, 75, 216, 279, 316, 317, 320], "compare_no_learn": [12, 294], "comparison": [12, 19, 52, 241], "compat": [103, 294, 366, 368], "compens": 276, "compil": 22, "complet": 243, "complex": [18, 26, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 105, 142, 160, 166, 174, 175, 176, 184, 188, 267, 270, 276, 288, 290, 292, 293, 300, 365, 367], "complex64": [18, 176, 185, 193, 293], "complex_ab": [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "complex_denois": 357, "complex_dtyp": 18, "compliant": 343, "complic": 279, "compon": [84, 116, 155, 306, 319], "component_log_likelihood": 155, "compos": [16, 20, 44, 52, 83, 104, 120, 139, 172, 251, 279, 283, 284, 286, 295, 296, 301, 302, 309, 312, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 338, 339, 353, 365], "composit": [98, 99, 353], "compound": [9, 251, 370], "comprehens": [343, 346, 365], "compress": [12, 18, 26, 34, 46, 54, 55, 75, 97, 114, 124, 135, 136, 142, 151, 160, 172, 179, 257, 259, 262, 263, 267, 271, 279, 299, 340, 341, 347, 354, 365], "compressedsens": [292, 335, 336, 353, 354, 365], "comput": [12, 20, 23, 27, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 61, 66, 68, 70, 76, 78, 81, 83, 84, 88, 89, 90, 91, 92, 98, 99, 101, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 143, 150, 159, 160, 161, 162, 164, 165, 166, 168, 171, 172, 173, 177, 178, 179, 183, 184, 185, 186, 188, 190, 191, 193, 195, 197, 198, 202, 203, 204, 207, 210, 211, 212, 225, 232, 235, 236, 237, 238, 239, 240, 241, 243, 256, 257, 259, 260, 263, 265, 267, 268, 276, 282, 283, 284, 285, 290, 291, 295, 299, 300, 301, 302, 305, 307, 309, 310, 311, 312, 314, 316, 317, 318, 319, 320, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 342, 350, 351, 352, 353, 360, 361, 364, 369], "compute_alpha": [236, 319], "compute_alpha_beta": 235, "compute_invers": [185, 292], "compute_loss": [12, 243, 306, 369], "compute_metr": [12, 69, 117, 276, 290, 301, 302, 310, 311, 313, 369], "compute_norm": [172, 240, 276, 291, 360], "concanten": [171, 179], "concaten": [90, 91, 97, 171, 172, 179, 183, 245, 251, 252, 253, 254, 255], "conclus": 290, "condat": [81, 83, 98, 99, 108, 114, 124, 129, 132, 135, 136, 143, 153, 154, 162, 168, 172, 179, 188, 263, 265, 267, 268, 299, 314, 315, 347, 359], "condatvu": 310, "condit": [19, 54, 55, 82, 93, 207, 210, 228, 236, 282, 318, 326, 348], "confer": [113, 309, 312], "config": [96, 287, 318], "config_matplotlib": [287, 318], "confoc": 15, "confocal_bpae_b": 15, "confocal_bpae_g": 15, "confocal_bpae_r": 15, "confocal_fish": 15, "confocal_mic": 15, "confocalblurgenerator3d": 289, "conj": [152, 172, 260, 360], "conj_model": 111, "conjug": [109, 110, 111, 112, 114, 115, 128, 135, 139, 145, 156, 160, 165, 172, 177, 195, 260, 310, 360], "conjugate_gradi": [160, 172, 195, 360], "conjugate_gradient_method": 156, "conjunct": [12, 241, 263], "connect": [73, 97, 102, 357], "consecut": [19, 135, 283, 312], "consequ": 173, "consid": [16, 84, 116, 130, 206, 209, 216, 218, 219, 220, 223, 226, 247, 292, 305, 306, 319, 337], "consider": 221, "consist": [15, 19, 20, 24, 26, 27, 35, 37, 38, 39, 43, 46, 54, 55, 56, 57, 58, 75, 82, 108, 177, 276, 288, 292, 294, 310, 318, 319, 323, 325, 326, 338, 349, 363, 365], "consol": [12, 26, 155, 241], "consortium": 20, "const": 306, "constant": [47, 48, 49, 95, 98, 99, 126, 127, 157, 161, 169, 172, 173, 205, 235, 238, 239, 240, 251, 305, 319, 334, 366], "constant_batch": 244, "constant_shap": [247, 251], "constrain": [12, 18, 26, 34, 46, 81, 99, 103, 114, 118, 132, 135, 136, 162, 171, 172, 179, 241, 257, 259, 263, 288, 296, 299, 340, 341, 347, 370], "constraint": [238, 239, 240, 364], "construct": [5, 26, 27, 39, 54, 55, 57, 58, 231, 279, 289, 292, 306, 318, 319, 323, 325, 328, 338, 358], "constructor": [19, 224, 242], "consumpt": [84, 116], "contain": [4, 7, 8, 9, 12, 13, 15, 16, 17, 18, 20, 22, 24, 25, 26, 36, 37, 103, 104, 108, 117, 129, 143, 144, 145, 146, 147, 148, 150, 152, 155, 158, 159, 180, 184, 187, 195, 204, 228, 238, 239, 240, 257, 258, 259, 264, 265, 271, 282, 284, 287, 288, 289, 294, 310, 323, 335, 353, 360, 361, 363, 364, 365, 366, 367, 370], "content": [14, 306], "context": [279, 286], "continu": [244, 324, 370], "contrarili": 205, "contrast": 306, "contribut": [212, 342], "contributor": [342, 343], "control": [16, 19, 43, 47, 86, 102, 113, 167, 235, 240, 306, 313, 316, 318, 320, 323, 325, 328, 338, 349, 366], "conv": [93, 95, 96, 97], "conv1d": 287, "conv2d": [158, 206, 208, 352], "conv2d_fft": [209, 352], "conv3d": 158, "conv3d_fft": [158, 210, 352], "conv_transpose2d": 352, "conv_transpose2d_fft": 352, "conv_transpose3d_fft": [207, 352], "conv_transposed2d": 205, "conv_transposed2d_fft": 206, "convdecod": [80, 285, 355], "conveni": [19, 294, 300, 301, 302, 316, 367], "convent": [59, 71, 103, 161, 219, 300], "converg": [12, 30, 33, 98, 99, 108, 117, 118, 120, 129, 135, 140, 149, 172, 237, 238, 239, 240, 276, 283, 291, 300, 301, 302, 309, 310, 311, 312, 313, 317, 337, 360], "convers": 344, "convert": [81, 82, 105, 161, 162, 166, 264, 265, 290, 291, 317, 323, 356, 357, 361], "convert_to_fp16": 82, "convert_to_fp32": 82, "convex": [88, 98, 99, 109, 110, 111, 112, 114, 115, 119, 128, 135, 139, 150, 311, 338, 360], "convolut": [76, 77, 78, 79, 80, 83, 87, 88, 90, 91, 95, 97, 102, 138, 158, 159, 184, 189, 205, 206, 207, 208, 209, 210, 215, 222, 276, 283, 285, 287, 301, 320, 352, 353, 355, 360, 361], "convolv": [138, 205, 206, 207, 208, 209, 210, 282, 361], "convtranspos": [79, 87], "coordin": [201, 225, 269, 276], "copi": [260, 287, 289, 292, 300, 318, 319, 334, 335, 336, 338, 339], "core": 286, "corner": 269, "correct": [75, 82, 184, 276, 293, 313], "correct_global_phas": [290, 293], "correctli": [13, 14, 17, 21, 24, 25, 338], "correl": [205, 206, 208, 327], "correspond": [15, 39, 75, 95, 108, 110, 112, 126, 127, 128, 129, 145, 152, 166, 167, 172, 173, 174, 178, 179, 182, 183, 186, 190, 191, 192, 193, 205, 206, 207, 208, 209, 210, 227, 233, 243, 252, 253, 254, 255, 269, 276, 282, 289, 292, 306, 310, 312, 318, 319, 335, 336, 339, 357, 360], "corrupt": [42, 311, 327, 329, 330], "cosin": 290, "cosine_similar": 290, "cosineannealinglr": 337, "cost": [48, 108, 117, 129, 143, 144, 145, 146, 147, 148, 150, 172, 258, 259, 283, 290, 301, 302, 310, 312, 360], "cost_tv": 301, "cost_tv_prox": 301, "cost_wv": 302, "cost_wv_prox": 302, "could": [285, 306, 323, 325, 338], "count": 212, "coupl": 306, "cours": 323, "cov": 155, "cov_regular": 155, "covari": [152, 155, 225], "coverag": 276, "cp": [143, 257, 258, 259, 288, 338, 360], "cpab": 244, "cpabdiffeomorph": [296, 370], "cpiter": [337, 338], "cpp": [287, 296], "cpu": [12, 26, 27, 39, 51, 52, 53, 54, 55, 56, 57, 58, 61, 66, 72, 79, 81, 83, 84, 87, 88, 92, 94, 95, 96, 100, 101, 103, 104, 116, 130, 142, 155, 158, 159, 160, 161, 163, 165, 166, 170, 171, 174, 175, 176, 177, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 195, 198, 203, 204, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 231, 234, 235, 236, 241, 244, 245, 252, 253, 254, 255, 257, 259, 260, 264, 265, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 295, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 346, 359], "craft": [357, 358], "creat": [16, 18, 26, 27, 33, 37, 39, 43, 52, 65, 84, 86, 108, 116, 117, 160, 162, 164, 166, 168, 170, 171, 172, 174, 176, 179, 185, 186, 194, 216, 217, 218, 222, 223, 226, 227, 229, 234, 238, 242, 251, 259, 263, 267, 283, 290, 293, 296, 297, 298, 299, 309, 310, 347, 351, 353, 357, 360, 363], "create_sampl": 92, "creation": 291, "crit": [98, 99, 283, 302, 317], "crit_conv": [108, 118, 120, 238, 240, 283, 312], "criteria": [75, 238, 283, 309, 312], "criterion": [98, 99, 108, 117, 118, 120, 140, 172, 300], "critic": [51, 53, 243], "crop": [103, 192, 247, 251, 264, 265], "crop_output": 103, "cross": [205, 208], "crucial": [313, 355], "csgm": [75, 355], "csgm_model": 279, "csgmgener": [279, 355], "csv": 20, "ct": [12, 20, 34, 43, 46, 81, 83, 84, 90, 91, 108, 114, 116, 124, 129, 130, 132, 135, 136, 143, 145, 153, 154, 168, 172, 173, 179, 195, 257, 259, 263, 265, 267, 268, 299, 305, 306, 314, 315, 340, 341, 345, 347, 352, 365], "ct_small": 306, "ct_toi": 306, "cth": 176, "cubic": [142, 300], "cuda": [12, 33, 84, 113, 116, 158, 159, 189, 227, 234, 236, 260, 263, 276, 279, 282, 283, 284, 285, 287, 288, 289, 290, 292, 293, 295, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 368], "cumprod": [318, 319], "cup_": [285, 316, 317, 320], "cur_data_fidel": [117, 129, 144, 145, 146, 147, 148, 150, 290, 310, 337], "cur_param": [117, 129, 144, 145, 146, 147, 148, 150, 152, 290, 310], "cur_prior": [117, 129, 144, 145, 146, 147, 148, 150, 152, 290, 310, 337], "current": [12, 28, 31, 32, 41, 45, 67, 90, 91, 108, 117, 129, 144, 145, 146, 147, 148, 150, 152, 155, 158, 159, 162, 165, 166, 167, 168, 170, 173, 180, 181, 186, 189, 197, 227, 243, 283, 302, 306, 310, 316, 317, 319, 323, 325, 337, 338], "current_log": 306, "curv": [276, 283, 290, 293, 295, 301, 302, 310, 311, 313, 325, 326, 327, 329, 334, 335, 336, 337, 338, 339, 350], "custom": [12, 18, 26, 34, 46, 81, 83, 89, 108, 114, 124, 129, 132, 135, 136, 138, 143, 151, 153, 154, 159, 160, 162, 165, 168, 172, 177, 179, 188, 201, 238, 240, 241, 242, 251, 257, 258, 259, 262, 263, 265, 267, 268, 271, 284, 288, 290, 297, 298, 299, 313, 314, 315, 321, 322, 328, 338, 340, 341, 347, 348, 353, 359, 365, 369], "custom_init": [108, 276, 288, 313, 337, 338], "custom_init_cp": [288, 338], "custom_metr": 108, "custom_output": [312, 337], "customis": 296, "customtrain": 369, "cutoff": [219, 220, 282, 289], "cv": 17, "cviter": 310, "cx256x256": [22, 365], "cyclegan": 279, "d": [30, 50, 51, 53, 54, 55, 56, 57, 58, 62, 69, 82, 86, 98, 99, 110, 112, 114, 115, 116, 128, 132, 137, 138, 139, 140, 158, 160, 169, 174, 175, 176, 184, 185, 187, 207, 210, 212, 243, 258, 270, 276, 279, 287, 289, 300, 310, 316, 320, 338, 355, 360, 361], "d_": [69, 109, 135, 187, 235, 236, 287, 311, 338, 367], "d_i": [139, 192, 193], "d_lambda": 69, "dabov": 74, "dagger": [47, 72, 162, 166, 356], "damp": 239, "daniil": [98, 99], "data": [9, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 35, 37, 38, 39, 43, 46, 47, 48, 49, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 84, 88, 96, 100, 101, 106, 107, 108, 113, 114, 116, 117, 118, 120, 122, 124, 125, 129, 139, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 155, 170, 174, 175, 176, 183, 184, 194, 203, 204, 216, 223, 226, 227, 230, 235, 236, 241, 242, 243, 257, 258, 259, 276, 279, 285, 290, 293, 294, 306, 324, 348, 349, 350, 352, 353, 357, 358, 359, 363, 365, 366, 368, 370], "data_dir": [279, 283, 284, 288, 294, 295, 300, 301, 302, 309, 311, 312, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "data_fidel": [108, 112, 117, 124, 129, 139, 143, 144, 145, 146, 147, 148, 150, 235, 236, 238, 239, 240, 257, 258, 259, 276, 283, 288, 290, 293, 301, 302, 306, 309, 310, 311, 312, 313, 316, 318, 319, 320, 334, 335, 336, 337, 338, 339, 346, 359, 360, 363], "data_fidelity_list": 139, "data_init": 155, "data_test": 365, "data_train": 365, "databas": 20, "datafid": [108, 114, 122, 124, 125, 126, 133, 139, 306, 349, 359, 360, 363], "datafidel": [106, 108, 117, 118, 120, 124, 126, 129, 133, 139, 143, 144, 145, 146, 147, 148, 150, 235, 236, 238, 239, 240, 257, 258, 259, 310, 337, 360], "datafidnam": [108, 114, 124, 139, 359, 360], "datagener": 329, "dataload": [12, 20, 155, 241, 242, 243, 279, 283, 294, 295, 306, 309, 310, 311, 312, 313, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 365, 369], "dataparallel": 368, "datapoint": 26, "dataset": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 43, 84, 116, 162, 164, 168, 172, 173, 179, 241, 243, 262, 263, 267, 289, 290, 292, 294, 297, 298, 299, 300, 305, 306, 311, 313, 319, 323, 324, 328, 343, 345, 346, 347, 348, 350, 352, 359, 364, 366, 367, 369], "dataset_cach": 16, "dataset_filenam": [26, 295, 325, 326, 327, 329, 330, 334, 335, 336, 338, 339], "dataset_info": 13, "dataset_nam": [283, 284, 301, 302, 309, 310, 312], "dataset_path": 279, "dataweight": [184, 276], "daubechi": 276, "db": [276, 285, 290, 300, 301, 302, 310, 311, 313, 316, 317, 320], "db1": [142, 276, 300], "db2": [103, 142, 276, 300], "db3": [276, 300], "db4": [104, 142, 276, 300], "db5": 276, "db6": 276, "db7": 276, "db8": [103, 104, 142, 276, 288, 300, 302, 335, 338], "dcgan": [75, 77, 78, 279, 355], "dcgan_faces_tutori": [77, 78], "dcgandiscrimin": [55, 56, 58, 279, 355], "dcgangener": [75, 279, 355], "dcm": 20, "dd_hh": 12, "ddim": [235, 319], "ddpm": 319, "ddrm": [291, 317, 361], "deal": [12, 194], "deblock": 21, "deblur": [12, 18, 19, 21, 26, 34, 46, 54, 55, 79, 81, 83, 93, 95, 99, 108, 113, 114, 124, 132, 135, 136, 140, 143, 159, 162, 168, 172, 179, 201, 241, 248, 256, 258, 263, 267, 268, 279, 297, 298, 299, 303, 304, 311, 314, 315, 318, 324, 340, 341, 345, 347, 357, 365], "deblurgan": [54, 55, 93, 279], "deblurgan_model": 279, "debug": 73, "dec": 103, "decid": 343, "decod": [76, 79, 80, 95, 285, 355], "decolor": [177, 291, 294, 354], "decolorizesvd": 291, "decompos": [184, 276, 361], "decomposablephys": [159, 161, 164, 166, 171, 174, 186, 188, 234, 282, 291, 316, 317, 351, 353, 369], "decomposit": [103, 104, 142, 159, 162, 166, 171, 174, 186, 188, 219, 220, 234, 282, 289, 291, 316, 317, 351, 353], "deconvolut": [352, 363], "decor": 251, "decreas": [108, 155, 234, 235, 236, 318, 319], "dedic": 15, "deep": [12, 18, 26, 27, 34, 39, 46, 61, 72, 76, 77, 78, 79, 80, 81, 83, 92, 94, 108, 111, 113, 114, 124, 132, 135, 136, 143, 159, 162, 168, 171, 172, 179, 201, 216, 222, 226, 241, 256, 257, 258, 261, 263, 265, 267, 284, 290, 297, 298, 299, 309, 323, 325, 340, 341, 343, 347, 348, 358], "deepimageprior": [76, 285], "deepinv": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 342, 343, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "deepinv_data": 262, "deepinv_dataset_path": 283, "deepinv_datasets_path": [295, 325, 326, 327, 328, 329, 330, 338], "deepinvers": [18, 108, 114, 124, 135, 136, 142, 143, 172, 179, 184, 267, 268, 269, 277, 278, 292, 294, 299, 342, 343, 347, 360, 364], "def": [238, 276, 279, 283, 286, 288, 291, 306, 310, 312, 316, 318, 319, 336, 337, 338, 369], "def_crit": 140, "default": [12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 77, 78, 79, 82, 83, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 103, 104, 108, 113, 114, 115, 117, 118, 119, 121, 125, 129, 130, 133, 134, 135, 137, 140, 142, 143, 144, 145, 146, 153, 154, 158, 160, 161, 170, 171, 172, 175, 177, 179, 184, 185, 188, 192, 193, 194, 195, 203, 204, 205, 207, 208, 210, 216, 217, 218, 219, 220, 223, 225, 226, 227, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 267, 269, 270, 271, 272, 276, 282, 290, 305, 306, 323, 325, 338, 350, 353, 364, 367, 368], "defin": [16, 28, 29, 31, 32, 35, 36, 37, 40, 41, 42, 44, 45, 46, 56, 62, 75, 76, 78, 81, 84, 88, 89, 90, 91, 92, 94, 101, 103, 104, 106, 107, 108, 116, 117, 119, 120, 121, 122, 124, 129, 130, 138, 139, 144, 145, 146, 147, 148, 150, 152, 158, 159, 160, 161, 164, 165, 166, 169, 171, 172, 174, 176, 177, 178, 179, 182, 184, 185, 186, 188, 190, 195, 199, 200, 201, 203, 204, 225, 234, 235, 236, 238, 243, 251, 272, 276, 282, 286, 287, 289, 290, 291, 296, 300, 305, 306, 313, 318, 324, 325, 326, 327, 329, 330, 348, 352, 353, 355, 358, 359, 360, 363, 365, 369, 370], "definit": [282, 310, 319, 351, 367], "defocu": 95, "defocus_deblur": 95, "deform": 370, "deg2rad": 289, "deg_dir": [283, 288, 300, 301, 302, 309, 312, 334], "degrad": [288, 300, 311, 313, 364], "degre": [86, 195, 201, 245, 247, 251, 252, 253, 254, 255, 289, 292, 296, 306, 325], "dehaz": 354, "delet": 323, "delta": [42, 189, 202, 276, 282], "demo": [61, 66, 186, 261, 276, 279, 282, 283, 284, 288, 289, 290, 292, 293, 294, 295, 296, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 338, 339, 350, 364, 365], "demo_3d_wavelet": [300, 304, 347], "demo_artifact2artifact": [323, 332, 347], "demo_artifact2artifact_mri": 323, "demo_blur_tour": [282, 298, 347], "demo_custom_kernel": [316, 322, 347], "demo_custom_prior": [283, 298, 347], "demo_custom_prior_unfold": [336, 341, 347], "demo_dataset": [284, 298, 347], "demo_ddrm": [317, 322, 347], "demo_deq": [334, 341, 347], "demo_deq0": 334, "demo_diffpir": [318, 322, 347], "demo_dip": [285, 298, 347], "demo_dp": [319, 322, 347], "demo_ei_transform": [324, 332, 347], "demo_epl": [305, 308, 347], "demo_equivariant_imag": [325, 332, 347], "demo_equivariant_imaging0": 325, "demo_gan_imag": [279, 281, 347], "demo_hf_dataset": [286, 298, 347], "demo_learned_primal_du": [337, 341, 347], "demo_licp": 336, "demo_licp0": 336, "demo_lidar": [287, 298, 347], "demo_lista": [335, 341, 347], "demo_lista0": 335, "demo_load": [288, 298, 347], "demo_measplit_mnist_tomographi": 328, "demo_microscopy_3d": [289, 298, 347], "demo_moi_ckp_10": 326, "demo_mri_model": [323, 325, 350], "demo_multioperator_imag": [326, 332, 347], "demo_multioperator_imaging0": 326, "demo_multioperator_imaging1": 326, "demo_multioperator_imaging2": 326, "demo_multioperator_imaging3": 326, "demo_multioperator_imaging4": 326, "demo_multioperator_imaging5": 326, "demo_multioperator_imaging6": 326, "demo_multioperator_imaging7": 326, "demo_multioperator_imaging8": 326, "demo_multioperator_imaging9": 326, "demo_n2n": 327, "demo_n2n0": 327, "demo_n2n_denois": [327, 332, 347], "demo_nbu_pansharpen": 294, "demo_patch_priors_ct": [306, 308, 347], "demo_phase_retriev": [290, 298, 347], "demo_phys": [291, 298, 347], "demo_physics_tour": [292, 298, 347], "demo_pnp_custom_optim": [310, 315, 347], "demo_pnp_dpir_deblur": [309, 315, 347], "demo_pnp_mirror_desc": [311, 315, 347], "demo_ptychographi": [293, 298, 347], "demo_red_gspnp_sr": [312, 315, 347], "demo_remote_sens": [294, 298, 347], "demo_ri_bas": [276, 278, 347], "demo_sampl": [320, 322, 347], "demo_splitting_loss": [328, 332, 347], "demo_sur": [329, 330], "demo_sure0": [329, 330], "demo_sure_denois": [329, 332, 347], "demo_train_inpaint": [295, 298, 347], "demo_training_inpaint": [295, 338], "demo_training_inpainting0": [295, 338], "demo_transform": [296, 298, 347], "demo_tv_minimis": [301, 304, 347], "demo_unfolded_constrained_lista": [338, 341, 347], "demo_unfolded_cp": 288, "demo_unfolded_cp_ptwt": 288, "demo_unfolded_sr": 339, "demo_unfolded_sr0": 339, "demo_unsur": [330, 332, 347], "demo_vanilla_pnp": [313, 315, 347], "demo_vanilla_unfold": [339, 341, 347], "demo_wavelet_prior": [302, 304, 347], "demonstr": [279, 294, 296, 323, 324, 328, 370], "demosa": 354, "demosaick": 21, "den": 318, "denois": [12, 15, 18, 21, 26, 34, 38, 40, 42, 44, 47, 48, 49, 72, 73, 74, 79, 82, 83, 84, 86, 87, 89, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 108, 113, 114, 116, 124, 132, 135, 136, 137, 138, 139, 140, 142, 143, 162, 165, 168, 171, 172, 173, 179, 180, 181, 196, 197, 234, 235, 236, 238, 239, 240, 241, 257, 258, 259, 261, 262, 263, 265, 267, 284, 285, 288, 299, 303, 304, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 320, 323, 325, 328, 331, 332, 334, 335, 338, 339, 343, 345, 346, 347, 348, 349, 354, 356, 358, 359, 360, 361, 363, 364, 370], "denoised_imag": 357, "denoiser_arg": 86, "denoiser_complex": 290, "denoiser_kwarg": 86, "denoiser_nam": 312, "denoisernam": [81, 86, 359], "denoising_color": 95, "denoising_grai": 95, "denoising_r": 95, "denorm": [133, 134], "denot": [30, 62, 119, 149, 158, 159, 169, 289], "dens": 130, "densiti": [133, 222, 229, 306], "depend": [16, 42, 51, 52, 53, 82, 195, 227, 236, 238, 276, 306, 316, 343, 349, 358, 360, 363], "deploi": 358, "deprec": [43, 72, 160, 242, 294, 323], "depth": [42, 83, 90, 91, 96, 97, 169, 174, 176, 179, 187, 220, 263, 270, 289, 297, 298, 299, 300, 311, 334, 339, 347], "deq": [12, 18, 26, 34, 46, 81, 83, 114, 124, 132, 135, 136, 159, 162, 168, 172, 179, 256, 258, 263, 267, 299, 340, 341, 347, 358, 363], "deq_build": [334, 363], "derain": [95, 357], "deriv": [48, 370], "descent": [81, 83, 88, 108, 109, 112, 114, 133, 135, 136, 137, 143, 148, 150, 151, 157, 159, 162, 172, 179, 181, 201, 257, 258, 259, 263, 265, 267, 268, 283, 299, 301, 302, 313, 314, 315, 330, 336, 347, 359, 360], "describ": [113, 130, 171, 172, 173, 179, 234, 235, 236, 288, 309, 320, 326, 348, 353, 354, 357], "descript": [98, 99, 142, 221, 222, 229, 323, 343, 352, 355, 358, 359, 361, 362, 365, 366, 370], "design": [40, 42, 47, 48, 49, 81, 290, 357, 366], "desir": [12, 26, 78, 194, 221, 267, 279, 343], "detach": [260, 287, 292, 293, 306, 318, 319], "detail": [5, 6, 7, 10, 12, 27, 30, 33, 36, 38, 39, 48, 49, 65, 79, 82, 83, 84, 87, 96, 97, 98, 99, 104, 108, 113, 116, 142, 143, 156, 167, 170, 173, 177, 215, 219, 220, 225, 228, 241, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 267, 270, 306, 318, 319, 323, 325, 328, 338, 351, 353, 359, 363, 364, 366, 367], "detect": 365, "detector": [195, 204, 289], "detector_radiu": [195, 204], "detector_spac": [195, 204], "determin": [130, 155, 161, 217], "determinist": [172, 179, 251, 348, 349, 353, 369, 370], "dev": [317, 320], "develop": [343, 345], "deviat": [40, 47, 48, 108, 113, 124, 143, 164, 168, 177, 180, 187, 196, 201, 225, 241, 257, 258, 259, 283, 287, 292, 300, 301, 302, 305, 309, 310, 312, 313, 317, 318, 319, 349, 357, 360, 367], "devic": [12, 26, 27, 39, 51, 52, 53, 54, 55, 56, 57, 58, 61, 66, 72, 75, 79, 81, 83, 84, 87, 88, 92, 94, 95, 96, 100, 101, 103, 104, 113, 116, 130, 142, 155, 158, 159, 160, 161, 163, 165, 166, 170, 171, 174, 175, 176, 177, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 195, 198, 203, 204, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 231, 234, 235, 236, 241, 244, 245, 252, 253, 254, 255, 257, 259, 260, 261, 263, 264, 265, 276, 279, 282, 283, 284, 285, 287, 288, 289, 290, 292, 293, 295, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 346, 359, 368, 369], "device_count": 368, "device_id": 368, "df": 33, "df73285e": 309, "dft": 193, "dhariw": 364, "diag": [33, 152, 160, 162, 171, 176, 178, 183, 282, 360], "diagnost": 20, "diagon": [33, 43, 171, 192, 193, 213, 214, 316, 352], "diagonal_mod": 193, "dicom": 20, "dict": [12, 18, 70, 108, 117, 129, 143, 144, 145, 146, 147, 148, 150, 152, 179, 195, 204, 216, 217, 218, 219, 220, 223, 226, 230, 251, 257, 258, 259, 267, 268, 271, 272, 310], "dict_kei": [219, 220, 224, 225, 227, 228, 230, 282, 289], "dict_param": 353, "dictionari": [12, 108, 117, 129, 143, 144, 145, 146, 147, 148, 150, 152, 179, 217, 218, 219, 220, 224, 225, 227, 228, 230, 241, 257, 258, 259, 268, 271, 282, 289, 300, 310, 311, 334, 335, 336, 339, 353, 360], "dictionnari": 276, "diff": [225, 317], "diffeomorph": [244, 296, 370], "differ": [9, 12, 15, 16, 22, 36, 37, 38, 42, 50, 80, 97, 98, 99, 140, 177, 216, 225, 234, 235, 247, 260, 279, 282, 283, 285, 289, 290, 305, 312, 318, 319, 326, 327, 335, 336, 339, 353, 360, 365, 366, 367, 370], "differenti": [29, 135, 136, 137, 145, 172, 179, 235, 239, 240, 319, 360], "diffpir": [81, 82, 114, 124, 133, 135, 162, 168, 171, 172, 179, 263, 265, 267, 299, 319, 321, 322, 347, 361], "diffract": [158, 172, 179, 219, 220, 227, 263, 267, 270, 297, 298, 299, 347], "diffraction_gener": [282, 289], "diffractionblur": 282, "diffractionblurgener": [189, 220, 224, 228, 282, 354], "diffractionblurgenerator3d": 289, "diffunet": [318, 319, 357, 364], "diffus": [79, 81, 82, 94, 162, 168, 171, 172, 179, 234, 235, 236, 237, 238, 263, 265, 267, 299, 318, 321, 322, 345, 347, 348, 358], "diffusion_ffhq_10m": 319, "diffusion_step": 318, "diffusionsampl": [317, 361], "digit": 292, "dih": 296, "dihedr": 296, "dilat": [248, 287], "dim": [63, 64, 65, 86, 95, 96, 97, 101, 172, 175, 194, 198, 223, 246, 250, 251, 260, 283, 287, 291, 292, 293, 296, 317, 319, 320, 352], "dim_hid": 73, "dim_input": 73, "dim_mid": 73, "dimens": [9, 27, 39, 43, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 78, 82, 84, 88, 91, 97, 100, 101, 103, 114, 115, 116, 118, 119, 120, 121, 122, 139, 140, 142, 152, 155, 162, 166, 171, 174, 175, 176, 184, 186, 194, 198, 212, 216, 217, 218, 221, 222, 223, 226, 229, 244, 245, 250, 251, 252, 253, 254, 255, 260, 269, 272, 276, 284, 301, 309, 312, 323, 334, 335, 350, 357, 366, 367, 370], "dimension": [195, 222, 229, 352], "dimensionless": [59, 367], "dinv": [40, 42, 43, 44, 92, 108, 117, 124, 135, 139, 234, 236, 259, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 346, 352, 353, 357, 359, 360, 363, 365, 366, 367, 368], "dinv_dataset": 26, "dinv_dataset0": [279, 283, 284, 309, 312, 328], "dinv_dataset_path": [284, 309, 312], "dir": [309, 312, 365], "dirac": 276, "dirac_comb": [189, 282], "dirac_lik": 276, "direct": [72, 92, 144, 183, 220, 251, 289, 323, 356, 360], "directli": [19, 65, 82, 97, 114, 139, 143, 166, 174, 176, 186, 257, 258, 259, 276, 282, 289, 290, 337, 346, 350, 367], "directori": [12, 13, 14, 15, 17, 19, 20, 21, 22, 24, 25, 241, 271, 343, 350, 365], "disabl": [43, 295, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "disast": 294, "discard": [75, 238, 239, 240], "discord": [343, 344], "discourag": 367, "discrep": [108, 349, 359, 360], "discret": [160, 166, 174, 184, 186, 193, 276, 306], "discrimin": [51, 52, 53, 54, 55, 56, 57, 58, 77, 85, 93, 243, 279, 366], "discriminatorloss": [54, 57, 366], "disk": [13, 14, 15, 24, 25, 182, 183, 231, 286, 293], "displai": [12, 75, 158, 159, 165, 272, 284, 286, 323, 324], "display_losses_ev": 12, "distanc": [3, 60, 107, 108, 110, 112, 114, 119, 122, 125, 127, 134, 135, 139, 195, 204, 311, 349, 360, 367, 370], "distancenam": [114, 125, 139, 145, 360], "distancename_i": 139, "distancz": 127, "distinct": [108, 143, 257, 258, 259, 288, 335, 336, 337, 338, 339, 360], "distort": [69, 294, 348, 355, 358, 366, 367, 370], "distribut": [42, 84, 94, 116, 134, 138, 164, 167, 170, 171, 193, 218, 222, 223, 234, 236, 237, 238, 239, 240, 289, 306, 316, 317, 320, 329, 330, 348, 349, 352, 355, 361, 366], "distributeddataparallel": 368, "div": [109, 110, 318], "div2k": 365, "div2k_train_hr": 14, "div2k_valid_hr": 14, "diverg": [47, 48, 49, 109, 110, 112, 128, 134, 135, 360], "divers": [279, 365], "divid": [27, 134, 216, 260], "divis": [82, 95, 107], "dncnn": [42, 259, 261, 310, 311, 313, 320, 323, 325, 334, 339, 357, 363, 364, 366], "dncnn_sigma2_lipschitz_color": 320, "dncnn_sigma2_lipschitz_grai": 310, "do": [19, 27, 39, 72, 103, 108, 136, 251, 279, 286, 296, 309, 312, 313, 318, 323, 356, 357, 358, 367], "doc": [12, 42, 65, 70, 86, 175, 244, 286, 296, 324, 325, 343, 353], "doctor": 342, "document": [40, 47, 48, 49, 62, 145, 169, 187, 338, 342, 343, 349, 368], "doe": [19, 26, 29, 30, 33, 42, 63, 64, 65, 69, 74, 83, 118, 149, 167, 172, 179, 223, 244, 257, 259, 279, 300, 353], "doesn": [138, 194, 284, 366], "doi": [83, 195, 204, 289], "domain": [43, 74, 184, 276, 306, 335, 336, 356, 357], "don": [13, 69, 194, 263, 269, 306, 323, 325, 338, 358], "done": [12, 43, 103, 177, 282, 290, 295, 301, 302, 317, 318, 319, 328, 330, 334, 335, 336, 337, 338, 339, 343, 353, 355, 365, 369], "dongdong": 345, "dose": 173, "dossal": 147, "dot": [36, 37, 104, 176, 183, 326], "doubl": [20, 172], "dougla": [143, 146, 257, 258, 259, 339, 360], "down": [92, 251, 312], "download": [13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 79, 82, 83, 84, 87, 95, 96, 97, 116, 234, 236, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 343, 346, 359, 364, 365], "download_and_extract_arch": [279, 324], "download_lipschitz": [83, 310, 320], "downsampl": [79, 87, 92, 102, 172, 177, 199, 200, 202, 292, 294, 306, 312, 334, 339, 353, 354], "downsample_mod": [79, 87], "downscal": 324, "dp": [81, 82, 114, 124, 135, 162, 171, 172, 179, 263, 265, 267, 299, 321, 322, 347, 361], "dpi": [267, 269, 272, 294, 318], "dpir": [18, 26, 79, 81, 108, 114, 124, 132, 135, 136, 143, 159, 162, 168, 172, 179, 241, 263, 299, 314, 315, 347, 359, 364], "dr": [143, 146, 257, 258, 259, 276, 302, 339, 360], "drawback": 368, "drawn": 193, "drive": [22, 306], "driven": [88, 343], "drop": 96, "drop_last": 306, "drop_path_r": [96, 97], "drop_rat": 97, "dropout": 97, "drunet": [87, 113, 234, 236, 290, 309, 317, 334, 339, 357, 364, 368], "drunet_dataset": 286, "drunet_deepinv_gray_finetune_26k": 290, "dst": 160, "dst1": 192, "dtype": [18, 26, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 108, 117, 160, 172, 175, 176, 185, 188, 193, 195, 198, 203, 204, 218, 219, 220, 225, 227, 230, 260, 264, 265, 282, 289, 292, 306, 318, 319, 336], "du": [30, 33], "dual": [12, 34, 46, 81, 83, 90, 91, 95, 98, 99, 108, 114, 118, 120, 124, 129, 132, 135, 136, 143, 145, 153, 154, 162, 168, 172, 179, 188, 195, 257, 259, 263, 265, 267, 268, 299, 314, 315, 338, 340, 341, 347, 359, 360, 363], "dual_pixel_task": 95, "due": [160, 195, 311, 323], "dummi": 353, "dure": [12, 18, 19, 26, 36, 37, 40, 42, 43, 95, 102, 108, 171, 282, 306, 318, 319, 323, 324, 325, 335, 337, 338, 366], "dwt": 103, "dx": [98, 99, 140, 301, 336, 360], "dynam": [27, 39, 43, 100, 166, 194, 216, 222, 223, 226, 276, 282, 292, 354], "dynamic_model": [27, 39, 323], "dynamicmri": [27, 39, 186, 354], "e": [12, 13, 14, 15, 16, 17, 18, 19, 21, 24, 25, 26, 27, 29, 30, 33, 35, 36, 37, 38, 39, 40, 43, 46, 52, 54, 55, 56, 57, 58, 60, 65, 68, 75, 79, 82, 83, 84, 86, 87, 92, 98, 99, 101, 103, 104, 107, 108, 114, 116, 117, 118, 119, 120, 122, 124, 125, 138, 139, 142, 143, 158, 159, 160, 161, 163, 164, 166, 170, 171, 172, 174, 176, 177, 178, 181, 184, 186, 192, 193, 194, 195, 198, 206, 209, 216, 218, 223, 226, 227, 228, 231, 234, 238, 239, 240, 243, 245, 246, 247, 250, 251, 253, 256, 257, 258, 259, 267, 272, 276, 279, 284, 287, 289, 290, 291, 294, 296, 299, 300, 306, 310, 316, 317, 318, 323, 324, 325, 326, 327, 329, 330, 355, 357, 358, 360, 361, 363, 365, 366, 367, 369, 370], "each": [12, 15, 16, 19, 20, 22, 26, 27, 28, 31, 32, 38, 39, 41, 44, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 80, 86, 90, 91, 93, 95, 96, 97, 103, 104, 108, 113, 116, 117, 129, 139, 143, 155, 170, 172, 179, 184, 190, 191, 205, 206, 207, 208, 209, 210, 212, 216, 224, 228, 233, 241, 246, 248, 251, 257, 258, 259, 260, 267, 269, 270, 276, 282, 288, 305, 316, 318, 323, 326, 327, 329, 335, 336, 337, 338, 339, 353, 360, 365, 367], "earli": [80, 113, 285, 312, 359], "early_stop": [108, 117, 276, 283, 290, 301, 302, 309, 310, 311, 312, 313], "easi": [316, 345, 353, 365], "easili": [9, 26, 279, 295, 296, 318, 319, 328, 338, 343, 359, 365, 367, 369, 370], "edg": 212, "edinburgh": 342, "edongdongchen": 85, "edsr": 17, "edu": 16, "ee": 21, "effect": [15, 43, 84, 116, 131, 171, 245, 248, 251, 254, 282, 318, 324, 328, 352, 370], "effic": 283, "effici": [40, 43, 95, 160, 162, 166, 172, 179, 188, 195, 251, 316, 351, 352, 353, 364], "effort": 285, "eg": [167, 360], "egg": [299, 346], "ei": [29, 36, 85, 296, 324, 325, 370], "eigen": 228, "eigenvalu": 33, "eigenvector": 152, "eiloss": [36, 294, 296, 324, 325, 366, 370], "either": [16, 19, 26, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 82, 95, 97, 101, 103, 104, 105, 108, 142, 143, 161, 166, 174, 186, 205, 206, 207, 208, 209, 210, 212, 213, 214, 217, 218, 223, 257, 258, 259, 267, 269, 270, 272, 305, 357, 360, 363, 365, 366, 367, 368], "elaps": [291, 316, 317, 320], "element": [19, 62, 73, 92, 103, 160, 169, 177, 183, 185, 193, 224, 246, 260, 290, 300, 335, 339, 349, 352], "elementari": 350, "elementwis": [48, 49, 171, 329, 330], "ell": [42, 167, 300], "ell_": 121, "ell_0": [103, 104], "ell_1": [29, 35, 36, 37, 38, 46, 98, 103, 104, 120, 122, 123, 359, 360], "ell_2": [50, 113, 116, 118, 119, 120, 121, 124, 125, 172, 319, 338, 360], "ell_p": 62, "els": [118, 119, 234, 236, 276, 279, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 295, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 369], "elu": [79, 87], "em": 155, "email": 343, "embed": [82, 97], "embed_dim": 97, "emiss": [276, 289], "emission_wavelength": [219, 220], "emit": 289, "empti": [171, 186, 217, 221, 229], "en": [70, 156, 163, 167, 219, 282, 289, 342], "enabl": [19, 95, 256, 257, 283, 286, 319, 352, 353], "enable_grad": 319, "encapsul": 243, "encod": [79, 95, 184, 276], "encompass": [257, 259], "encount": 102, "end": [12, 84, 93, 108, 116, 118, 119, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 172, 179, 183, 191, 199, 200, 201, 202, 233, 235, 236, 256, 257, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 353, 359, 360, 363], "endmemb": 170, "enforc": [35, 89, 108, 349, 359, 360], "enhanc": [85, 355], "enough": [348, 360], "ensur": [19, 155, 222, 282, 283, 284, 285, 289, 290, 292, 295, 300, 301, 302, 309, 310, 311, 312, 313, 320, 323, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339, 364], "entir": [251, 357], "entri": [47, 48, 49, 106, 107, 155, 160, 171, 172, 179, 188, 190, 191, 233, 240, 316, 360], "entropi": [112, 128, 311], "enumer": 369, "envelop": [138, 149, 361], "environ": [262, 267], "environment": 294, "ep": [156, 318], "epfl": 342, "epll": [155, 162, 164, 168, 171, 172, 179, 265, 267, 299, 307, 308, 347, 357, 359], "epll_batch_s": 306, "epll_dataload": 306, "epll_max_it": 306, "epll_num_compon": 306, "epll_prior": 306, "eplldenois": [357, 364], "epoch": [12, 28, 31, 32, 41, 42, 45, 242, 243, 279, 294, 295, 306, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 366, 369], "epoch_thresh": 45, "eprint": [112, 311], "eps_anderson_acc": [108, 117], "eps_anderson_acc_backward": 256, "epsilon": [42, 48, 98, 107, 168, 170, 180, 196, 197, 276, 301, 302, 305, 316, 319, 354, 360], "epsilon_adjoint": 98, "epub": 83, "eq": [86, 108, 289, 306, 359, 360], "equal": [27, 39, 40, 52, 103, 138, 169, 171, 177, 188, 195, 198, 221, 222, 269, 296, 328], "equat": [108, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 199, 200, 201, 202, 235, 236, 256, 276, 300, 301, 302, 306, 318, 319, 335, 338, 348, 359, 360, 363], "equilibrium": [12, 18, 26, 34, 46, 81, 83, 114, 124, 132, 135, 136, 159, 162, 168, 172, 179, 256, 258, 263, 267, 299, 340, 341, 345, 347], "equispac": [221, 306], "equispacedmaskgener": [292, 354], "equival": [19, 40, 63, 64, 318, 319, 353], "equivari": [9, 12, 18, 25, 26, 29, 34, 35, 36, 81, 86, 89, 102, 162, 168, 171, 172, 174, 175, 179, 194, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 261, 262, 263, 265, 267, 294, 297, 298, 299, 331, 332, 347, 366, 370], "equivariantdenois": [296, 357, 370], "erga": [294, 367], "error": [12, 27, 29, 35, 36, 37, 38, 39, 43, 46, 59, 61, 62, 63, 64, 66, 67, 136, 195, 242, 251, 295, 317, 318, 320, 328, 330, 335, 338, 355, 367], "error_relative_global_dimensionless_synthesi": 294, "escand": 215, "especi": 366, "esrgan": 85, "esrgandiscrimin": 355, "essenti": 170, "est": [108, 117, 129, 144, 145, 146, 147, 148, 150, 276, 288, 290, 310, 312, 313, 337, 338], "est_sigma": 330, "estim": [26, 42, 47, 48, 49, 65, 66, 71, 72, 82, 84, 94, 100, 107, 116, 129, 133, 144, 145, 146, 147, 148, 150, 155, 162, 169, 170, 172, 236, 238, 240, 241, 279, 290, 294, 305, 306, 310, 318, 319, 329, 330, 346, 355, 357, 359, 360, 364], "estimt": 305, "et": [43, 54, 55, 56, 57, 58, 69, 74, 75, 77, 78, 80, 82, 85, 92, 93, 98, 102, 222, 223, 244, 245, 254, 276, 279, 283, 285, 294, 296, 301, 309, 312, 318, 319, 323, 324, 364], "eta": [95, 108, 172, 179, 234, 235, 239, 240, 316, 319, 320], "eta_0": 316, "eta_backtrack": 108, "etab": [234, 317], "etc": [26, 29, 52, 117, 241, 247, 260, 279, 291, 294, 316, 342, 345, 348, 350, 353, 360, 361, 363, 370], "ethz": 21, "euclidean": [110, 143, 245, 258, 259, 296, 324, 370], "eugenesiow": 25, "eval": [12, 43, 279, 294, 295, 309, 312, 313, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "eval_dataload": [12, 242, 279, 295, 324, 326, 327, 329, 334, 335, 336, 337, 339], "eval_interv": 12, "eval_metr": 12, "eval_mod": [30, 33], "eval_n_sampl": [40, 43, 328], "eval_psnr": 243, "eval_split_input": [43, 328], "eval_split_output": [43, 328], "evalu": [3, 12, 22, 25, 26, 33, 39, 42, 43, 66, 68, 70, 99, 117, 130, 131, 155, 172, 179, 222, 229, 241, 242, 243, 251, 279, 291, 294, 306, 317, 319, 328, 334, 335, 336, 348, 363, 365, 367, 369], "even": [39, 95, 205, 226, 287, 311, 319], "evenli": 26, "eventu": 279, "everi": [12, 76, 78, 80, 88, 90, 91, 92, 101, 203, 204, 243, 290, 319, 370], "everywher": 318, "evid": 316, "evlauaton": 117, "exact": [160, 172, 195, 247, 251, 279, 286, 357, 370], "exactli": [27, 155, 216, 218], "exampl": [13, 14, 15, 16, 17, 19, 20, 21, 24, 31, 32, 33, 40, 41, 42, 45, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 84, 100, 101, 117, 121, 139, 176, 196, 198, 230, 250, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 315, 316, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 345, 346, 347, 350, 351, 353, 355, 359, 360, 363, 364, 365, 366, 367, 369, 370], "except": [63, 64, 65, 212, 357], "excit": 289, "exclus": [216, 226], "exdb": [328, 335], "execut": [278, 281, 298, 304, 306, 308, 315, 322, 323, 325, 332, 333, 338, 341, 347], "exist": [13, 14, 17, 18, 21, 22, 24, 25, 26, 27, 39, 65, 160, 166, 171, 172, 178, 179, 185, 188, 195, 263, 323, 329, 348, 351, 353, 357, 358, 363, 367, 370], "exp": [126, 127, 169, 173, 201, 225, 290, 293, 354, 360], "expand": [251, 282, 289], "expans": [215, 320, 364, 366], "expect": [14, 21, 84, 95, 116, 155, 162, 164, 168, 171, 172, 179, 222, 265, 267, 299, 306, 307, 308, 323, 347], "expens": 160, "experi": [80, 276, 285, 294, 324, 346, 350], "experiment": [306, 323, 325, 338], "explain": [272, 285, 345], "explan": 367, "explicit": [18, 26, 108, 114, 124, 135, 136, 143, 159, 162, 168, 172, 179, 201, 239, 241, 263, 292, 297, 298, 299, 312, 336, 347, 353, 359, 360], "explicit_prior": [136, 283, 312], "explicitli": [306, 323, 325, 338], "exploit": [290, 291, 316, 327, 329], "explor": [282, 289], "expon": 69, "export": 306, "exposit": 19, "express": [162, 289], "ext": 365, "extend": [36, 276, 279, 300, 305, 323, 337, 368], "extens": [26, 272], "extern": 365, "extra": [40, 172, 251, 323, 353], "extract": [19, 84, 92, 116, 269, 279, 290, 293, 294, 305, 306, 324, 328, 335, 350, 352], "extract_loc": [269, 276], "extract_s": [269, 276], "ey": 174, "f": [30, 33, 48, 89, 98, 106, 107, 108, 109, 117, 120, 122, 124, 125, 129, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 162, 166, 172, 174, 176, 183, 184, 186, 192, 193, 194, 202, 236, 238, 251, 257, 258, 259, 276, 282, 285, 287, 289, 290, 291, 293, 296, 301, 302, 306, 310, 311, 313, 316, 317, 318, 320, 330, 359, 360, 363, 365, 367, 369, 370], "f_": [251, 285, 295, 296, 370], "f_fn": [129, 143, 258, 259, 310], "f_k": 117, "f_matern": 225, "f_step": [309, 310, 312, 313, 337], "f_x": 225, "f_y": 225, "face": [286, 319], "facebookresearch": 221, "factor": [40, 59, 92, 97, 118, 124, 161, 165, 172, 177, 199, 200, 202, 217, 237, 245, 248, 252, 255, 276, 292, 294, 305, 312, 323, 335, 336, 339, 353], "factory_kwarg": 220, "fail": [102, 328, 335], "faint": 276, "faintest": 276, "fake": [51, 52, 53, 93], "fake_label": 52, "fall": 110, "fals": [12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 33, 39, 43, 47, 48, 52, 61, 62, 63, 64, 65, 66, 70, 71, 72, 75, 80, 82, 86, 93, 95, 96, 97, 98, 99, 102, 108, 117, 129, 130, 131, 134, 142, 143, 144, 145, 146, 153, 154, 155, 156, 160, 161, 166, 174, 175, 176, 181, 184, 185, 186, 188, 193, 195, 203, 204, 205, 208, 212, 216, 218, 234, 235, 236, 237, 238, 239, 240, 241, 243, 247, 251, 256, 257, 258, 259, 260, 264, 265, 267, 269, 270, 272, 276, 279, 282, 283, 284, 288, 292, 293, 294, 295, 300, 302, 305, 306, 309, 310, 312, 313, 318, 319, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 360, 365], "famili": [282, 354, 358], "familiar": 343, "fan": [195, 204], "fan_beam": [195, 204], "fan_paramet": [195, 204], "fashion": [160, 171, 178, 185, 188, 218, 223, 260, 338, 363], "fast": [73, 99, 147, 159, 160, 166, 171, 174, 186, 188, 244, 249, 292, 335, 336, 343, 352, 360], "fasten": [283, 284, 295, 309, 310, 312, 313, 325, 327, 329, 330, 334, 335, 336, 338, 339], "faster": [16, 195, 203, 204, 276, 282, 301, 302, 325, 343, 352], "fastmri": [16, 68, 70, 221, 323, 325], "fastmri_knee_singlecoil": [323, 325], "fastmrislicedataset": 365, "fbp": 306, "fbpconvnet": 72, "fc": [219, 220, 228, 282, 289], "fdfd": 193, "featur": [73, 90, 91, 92, 306, 323, 325, 338, 345, 352], "feb": 342, "feed": 75, "feedforward": 95, "fenchel": [145, 310], "fetch": [283, 284, 301, 302, 309, 310, 313], "few": [172, 286, 295, 306, 323, 338], "ffhq": [82, 319, 364], "ffn_expansion_factor": 95, "fft": [158, 159, 175, 184, 193, 206, 207, 209, 210, 276, 282, 289, 352], "fftn": 175, "fid1": 139, "fid2": 139, "fidel": [26, 84, 106, 108, 113, 114, 116, 117, 118, 120, 124, 125, 129, 139, 143, 145, 153, 235, 236, 257, 258, 259, 276, 283, 288, 290, 293, 301, 302, 309, 310, 311, 312, 313, 334, 335, 336, 338, 339, 348, 349, 353, 359, 363], "field": [15, 16, 20, 98, 99, 228, 232, 244], "fifa": [285, 316, 317, 320], "fig": 267, "figsiz": [267, 269, 270, 272, 289, 293, 300, 318], "figur": [95, 267, 269, 270, 272, 287, 318], "file": [12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 26, 42, 84, 95, 116, 130, 160, 171, 178, 185, 188, 264, 265, 272, 278, 281, 286, 298, 304, 306, 308, 315, 322, 323, 325, 332, 333, 338, 341, 343, 347, 350, 365], "file1000005": 16, "file_nam": [288, 294, 323, 325, 326, 327, 328, 329], "file_typ": 276, "filenam": [15, 20, 26, 269, 272], "fill": [266, 273, 274, 275, 323], "filter": [72, 74, 89, 158, 159, 165, 172, 177, 187, 189, 195, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 219, 220, 224, 225, 227, 228, 282, 283, 285, 289, 292, 296, 301, 306, 309, 311, 312, 316, 334, 337, 339, 352, 353, 357, 359], "filter_0": [282, 289], "filter_90": 282, "filter_rgb": 282, "filter_torch": 283, "final": [79, 82, 83, 87, 96, 97, 282, 289, 290, 306, 356, 367], "final_est": 293, "find": [75, 82, 152, 179, 187, 236, 256, 279, 337, 350], "find_nearest": [82, 236, 318], "find_spec": 288, "fine": [279, 306, 323], "finish": [129, 153, 154, 312, 316, 317, 320], "finit": [98, 99, 140, 336, 360], "firm": [30, 364], "firmli": [320, 366], "first": [19, 50, 82, 84, 95, 108, 115, 116, 129, 155, 166, 174, 177, 186, 187, 188, 192, 193, 194, 198, 241, 251, 267, 270, 276, 279, 282, 287, 289, 290, 292, 294, 296, 300, 301, 302, 318, 319, 323, 336, 337, 353, 356, 360], "firstli": 318, "fista": [147, 276, 360], "fit": [75, 155, 306, 369], "fix": [19, 108, 117, 129, 166, 172, 174, 179, 186, 217, 221, 222, 229, 245, 251, 256, 286, 288, 309, 334, 335, 336, 338, 339, 360, 363], "fixed_point": [309, 312, 313], "fixedpoint": [108, 129, 256, 309, 312, 313, 360, 363], "flat": [161, 166, 174, 176, 177, 186, 218, 294], "flatten": [100, 103, 104, 130, 142, 166, 186, 194, 251, 260, 300, 317, 320, 323, 357, 360], "flatten_c": 194, "flatten_coeff": 103, "flatten_video_input": 251, "flavour": [52, 366], "fledg": 317, "flexibl": [267, 357, 369], "flickr": 365, "flickr2k": 17, "flickr2khr": 365, "flip": [86, 160, 246, 306, 323, 325, 338], "float": [12, 16, 29, 30, 33, 37, 38, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 68, 69, 70, 73, 74, 75, 79, 80, 81, 83, 84, 87, 88, 89, 92, 95, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 132, 133, 134, 135, 138, 140, 141, 142, 143, 147, 155, 156, 157, 159, 160, 162, 166, 167, 168, 169, 171, 172, 173, 179, 180, 181, 184, 186, 187, 192, 193, 196, 197, 201, 202, 203, 204, 211, 212, 217, 218, 219, 220, 221, 222, 223, 224, 225, 229, 230, 234, 235, 236, 237, 238, 239, 240, 245, 247, 249, 252, 253, 254, 255, 256, 257, 258, 259, 269, 276, 292, 336, 360], "float16": 82, "float32": [18, 82, 160, 188, 195, 198, 203, 204, 218, 219, 220, 225, 227, 230, 264, 265, 282, 289, 306, 318, 319], "float64": [108, 117, 279, 283, 295, 309, 312, 323, 325, 326, 327, 328, 329, 330, 337, 338], "flow": [130, 306, 360], "fluoresc": [15, 289, 365], "fly": [68, 70, 166, 171, 174, 176, 186, 282, 337], "fmd": 365, "fn": [107, 110, 111, 112, 114, 115, 119, 121, 122, 123, 125, 127, 128, 130, 131, 134, 135, 139, 140, 141, 142, 283], "fname": [15, 16], "fne": 30, "fnejacobianspectralnorm": [320, 366], "focu": [289, 294], "focuss": 16, "folder": [13, 14, 15, 17, 18, 22, 24, 25, 26, 262, 309, 312, 334, 335, 336, 365], "foldernam": [15, 20], "follow": [9, 12, 13, 14, 16, 17, 21, 22, 24, 25, 34, 47, 48, 49, 52, 56, 59, 71, 103, 108, 142, 161, 167, 202, 215, 219, 235, 236, 240, 257, 276, 279, 282, 283, 288, 289, 294, 300, 301, 302, 306, 309, 310, 313, 316, 318, 319, 320, 335, 337, 338, 343, 346, 349, 353, 355, 357, 359, 360, 363, 364, 370], "font": 318, "fontsiz": [267, 270, 300], "forbidden": [328, 335], "forc": 88, "forget": 136, "fork": [244, 343], "form": [103, 104, 117, 118, 120, 126, 127, 129, 159, 160, 172, 179, 195, 257, 291, 295, 300, 317, 324, 336, 343, 351, 353, 359, 360, 363], "formal": 300, "format": [12, 26, 103, 276, 286, 300, 305, 306, 365], "former": [76, 78, 88, 90, 91, 92, 101, 203, 204, 319, 368], "formul": 370, "formula": [42, 51, 53, 135, 138, 160, 165, 172, 179, 195, 319, 320, 361], "forw": [29, 35, 37, 43, 56, 114, 118, 120, 124, 139, 178, 179, 182, 279, 348, 349, 353, 355, 359], "forw_model": 111, "forward": [6, 12, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 114, 115, 116, 117, 118, 120, 129, 130, 135, 144, 145, 146, 147, 148, 150, 152, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 195, 196, 197, 198, 201, 203, 204, 215, 217, 221, 222, 227, 229, 233, 234, 235, 236, 238, 240, 241, 242, 243, 251, 256, 259, 263, 265, 267, 279, 282, 283, 284, 294, 297, 298, 299, 311, 312, 319, 325, 328, 335, 336, 337, 345, 347, 348, 351, 353, 354, 355, 357, 360, 361, 363, 365, 366, 368, 370], "forward_denois": 82, "forward_diffus": 82, "forward_restorm": 95, "found": [104, 292, 317, 323, 353], "four": 290, "fourier": [166, 174, 176, 183, 184, 186, 193, 276, 283, 292, 352], "fov": [15, 232, 293], "fr": [112, 311, 342], "frac": [30, 33, 40, 42, 43, 47, 48, 49, 68, 86, 98, 99, 107, 108, 110, 114, 118, 120, 121, 122, 124, 125, 135, 138, 139, 141, 160, 162, 172, 173, 179, 180, 181, 185, 195, 201, 225, 235, 236, 239, 240, 256, 276, 283, 300, 301, 302, 316, 318, 319, 320, 328, 329, 330, 335, 336, 354, 359, 361, 363, 367], "fraction": [16, 170, 217, 249, 269], "frame": [19, 39, 100, 186, 194, 272, 323, 365], "framework": [109, 243, 245, 252, 253, 254, 255, 290, 294, 324, 345, 366], "franc": 342, "fraunhoff": [219, 220], "free": [27, 39, 95, 102, 216, 226, 263, 324, 328], "freeli": 319, "freia": 130, "freifeld": 244, "french": 342, "freq": [217, 221], "freq_plot": 12, "frequenc": [12, 92, 217, 219, 220, 221, 222, 229, 276, 282, 289, 310], "fresnel": [219, 220, 282, 289], "frobeniu": 98, "from": [1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 114, 116, 117, 121, 129, 130, 136, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 183, 185, 186, 188, 189, 193, 194, 195, 196, 197, 198, 203, 204, 212, 216, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 234, 235, 236, 240, 243, 244, 245, 246, 247, 251, 252, 253, 254, 255, 256, 261, 262, 263, 264, 265, 267, 269, 270, 272, 276, 278, 279, 281, 282, 283, 284, 287, 288, 289, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 315, 318, 319, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 345, 346, 347, 348, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "from_numpi": [276, 289, 300, 318, 319], "from_torch_complex": 175, "front": [118, 135], "fstep": [337, 360], "fstepcv": 310, "fstephq": 309, "fsteppdnet": 337, "fsteppgd": [312, 313], "full": [17, 27, 29, 37, 39, 42, 43, 174, 176, 245, 252, 253, 255, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 357], "fulli": [43, 73, 88, 102, 317, 318, 325, 326, 327, 329, 330, 357], "funcanim": 272, "function": [2, 3, 8, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 33, 34, 36, 37, 38, 40, 43, 44, 47, 51, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 76, 78, 80, 82, 83, 86, 88, 90, 91, 92, 99, 101, 107, 108, 109, 114, 115, 116, 117, 118, 119, 121, 124, 125, 129, 130, 131, 133, 134, 135, 136, 139, 142, 143, 144, 145, 146, 152, 155, 156, 157, 158, 160, 161, 162, 172, 175, 177, 179, 182, 183, 187, 192, 194, 195, 198, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 222, 225, 227, 229, 237, 238, 239, 240, 241, 242, 243, 251, 256, 258, 259, 272, 276, 279, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 301, 302, 306, 309, 310, 312, 318, 319, 323, 324, 325, 326, 330, 334, 335, 336, 337, 338, 339, 348, 349, 355, 357, 358, 360, 363, 366, 367, 370], "function_handl": [238, 239, 240], "functool": 65, "further": [244, 246, 247, 249, 250, 279, 290, 346, 366, 370], "furthermor": [74, 328], "fusion": 69, "futur": [72, 160, 242, 306, 323, 325, 338, 343], "futurewarn": [294, 306, 323, 325, 338], "fx": [192, 193], "fx_t": 166, "g": [12, 13, 14, 15, 16, 17, 18, 19, 21, 24, 25, 26, 27, 29, 35, 36, 37, 38, 39, 43, 46, 52, 65, 68, 75, 84, 86, 92, 98, 99, 101, 108, 116, 117, 121, 123, 129, 131, 136, 137, 140, 141, 142, 143, 145, 150, 152, 153, 154, 158, 159, 161, 163, 164, 166, 167, 170, 171, 174, 176, 181, 184, 186, 193, 194, 195, 198, 201, 218, 223, 227, 228, 231, 235, 237, 243, 246, 251, 257, 258, 259, 272, 276, 279, 284, 287, 289, 296, 299, 300, 301, 302, 306, 310, 312, 316, 319, 323, 326, 335, 336, 355, 357, 358, 359, 360, 363, 365, 366, 367, 369, 370], "g1": 224, "g2": 224, "g_": [80, 300, 335, 359, 360], "g_first": [129, 143, 144, 145, 146, 153, 154, 257, 258, 259, 283, 288, 312, 336, 338, 360], "g_i": [37, 251, 326], "g_param": [117, 143, 257, 259, 288, 290, 309, 310, 311, 312, 313, 316, 334, 336, 338, 339, 346, 359, 360, 363], "g_statist": [237, 238, 239, 240], "g_step": [309, 310, 312, 313, 337], "gain": [48, 49, 133, 134, 180, 181, 292, 311, 329], "galleri": [267, 270, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 347], "game": [279, 355, 366], "gamma": [38, 42, 47, 48, 49, 99, 103, 108, 109, 114, 118, 119, 120, 121, 122, 123, 124, 125, 132, 134, 135, 139, 140, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 162, 165, 167, 172, 180, 181, 257, 279, 301, 302, 310, 318, 327, 329, 335, 336, 354, 359, 360, 366], "gamma_backtrack": 108, "gamma_distribut": 167, "gammanois": 42, "gan": [51, 52, 53, 54, 55, 348, 358, 366], "gaofen": [22, 294], "gaussian": [15, 40, 42, 44, 47, 48, 81, 84, 116, 124, 138, 139, 155, 160, 164, 165, 168, 172, 177, 180, 185, 187, 196, 201, 222, 223, 225, 230, 236, 240, 274, 276, 283, 284, 285, 287, 290, 292, 294, 296, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 329, 330, 334, 335, 336, 339, 349, 353, 355, 361, 366], "gaussian_blur": [282, 283, 292, 311, 353, 354], "gaussian_filt": [158, 159], "gaussianmaskgener": [292, 323, 354], "gaussianmixturemodel": [84, 116], "gaussiannois": [40, 42, 44, 139, 164, 177, 234, 236, 283, 284, 285, 291, 292, 296, 300, 301, 302, 305, 309, 310, 312, 313, 316, 317, 318, 320, 328, 330, 334, 337, 339, 346, 353, 354, 359, 365], "gaussiansplittingmaskgener": [328, 354], "gb": 82, "gd": [143, 148, 150, 256, 257, 258, 259, 290, 334, 360], "gdfn": 95, "gditer": 290, "gen": [171, 218, 223], "gener": [3, 12, 18, 26, 27, 28, 29, 31, 36, 37, 39, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 69, 75, 77, 78, 80, 84, 85, 98, 116, 118, 120, 129, 130, 145, 160, 166, 167, 168, 171, 172, 173, 174, 176, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 192, 196, 197, 198, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 238, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 276, 286, 288, 292, 294, 296, 299, 300, 305, 306, 310, 311, 312, 313, 319, 323, 324, 328, 337, 343, 348, 351, 355, 356, 357, 358, 359, 360, 363, 364, 366, 367, 369, 370], "generalis": 98, "generate_coeff": 219, "generate_dataset": [12, 18, 279, 283, 284, 295, 309, 312, 325, 326, 327, 328, 329, 330, 334, 335, 336, 338, 339, 365], "generate_shift": [182, 183, 293, 354], "generated_dataset_path": 365, "generated_datasets_path": [334, 335, 336, 339], "generator2d": 220, "generator_col": 289, "generatorloss": [55, 56, 58, 366], "generatormixtur": [227, 282, 353], "geometr": [9, 86, 170, 245, 252, 253, 255, 324, 370], "geometri": [195, 204, 324], "geq": [40, 43, 47, 82, 133, 238, 239, 240, 276], "get": [12, 19, 82, 108, 155, 235, 236, 251, 263, 279, 287, 318, 319, 325, 326, 327, 328, 329, 330, 334, 335, 336, 339, 343], "get_alpha": 318, "get_alpha_beta": 236, "get_alpha_prod": [82, 236], "get_beta": 319, "get_chain": 238, "get_cov": 155, "get_cov_inv_reg": 155, "get_data_hom": [279, 294, 324, 326, 327, 328, 329, 330, 335, 336, 350, 365], "get_degradation_url": 276, "get_dpir_param": 309, "get_freer_gpu": [234, 236, 279, 283, 284, 285, 287, 288, 289, 290, 292, 293, 295, 300, 301, 302, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 350], "get_gspnp_param": 312, "get_image_dataset_url": 276, "get_image_url": [61, 66, 282, 290, 292, 293, 296, 305, 310, 311, 313, 318, 319, 324], "get_item": 19, "get_model": 279, "get_noise_schedul": [236, 318], "get_output": [108, 312, 337], "get_overlap_img": [183, 293], "get_param": 251, "get_pdf": [222, 229], "get_sampl": 12, "get_samples_offlin": [12, 369], "get_samples_onlin": [12, 369], "get_structur": 193, "get_weight": 155, "get_weights_url": [279, 288, 294, 323, 324, 325, 326, 327, 328, 329], "gfp": 289, "gfz": [184, 276], "gif": 272, "git": [299, 346], "github": [98, 99, 299, 306, 323, 325, 337, 338, 343, 345, 346, 364], "give": [19, 20, 24, 25, 220, 245, 317], "given": [12, 16, 30, 33, 43, 108, 117, 131, 138, 145, 146, 147, 148, 149, 150, 151, 152, 166, 167, 171, 172, 186, 187, 195, 204, 217, 218, 219, 220, 221, 223, 224, 229, 251, 260, 279, 283, 289, 290, 293, 300, 305, 306, 318, 348, 358, 361], "global": [59, 244, 282, 283, 284, 285, 289, 290, 292, 293, 295, 300, 301, 302, 309, 310, 311, 312, 313, 320, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339, 367], "gmm": [84, 116, 155, 305, 306], "gmm_bsds_color2": 305, "gmm_lodopab_smal": [84, 116], "gmm_lodopab_small2": 306, "go": [16, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "goal": [301, 302], "good": [95, 195, 285, 290, 295, 338, 355, 358], "goodfellowliu": 17, "googl": [299, 306], "gopro": 19, "gp": 225, "gpu": [26, 72, 79, 83, 87, 95, 96, 100, 101, 103, 104, 155, 163, 166, 170, 171, 174, 176, 182, 183, 186, 187, 195, 203, 204, 231, 234, 241, 244, 263, 264, 265, 283, 284, 293, 295, 309, 310, 312, 313, 325, 326, 327, 329, 330, 334, 335, 336, 338, 339, 350], "gpu_numb": 368, "grad": [107, 109, 110, 112, 114, 122, 124, 125, 128, 134, 135, 136, 137, 138, 139, 141, 276, 293, 316, 319, 360], "grad_clip": 12, "grad_conj": [110, 112, 128, 135], "grad_d": [114, 139], "grad_f": 157, "grad_ll": 319, "gradient": [12, 29, 38, 47, 48, 75, 87, 98, 99, 107, 109, 110, 112, 114, 115, 117, 122, 124, 125, 128, 134, 135, 136, 137, 139, 141, 143, 148, 151, 156, 157, 160, 165, 172, 177, 179, 195, 235, 243, 256, 257, 258, 259, 260, 283, 301, 302, 306, 310, 312, 313, 319, 320, 327, 330, 337, 339, 359, 360, 363, 364, 369], "gradient_desc": 360, "gradientstep": 312, "grai": [84, 116, 234, 236, 267, 269, 270, 283, 284, 290, 292, 295, 301, 302, 309, 310, 311, 312, 313, 334, 337, 338, 339], "grayscal": [161, 177, 264, 265, 282, 289, 290, 291, 292, 293, 305, 310, 313, 346, 353, 357, 359, 364], "great": 279, "greater": [43, 147, 220], "green": 163, "grid": [184, 187, 228, 248, 267, 270, 276, 305, 306], "grid_siz": 276, "ground": [12, 15, 16, 18, 19, 27, 28, 39, 46, 54, 55, 67, 117, 216, 226, 241, 243, 279, 285, 294, 295, 301, 302, 305, 306, 310, 311, 313, 316, 317, 318, 319, 320, 323, 324, 328, 334, 335, 336, 338, 339, 355, 358, 366, 369], "groundtruth": [300, 319, 323], "group": [29, 36, 86, 246, 251, 296, 324, 325, 357, 370], "grow": 300, "gsdrunet": [312, 357, 364], "gsdrunet_torch": 312, "gspnp": 312, "gstep": [337, 360], "gstepcv": 310, "gstephq": 309, "gsteppdnet": 337, "gsteppgd": [312, 313], "gt": [15, 276, 294, 301, 302, 310, 311, 313, 335, 336], "gu": [113, 289, 309], "guess": [75, 179, 236, 276, 290, 330, 360], "guid": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 43, 294, 346, 353], "gz": [21, 25, 328, 335], "h": [27, 39, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 80, 92, 95, 97, 100, 101, 109, 110, 112, 117, 131, 135, 150, 158, 159, 160, 161, 163, 165, 166, 170, 171, 174, 175, 176, 177, 184, 185, 186, 187, 188, 189, 192, 193, 194, 198, 205, 206, 207, 208, 209, 210, 215, 216, 217, 218, 219, 221, 222, 223, 226, 228, 229, 251, 267, 270, 272, 276, 287, 289, 292, 300, 306, 323, 336, 357, 360, 367, 370], "h5": [16, 279, 283, 284, 295, 309, 312, 325, 326, 327, 328, 329, 330, 334, 335, 336, 338, 339, 365], "h5py": [16, 18, 26, 365], "h_": [135, 289], "h_k": [189, 215], "ha": [13, 14, 15, 16, 17, 21, 24, 25, 38, 43, 79, 82, 103, 108, 117, 135, 156, 158, 159, 160, 165, 166, 171, 174, 177, 186, 188, 189, 195, 199, 200, 205, 207, 208, 209, 210, 215, 218, 234, 235, 267, 269, 270, 276, 279, 283, 284, 285, 287, 291, 294, 295, 309, 311, 312, 317, 318, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 353, 355, 369], "haar": 300, "hackathon": 342, "hadamard": [188, 189, 215, 292, 310], "hal": 145, "half": [84, 113, 116, 143, 149, 212, 236, 257, 258, 259, 261, 305, 306, 309, 323, 325, 334, 360], "hand": [357, 358], "handl": [81, 82, 184, 223, 234, 235, 251], "hard": [103, 104], "hard_threshold_topk": 103, "has_cost": [108, 129, 310], "hat": [29, 36, 37, 40, 43, 50, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 279, 319, 326, 348, 355, 358, 367], "hauptmann": 337, "have": [12, 13, 14, 15, 17, 19, 20, 21, 22, 24, 25, 26, 33, 43, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 75, 82, 86, 95, 115, 162, 166, 172, 174, 175, 176, 179, 184, 186, 187, 188, 198, 234, 243, 257, 272, 276, 283, 285, 286, 287, 290, 294, 299, 305, 306, 313, 317, 318, 319, 323, 324, 325, 326, 328, 338, 344, 353, 357, 358, 364, 366, 367, 369, 370], "haze": 354, "hazi": 169, "hd5": 26, "hd5dataset": 26, "hdf5": [16, 18, 309, 312, 334, 335, 336, 365], "hdf5dataset": [279, 283, 284, 295, 309, 312, 325, 326, 327, 328, 329, 330, 334, 335, 336, 338, 339, 365], "head": [95, 97], "head_dim": 97, "height": [16, 23, 82, 90, 91, 116, 166, 174, 183, 186, 195, 220, 249, 267, 270, 300], "help": [276, 293, 320, 343], "helper": [92, 143, 162, 172, 175, 205, 206, 207, 208, 209, 210, 258, 259, 334, 339], "henc": 246, "hendriksen": 43, "here": [20, 69, 104, 110, 173, 178, 206, 276, 279, 282, 283, 284, 285, 286, 288, 289, 291, 292, 294, 299, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 325, 326, 328, 334, 335, 338, 339, 360, 365], "hereaft": 319, "hessian": 98, "hf": 13, "hf_dataset": 286, "hf_train_dataset": 286, "hfdataset": 286, "hh": 205, "hidden": [77, 78, 82, 88, 93, 97, 130, 306, 364], "high": [24, 25, 69, 92, 95, 170, 177, 217, 221, 222, 229, 276, 279, 292, 294, 364, 365], "higher": [65, 69, 70, 167, 219, 220, 276, 290, 367], "highest": 276, "highli": [158, 335, 336], "highpass_kernel_s": 92, "histogram": [187, 212, 352], "histogramdd": [211, 352], "histori": [12, 108, 117, 256], "history_s": [108, 117, 334], "history_size_backward": [256, 334], "ho": [82, 318, 364], "hold": 108, "home": [276, 279, 287, 288, 290, 292, 294, 305, 306, 309, 310, 312, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 338], "homographi": [252, 253, 254, 255, 324, 370], "hood": [82, 289, 296], "hook": [76, 78, 88, 90, 91, 92, 101, 203, 204], "horizont": [14, 50, 86, 269, 323], "host": [21, 364], "hostedtoolcach": [294, 296, 323], "how": [12, 43, 75, 77, 78, 85, 93, 108, 113, 117, 189, 190, 272, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 300, 301, 302, 305, 309, 310, 311, 313, 316, 317, 318, 319, 320, 323, 325, 326, 327, 328, 329, 330, 334, 335, 336, 339, 348, 353, 355, 369], "howev": [27, 29, 35, 36, 37, 38, 39, 43, 46, 80, 177, 251, 285, 300, 323, 325, 337, 351, 357, 367, 368], "hp": 117, "hq": [113, 143, 149, 236, 256, 257, 258, 259, 309, 334, 346, 360], "hqsiter": 309, "hr": [17, 21, 92], "hr_shape": 92, "hrm": [69, 92, 294], "hrms_shape": [92, 294], "hspace": 117, "html": [70, 77, 78, 98, 99, 176, 267, 270, 272, 343], "http": [12, 13, 16, 17, 20, 21, 25, 29, 30, 33, 37, 40, 42, 47, 48, 49, 62, 70, 72, 77, 78, 83, 86, 90, 91, 98, 99, 112, 145, 156, 160, 163, 165, 167, 169, 176, 187, 195, 204, 219, 225, 234, 235, 236, 239, 240, 245, 254, 267, 270, 272, 279, 282, 285, 286, 288, 289, 290, 294, 299, 300, 305, 306, 310, 311, 312, 316, 317, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 335, 337, 338, 342, 346, 359], "hu": 170, "hub": [95, 279, 288, 290, 294, 305, 306, 309, 310, 312, 319, 320, 323, 324, 325, 326, 327, 328, 329], "hue": 296, "hug": 286, "hugginfacehub": 364, "huggingfac": [13, 17, 25, 95, 267, 279, 288, 289, 290, 294, 297, 298, 299, 300, 305, 306, 310, 312, 319, 320, 323, 324, 325, 326, 327, 328, 329, 346, 347, 359, 364], "human": 319, "hurault": [312, 345], "hv110_p0500510000": 15, "hv110_p0500510049": 15, "hybrid": 357, "hyperparamet": [47, 103, 104, 113, 162, 172, 234, 235, 236, 305, 316, 319, 320, 335, 336, 349, 355, 360], "hyperspectr": [170, 294], "hyperspectralunmix": 354, "i": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 229, 230, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 264, 265, 267, 269, 270, 272, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370], "ib": [284, 295, 301, 309, 323, 338, 339], "iccv": [92, 116], "icm": 342, "icnn": [111, 357], "id": [30, 112, 300, 306, 311], "idea": 343, "ideal": 52, "ident": [30, 47, 108, 117, 152, 162, 164, 172, 179, 238, 239, 240, 251, 292, 305, 310], "identif": 353, "identifi": [15, 16, 20], "idri": 20, "idx": 318, "idx1": [328, 335], "idx3": [328, 335], "ie": [192, 224, 353], "ieee": [40, 47, 48, 49, 62, 74, 99, 113, 169, 187, 309, 337], "ieeexplor": [40, 47, 48, 49, 62, 169, 187], "ifft": 175, "ignor": [26, 37, 43, 76, 78, 86, 88, 90, 91, 92, 101, 166, 170, 174, 176, 186, 203, 204, 217, 218, 221, 222, 229, 251, 276, 284, 296, 357], "ii": 276, "iid": [160, 188], "ikono": 22, "ill": [289, 366], "illumin": 289, "illustr": [282, 360], "ilvr_adm": 82, "im": [276, 319], "im_siz": 276, "im_width": 195, "imag": [6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 34, 35, 36, 37, 38, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 108, 113, 114, 116, 118, 121, 124, 130, 131, 132, 135, 136, 139, 140, 142, 143, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 198, 201, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 219, 220, 222, 223, 225, 226, 227, 228, 231, 232, 234, 236, 237, 238, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 272, 277, 278, 280, 281, 282, 286, 288, 289, 297, 298, 299, 303, 304, 311, 314, 315, 318, 319, 321, 322, 323, 328, 331, 332, 337, 340, 341, 342, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 359, 361, 364, 365, 366, 367, 370], "image_gdth": 276, "image_srf_2": 24, "image_srf_3": 24, "image_srf_4": 24, "imagefold": [279, 284, 324, 365], "imageio": 289, "imagenet128": [82, 364], "imageri": [22, 294], "images_contours_and_field": [267, 270], "imagin": 170, "imaginari": [105, 166, 174, 176, 186, 292], "imbalanc": 243, "img": [15, 23, 85, 183, 267, 270, 272, 276, 290, 301, 302, 306, 310, 311, 313, 316, 317, 318, 319, 320], "img1": 267, "img2": 267, "img3": 267, "img_001": 25, "img_001_srf_2_bicub": 24, "img_014_srf_2_srcnn": 24, "img_100": 25, "img_list": [267, 269, 270], "img_rang": 97, "img_shap": [76, 160, 185, 188, 285, 290, 292, 310, 335, 336, 353, 365], "img_siz": [61, 66, 97, 159, 163, 165, 166, 172, 174, 176, 177, 182, 183, 184, 186, 189, 217, 221, 222, 228, 229, 231, 232, 264, 265, 276, 282, 283, 284, 285, 288, 290, 292, 293, 295, 301, 302, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 325, 334, 335, 336, 337, 338, 339, 346, 353, 359], "img_transform": 286, "img_typ": 15, "img_width": [195, 292, 306, 313, 328, 337], "immers": [220, 289], "implement": [19, 27, 39, 43, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 77, 78, 81, 82, 83, 85, 86, 88, 93, 97, 99, 101, 113, 114, 117, 124, 125, 129, 133, 135, 136, 145, 155, 158, 162, 168, 171, 172, 179, 184, 189, 194, 211, 212, 213, 214, 217, 221, 229, 234, 235, 236, 244, 251, 263, 265, 267, 276, 279, 282, 289, 291, 292, 293, 296, 299, 300, 310, 321, 322, 323, 324, 328, 335, 336, 337, 347, 348, 352, 355, 360, 366, 367, 369, 370], "implicit": [136, 256, 285, 360, 363], "implicitli": [98, 99, 306, 313, 323, 325, 338, 359, 360], "import": [13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 27, 31, 32, 33, 39, 40, 41, 42, 43, 44, 45, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 100, 101, 108, 117, 121, 124, 139, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 176, 177, 180, 181, 186, 188, 189, 195, 196, 197, 198, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 234, 236, 243, 245, 251, 252, 253, 254, 255, 259, 267, 270, 272, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 346, 350, 352, 353, 357, 359, 360, 363, 365, 366, 367, 368, 370], "importlib": 288, "impos": 324, "improv": [39, 47, 72, 226, 279, 285, 290, 328, 337, 348], "impuls": [187, 189, 282, 287], "in_chan": 97, "in_channel": [79, 82, 83, 87, 88, 90, 91, 95, 102, 259, 279, 290, 295, 310, 313, 324, 326, 327, 328, 329, 330], "in_nc": 96, "in_shap": [182, 293], "in_siz": [76, 195, 203, 204, 285], "includ": [7, 12, 16, 18, 26, 27, 39, 40, 43, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 83, 94, 155, 161, 178, 192, 193, 207, 210, 212, 216, 218, 226, 241, 245, 251, 252, 253, 255, 290, 293, 294, 305, 318, 324, 342, 353, 355, 359, 361, 365, 367], "incom": [256, 363], "incomplet": [12, 18, 26, 29, 34, 35, 36, 37, 72, 81, 94, 102, 160, 162, 171, 172, 179, 195, 262, 263, 285, 299, 317, 320, 331, 332, 347, 366], "incorpor": [166, 171, 172, 179, 184, 276, 290], "increas": [43, 84, 102, 116, 276, 279, 282, 300, 323], "inde": [172, 313], "independ": [16, 100, 160, 185, 188, 225, 248, 357, 366], "index": [12, 19, 44, 69, 70, 155, 191, 220, 251, 263, 272, 289, 296, 301, 309, 312, 334, 353], "index_select": 319, "indic": [16, 19, 103, 117, 118, 119, 142, 219, 238, 292, 338, 360], "indicatorl2": [288, 338, 360], "individu": [12, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 267, 272], "induc": [19, 276, 302], "induct": 355, "inexact": 48, "inf_lr": 75, "inf_max_it": 75, "inf_progress_bar": 75, "inf_tol": [75, 279], "inf_z": [138, 361], "infer": [12, 42, 75, 203, 204, 212, 279, 355], "inferno": 276, "infinit": [256, 363], "info": [26, 244, 309, 357], "inform": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 26, 70, 94, 108, 155, 172, 179, 190, 191, 241, 276, 290, 293, 294, 295, 325, 326, 327, 329, 330, 338, 357, 366], "infti": [118, 119, 142, 338], "inherit": [65, 81, 94, 166, 174, 186, 282, 283, 291, 312, 316, 337, 351, 353, 358, 360, 361, 366, 367, 368, 370], "init": [37, 272, 288, 330], "init_anderson_acceler": 117, "init_iterate_fn": 117, "init_metrics_fn": 117, "init_param": [271, 335, 336, 339], "initi": [12, 47, 48, 75, 79, 80, 82, 83, 87, 96, 97, 108, 116, 117, 130, 155, 178, 179, 227, 236, 271, 288, 293, 300, 306, 312, 313, 318, 319, 323, 325, 326, 327, 329, 330, 335, 336, 338, 339, 354, 360], "initialis": [43, 117, 161, 166, 172, 174, 186], "inner": [140, 239], "inner_it": 239, "inpaint": [12, 18, 26, 34, 43, 46, 81, 103, 108, 114, 116, 118, 124, 132, 135, 136, 142, 143, 162, 163, 164, 168, 172, 179, 218, 223, 234, 236, 241, 257, 259, 263, 265, 267, 268, 285, 288, 295, 296, 299, 303, 304, 307, 308, 317, 318, 319, 320, 323, 324, 326, 340, 341, 345, 346, 347, 353, 354, 359, 360, 363], "inpu": 12, "input": [9, 12, 16, 27, 28, 30, 33, 34, 39, 40, 43, 47, 48, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 101, 102, 103, 105, 112, 117, 128, 129, 130, 138, 143, 144, 145, 146, 147, 148, 150, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 169, 170, 171, 175, 177, 178, 181, 182, 183, 184, 185, 186, 187, 189, 192, 193, 194, 195, 198, 203, 204, 216, 218, 223, 226, 231, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 279, 283, 285, 287, 292, 294, 300, 301, 302, 309, 310, 311, 312, 313, 318, 319, 328, 337, 339, 352, 353, 354, 355, 357, 360, 370], "input_mask": [216, 218, 223, 226, 323], "input_nc": 93, "input_resolut": 96, "input_s": [80, 198, 285], "input_shap": [85, 192, 193], "inria": 342, "inscrib": 195, "inset": [269, 350], "inset_loc": [269, 276], "inset_s": [269, 276], "insid": [3, 95, 119, 195, 238, 289, 330, 367], "inspir": [72, 117, 236], "instal": [20, 74, 103, 104, 176, 244, 272, 276, 299, 323, 343, 346, 370], "instanc": [76, 78, 88, 90, 91, 92, 101, 108, 117, 129, 136, 143, 144, 145, 146, 147, 148, 150, 152, 203, 204, 242, 257, 258, 259, 282, 283, 289, 310, 318, 336, 337, 360, 368, 369], "instanti": [13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 108, 189, 224, 276, 282, 283, 289, 290, 301, 302, 309, 310, 312, 313, 353], "instead": [19, 30, 43, 72, 76, 78, 88, 90, 91, 92, 99, 101, 149, 158, 160, 176, 185, 203, 204, 211, 212, 216, 226, 242, 244, 276, 279, 294, 300, 323, 337, 355, 368], "institut": 342, "instruct": 95, "int": [12, 15, 16, 19, 23, 26, 27, 28, 30, 31, 32, 33, 39, 40, 41, 42, 43, 45, 59, 62, 73, 75, 76, 77, 78, 79, 80, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 103, 104, 108, 116, 117, 118, 120, 121, 130, 131, 135, 140, 142, 143, 155, 156, 157, 160, 161, 165, 168, 170, 172, 173, 176, 177, 179, 180, 181, 183, 184, 185, 187, 188, 193, 194, 195, 196, 197, 199, 200, 202, 203, 204, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 264, 265, 267, 269, 270, 272, 276, 290, 292, 295, 316, 318, 320, 325, 326, 327, 329, 334, 337, 338, 339, 369], "intanc": 150, "integ": [176, 238, 239, 240, 247, 249, 324], "integr": [14, 21, 195, 215, 330, 370], "intend": [175, 323], "intens": [169, 183, 187, 287, 289, 352], "interact": 272, "interest": [108, 251, 276, 310, 318], "interfac": [19, 316, 360], "interferometr": [108, 114, 124, 135, 136, 142, 143, 172, 179, 184, 267, 268, 269, 277, 278, 299, 347, 354], "interferometri": [184, 276], "interleavedepochlossschedul": 366, "interleavedlossschedul": 366, "intermedi": [73, 102, 312], "intern": [135, 155, 287, 296, 312, 342], "internet": [13, 14, 15, 17, 21, 22, 24, 25], "interp_point": [184, 276], "interpol": [30, 184, 195, 228, 245, 247, 248, 251, 252, 253, 254, 255, 267, 270, 276, 282, 289, 292, 294, 312, 319, 352, 370], "interpolation_method": [267, 270], "interpolation_mod": 247, "interpolationmod": 247, "interpret": [95, 102, 103, 173], "interv": [142, 193, 230, 240], "intial": 290, "intiliaz": 145, "intract": 319, "introduc": [47, 48, 74, 76, 83, 96, 97, 216, 239, 276, 319, 323, 330], "introduct": [4, 6, 348], "inv": 306, "invari": [29, 36, 118, 324, 366], "invers": [12, 18, 25, 26, 29, 34, 35, 36, 37, 42, 44, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 77, 78, 81, 83, 85, 93, 94, 102, 108, 109, 112, 114, 130, 133, 135, 136, 137, 143, 155, 158, 159, 162, 166, 169, 170, 171, 172, 174, 178, 179, 181, 185, 186, 192, 193, 195, 201, 203, 225, 227, 234, 243, 244, 251, 262, 263, 265, 267, 268, 272, 276, 280, 281, 282, 284, 285, 291, 292, 294, 295, 296, 299, 305, 306, 312, 314, 315, 316, 317, 320, 325, 326, 328, 329, 330, 343, 345, 347, 348, 349, 350, 352, 353, 355, 356, 358, 359, 362, 363, 366, 367, 370], "inversef": [12, 43, 72, 94, 235, 328, 356, 358], "invert": [65, 69, 70, 130, 144, 145, 146, 251, 296, 306, 370], "invert_metr": [65, 69, 70], "invert_param": 251, "investig": 276, "involv": [98, 99, 324, 335], "io": [98, 99, 289, 337], "iota_": [118, 119, 142, 338], "ip": [283, 290, 309, 310, 312, 313], "ipynb": [276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "ipython": [272, 323], "iradon": 352, "irf": 287, "irf_sigma": 287, "is_avail": [234, 236, 263, 276, 279, 283, 284, 285, 287, 288, 289, 290, 292, 293, 295, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "is_standard_deblurring_network": 95, "is_standard_denoising_network": 95, "is_standard_deraining_network": 95, "is_valid_fil": 365, "isn": 21, "isola": 93, "isomorph": 254, "isotrop": [99, 201, 248], "issu": [251, 306, 316, 323, 325, 338, 343, 344], "itakura": 112, "itali": 342, "item": [19, 27, 39, 40, 42, 43, 188, 191, 276, 285, 289, 290, 300, 301, 302, 305, 306, 310, 311, 313, 316, 317, 320, 330, 360, 369], "iter": [12, 18, 20, 26, 27, 30, 33, 34, 46, 75, 80, 98, 99, 104, 108, 113, 114, 117, 118, 120, 124, 129, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 172, 179, 235, 236, 237, 238, 239, 240, 241, 243, 256, 257, 258, 259, 262, 263, 267, 271, 276, 283, 284, 285, 286, 288, 290, 291, 293, 299, 301, 302, 309, 310, 311, 312, 313, 317, 318, 319, 320, 323, 324, 328, 334, 338, 339, 340, 341, 346, 347, 348, 350, 358, 363, 365, 369], "iterable_dataset": 286, "iterabledataset": 286, "iteratbl": 286, "iterator_param": 238, "ith": [84, 116], "its": [12, 14, 15, 19, 43, 88, 98, 99, 108, 109, 130, 135, 155, 160, 162, 193, 212, 218, 225, 227, 251, 272, 288, 290, 291, 301, 302, 310, 318, 328, 335, 336, 337, 338, 348, 353, 360, 366, 370], "itself": 276, "iwt": 103, "j": [43, 98, 99, 142, 160, 185, 187, 287, 319, 335, 337], "jac_inv": 306, "jacobian": [30, 33, 98, 114, 130, 139, 172, 178, 179, 366], "jacobianspectralnorm": [30, 366], "jbhuang0604": 24, "jingyunliang": 97, "jitter": 296, "jmo": 289, "join": [344, 370], "joint": 161, "jointli": [243, 294, 339, 366], "jona": 337, "journal": 215, "jpeg": [21, 282, 310], "jpg": [61, 66, 285, 296, 316, 317, 320, 324], "json": 13, "julian": 345, "june": 342, "jupyt": [276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "just": [22, 164, 172, 276, 282, 294, 306], "jychoi118": 82, "k": [16, 27, 39, 98, 103, 104, 108, 113, 117, 129, 144, 145, 146, 147, 148, 149, 150, 151, 152, 184, 186, 189, 194, 215, 217, 221, 222, 225, 229, 239, 240, 257, 276, 288, 292, 309, 310, 311, 316, 320, 323, 335, 336, 337, 338, 354, 359, 360, 363, 369], "k_adjoint": [288, 337, 338], "k_oversampl": [184, 276], "kaiser": [184, 202], "kargs_model": 30, "kb": [220, 289], "kbnufft": 276, "kbnufftadjoint": 276, "keep": [103, 160, 171, 172, 179, 188, 238, 239, 240, 251, 295, 319, 334, 338, 367], "keep_time_dim": [186, 323], "keepdim": 260, "kei": [12, 97, 108, 195, 204, 217, 218, 219, 220, 224, 225, 227, 228, 230, 241, 257, 259, 282, 286, 289, 310, 319, 353, 360], "kept": [99, 103, 104, 218, 223], "kernel": [88, 89, 92, 138, 158, 184, 205, 206, 207, 208, 209, 210, 219, 220, 238, 282, 283, 287, 289, 292, 301, 309, 312, 316, 318, 334, 352, 353, 361], "kernel_dim": 88, "kernel_index": [301, 309, 312, 334], "kernel_s": [89, 225], "kernel_torch": [301, 309, 312, 334], "kernels_12": 312, "keyword": [30, 117, 153, 154, 211, 242, 251, 257, 272], "kindli": 276, "kl": 306, "knee": [16, 323, 365], "knee_singlecoil": 16, "knowledg": [26, 69, 329, 348, 359], "known": [122, 126, 127, 251, 317], "kohler": 365, "kornia": [245, 252, 253, 254, 255, 370], "kr": 17, "kspace": [16, 175, 176], "kullback": [128, 134, 306], "kunisch": 98, "kupyn": [54, 55, 93, 279], "kutta": [239, 361], "kwarg": [12, 27, 28, 29, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 81, 86, 89, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 109, 110, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 211, 217, 218, 221, 222, 223, 224, 227, 228, 229, 230, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 256, 257, 258, 259, 260, 272, 276, 283, 291, 296, 310, 312, 336, 337], "kwargs_model": 30, "kx": 145, "k\u00f6hler": 19, "l": [27, 31, 32, 39, 40, 41, 42, 43, 44, 45, 54, 55, 56, 57, 58, 79, 87, 89, 98, 99, 113, 167, 183, 202, 225, 239, 240, 279, 282, 300, 306, 309, 326, 355, 366, 367, 369], "l1": [60, 95, 123, 293, 360], "l12prior": 360, "l1l2": 367, "l1loss": [63, 336, 367], "l1prior": [117, 360], "l2": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 84, 95, 108, 110, 117, 121, 135, 139, 236, 258, 259, 276, 283, 290, 301, 302, 309, 310, 312, 313, 316, 318, 319, 320, 334, 335, 336, 339, 346, 359, 360, 363], "l2_axi": 121, "l2_loss": 319, "l2_prior": 283, "l2distanc": 258, "l2prior": 283, "l3": [62, 95], "l4": 95, "l_1": 60, "l_2": 60, "l_p": 62, "label": [51, 52, 53, 82, 108, 269, 279, 284, 306, 328, 335, 359, 360, 365], "label_loc": 269, "lam": 306, "lam_epl": 306, "lam_patchnr": 306, "lamb": [135, 152, 276, 288, 301, 302, 312, 335, 336], "lambd": 360, "lambda": [16, 47, 103, 104, 108, 117, 129, 135, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 162, 172, 179, 198, 227, 236, 237, 238, 239, 240, 251, 257, 258, 259, 276, 279, 283, 288, 289, 290, 294, 296, 300, 301, 302, 306, 310, 312, 313, 323, 325, 326, 327, 328, 329, 335, 336, 339, 349, 355, 359, 360, 367, 370], "lambda_": [236, 289, 300, 318, 335], "lambda_1": 98, "lambda_2": 98, "lambda_col": 289, "lambda_i": 300, "lambda_il": 289, "langevin": [239, 240, 316, 320, 345, 361], "langl": [109, 110, 135], "larg": [21, 22, 47, 80, 82, 84, 98, 116, 142, 158, 160, 276, 279, 290, 291, 294, 345, 348, 352, 353, 358, 365], "large_model": [82, 318, 319], "larger": [26, 82, 160, 172, 173, 195, 227, 239, 240, 324, 334, 339], "largest": [33, 103, 108], "last": [12, 19, 48, 117, 171, 212, 282, 318], "last_batch": 12, "latent": [73, 75, 78, 279, 306, 355], "later": [290, 318, 319], "latest": 346, "latter": [26, 76, 78, 88, 90, 91, 92, 101, 203, 204, 319], "laurent": [98, 99], "law": 160, "layer": [73, 76, 77, 78, 79, 82, 83, 88, 90, 91, 93, 95, 96, 97, 102, 192, 193, 285, 337, 339, 363, 364], "layernorm": [95, 97], "layernorm_typ": 95, "layout": [267, 270], "lcondat": [98, 99], "ldot": [186, 199, 200, 300], "lead": [195, 204, 254, 345], "leakyrelu": [79, 87, 181], "learn": [4, 12, 18, 26, 27, 29, 34, 35, 37, 39, 42, 43, 46, 47, 48, 61, 72, 75, 77, 78, 80, 81, 90, 91, 94, 102, 113, 114, 116, 124, 129, 135, 136, 142, 145, 151, 153, 154, 160, 161, 162, 168, 171, 172, 174, 175, 179, 194, 195, 216, 218, 223, 226, 241, 243, 247, 248, 251, 257, 259, 261, 262, 263, 267, 271, 279, 281, 283, 285, 294, 295, 296, 305, 306, 309, 312, 323, 324, 327, 329, 332, 334, 338, 339, 340, 341, 342, 343, 347, 348, 355, 356, 358, 364, 370], "learnabl": [97, 102, 257, 335, 336, 338, 363], "learning_r": [80, 285, 295, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339], "learning_std": [279, 283, 295, 309, 312, 323, 325, 326, 327, 328, 329, 330, 337, 338], "learnt": 26, "least": [12, 52, 295, 323, 338, 360], "leclair": 312, "lecun": [328, 335], "left": [47, 48, 49, 54, 55, 56, 57, 58, 109, 114, 118, 119, 138, 139, 142, 160, 172, 179, 182, 183, 185, 201, 225, 236, 240, 256, 269, 279, 289, 316, 318, 320, 326, 329, 330, 335, 355, 360, 361, 363, 367], "leftarrow": 108, "legendr": [145, 310], "leibler": [128, 134, 306], "len": [13, 14, 15, 17, 21, 22, 24, 25, 219, 220, 246, 251, 276, 282, 289, 300, 318, 353], "lenght": 339, "length": [27, 75, 108, 161, 202, 216, 225, 267, 269, 270, 272, 282, 287, 288, 335, 336, 337, 338, 339], "leq": [118, 119, 145, 147, 151, 152, 199, 200, 202, 318, 360], "lesion": 20, "less": [223, 251, 366], "let": [86, 186, 194, 247, 282, 286, 289, 296, 300, 318, 319, 323], "level": [15, 42, 47, 48, 73, 74, 79, 81, 82, 83, 86, 89, 95, 96, 97, 102, 103, 104, 113, 124, 132, 133, 134, 138, 142, 167, 168, 173, 179, 181, 187, 197, 227, 230, 234, 235, 236, 239, 240, 276, 285, 287, 288, 292, 300, 302, 305, 310, 311, 313, 316, 317, 318, 319, 320, 334, 335, 338, 339, 357, 360, 361, 364], "leverag": [33, 162, 166, 256, 348, 358, 361, 363, 366], "levin": [283, 301, 309, 312], "levin09": [301, 309, 334], "lexicograph": 19, "lhood": 316, "lib": [294, 296, 323], "libcpab": 244, "librari": [12, 74, 130, 176, 241, 242, 279, 289, 293, 294, 318, 334, 336, 337, 342, 343, 348, 357, 358, 370], "licenc": 20, "lidar": [179, 187, 263, 297, 298, 299, 347, 354], "lidc": 20, "lidcidrislicedataset": 365, "light": [19, 169, 170, 220, 289], "lightn": 70, "like": [79, 98, 155, 170, 223, 251, 276, 279, 293, 323, 352, 365, 367], "likelihood": [84, 112, 116, 124, 126, 127, 130, 131, 133, 134, 155, 162, 164, 168, 171, 172, 179, 238, 239, 240, 265, 267, 299, 306, 307, 308, 311, 316, 319, 347, 349, 359, 361], "limit": [12, 23, 84, 95, 114, 116, 126, 130, 131, 135, 136, 162, 164, 172, 173, 179, 195, 197, 219, 220, 247, 267, 286, 299, 300, 305, 307, 308, 323, 324, 325, 338, 347, 361, 364], "linalg": 300, "line": [171, 186, 195, 217, 221, 222, 229, 299, 323, 353, 359, 360, 370], "linear": [12, 47, 50, 84, 98, 99, 106, 116, 117, 140, 152, 156, 160, 162, 164, 166, 169, 170, 171, 172, 174, 176, 178, 179, 182, 183, 188, 190, 191, 192, 193, 195, 198, 228, 276, 285, 292, 294, 295, 296, 301, 302, 306, 310, 311, 313, 316, 317, 318, 319, 320, 334, 335, 336, 338, 339, 348, 351, 356, 360, 361], "linearli": [267, 270], "linearphys": [47, 84, 108, 116, 117, 158, 160, 162, 165, 170, 171, 176, 178, 183, 184, 189, 190, 192, 195, 233, 236, 243, 276, 291, 351, 353], "linefmt": 287, "linewidth": 276, "link": [82, 238, 239, 240, 285, 299, 318, 349], "linspac": [195, 234, 306, 317, 318, 319], "lionel": [285, 316, 317, 320], "lip": [147, 151, 152], "lipschitz": [98, 99, 133, 134, 172, 239, 240, 310, 364, 366], "lipschitzian": [98, 99], "list": [12, 15, 19, 26, 28, 31, 32, 36, 37, 41, 44, 45, 79, 80, 84, 86, 87, 95, 96, 103, 104, 108, 116, 139, 142, 143, 160, 161, 169, 177, 178, 179, 190, 191, 192, 195, 212, 219, 220, 224, 234, 241, 242, 243, 246, 248, 257, 258, 259, 260, 267, 269, 270, 272, 288, 292, 296, 318, 319, 324, 325, 326, 335, 336, 338, 339, 350, 354, 355, 357, 360, 361, 368], "list_denois": 318, "list_imag": 300, "list_noisi": 318, "list_param": [219, 220, 282, 289], "list_prox": [300, 318], "list_rhos_algo": 318, "list_sigmas_algo": 318, "list_wv": [104, 300], "lista": [12, 18, 26, 34, 46, 114, 124, 135, 136, 142, 151, 160, 172, 179, 257, 259, 262, 263, 267, 271, 299, 336, 338, 340, 341, 347], "listtensor": 169, "literatur": 362, "liu": 323, "live": [195, 272, 313], "liver": [39, 226], "ll": [276, 300, 319], "lmm": 170, "load": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 81, 95, 103, 114, 118, 132, 135, 136, 160, 162, 171, 172, 178, 179, 185, 188, 257, 259, 263, 264, 265, 276, 279, 282, 289, 296, 297, 298, 299, 318, 328, 347, 348, 350, 353, 359, 365, 369], "load_dataset": [283, 284, 286, 295, 301, 302, 309, 312, 323, 325, 334, 338, 339], "load_degrad": [301, 302, 309, 312, 325, 334], "load_imag": [348, 350], "load_metadata_from_cach": 16, "load_np_url": [276, 289, 300], "load_physics_generator_param": [18, 365], "load_state_dict": [155, 160, 171, 178, 185, 188, 279, 288, 294, 323, 324, 325, 326, 327, 328, 329, 338], "load_state_dict_from_url": [279, 288, 294, 323, 324, 325, 326, 327, 328, 329], "load_torch_url": 306, "load_url_imag": [61, 66, 282, 285, 290, 292, 293, 296, 305, 310, 311, 313, 316, 317, 318, 319, 320, 324, 346, 350, 359], "loader": [12, 241, 242, 335, 336, 365], "loc": [269, 288, 294, 323, 325, 326, 327, 328, 329], "local": [95, 285, 327, 343, 350, 365], "locat": [166, 174, 184, 186, 207, 267, 269, 276, 287], "lodopab": [173, 306], "log": [12, 42, 84, 112, 116, 124, 126, 127, 128, 130, 131, 133, 134, 138, 155, 162, 164, 168, 171, 172, 173, 179, 188, 235, 238, 239, 240, 243, 265, 267, 276, 283, 290, 293, 299, 301, 302, 306, 307, 308, 311, 313, 316, 319, 320, 334, 335, 336, 337, 339, 347, 354, 359, 360, 361, 364, 369], "log10": 276, "log_": [68, 367], "log_metrics_wandb": 12, "logan": 290, "logarithm": 276, "logpoisson": 173, "logpoissonlikelihood": [306, 360], "logpoissonnois": [126, 127, 306, 354], "logs_total_loss_ev": [306, 369], "logs_total_loss_train": [306, 369], "logscal": 276, "long": [12, 284, 319], "longer": [279, 306, 323, 325, 338], "look": [355, 363], "loop": [117, 368, 369], "loop_physics_gener": 12, "loss": [0, 3, 9, 12, 18, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 80, 81, 94, 102, 106, 107, 124, 162, 164, 168, 172, 179, 181, 216, 218, 223, 226, 241, 242, 243, 262, 263, 279, 285, 290, 293, 294, 295, 296, 299, 305, 306, 320, 324, 325, 326, 331, 332, 334, 335, 336, 337, 338, 339, 345, 347, 348, 353, 355, 358, 367, 369, 370], "loss1": 44, "loss2": 44, "loss_d": 279, "loss_g": 279, "loss_hist": [290, 293], "loss_tot": [306, 369], "losses_d": [243, 279], "lossi": [57, 58, 75, 279], "lot": 19, "low": [69, 92, 138, 165, 173, 177, 211, 212, 217, 221, 222, 229, 276, 292, 294, 310, 358, 361], "lower": [65, 173, 198, 211, 212, 323], "lower_bett": 65, "lp": 62, "lpip": [309, 367], "lpips_std": 309, "lpips_v0": 309, "lpnorm": 367, "lprior": 316, "lr": [17, 92, 95, 279, 285, 293, 295, 306, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "lr_d": 279, "lr_g": 279, "lr_schedul": [12, 279, 295, 325, 326, 327, 329, 334, 337, 338, 339], "lr_variational_problem": 306, "lrm": [69, 294], "lsdir": 21, "lsdirhr": 365, "lsgan": [52, 366], "lung": [20, 365], "luxembourg": 342, "lvert": [56, 279, 355], "lyon": 342, "m": [22, 43, 47, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 92, 99, 106, 107, 152, 160, 162, 170, 171, 172, 174, 177, 179, 184, 185, 186, 188, 218, 223, 239, 276, 289, 290, 292, 294, 310, 323, 328, 329, 330, 335, 336, 343, 349, 353, 360, 365, 367], "m1": 323, "m2": 323, "m_": 43, "m_1": 43, "m_2": [43, 328], "m_i": 43, "m_t": [166, 186], "machin": [342, 343], "made": [16, 370], "mae": [60, 367], "magnet": [39, 166, 174, 186, 226, 354], "magnitud": [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 267, 270], "mai": [43, 80, 102, 108, 129, 181, 244, 251, 279, 285, 287, 290, 318, 355, 360], "main": [17, 25, 279, 288, 289, 290, 291, 294, 300, 305, 306, 310, 312, 319, 320, 323, 324, 325, 326, 327, 328, 329, 338, 343, 346, 350, 359, 366], "maintain": [155, 244, 370], "make": [12, 103, 158, 290, 296, 320, 343, 357, 370], "malici": [306, 323, 325, 338], "mandatori": [42, 81], "mani": [86, 165, 243, 285, 328, 345, 348, 353, 359, 363], "manifest": 20, "manner": [12, 162, 166, 241], "manual": [285, 313], "manual_se": [33, 121, 160, 162, 164, 166, 171, 174, 176, 185, 188, 195, 224, 227, 234, 276, 282, 283, 284, 285, 289, 290, 292, 295, 300, 301, 302, 309, 310, 311, 312, 313, 318, 320, 323, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 352], "map": [38, 47, 75, 82, 98, 99, 138, 164, 172, 176, 179, 235, 236, 290, 293, 327, 337, 349, 352, 353, 355, 356, 361], "map_loc": [279, 288, 294, 323, 324, 325, 326, 327, 328, 329], "mapper": 71, "mapsto": [108, 172, 179, 184, 349, 353, 359, 360], "marcenko": 160, "mark": 20, "markerfmt": 287, "markov": [238, 239, 240, 316, 358], "marseil": 342, "mask": [16, 27, 38, 39, 43, 101, 124, 159, 162, 166, 171, 174, 175, 176, 186, 188, 192, 194, 216, 217, 218, 219, 220, 221, 222, 223, 226, 229, 234, 236, 285, 288, 291, 292, 295, 296, 302, 305, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 338, 346, 352, 353, 359, 360, 366, 369], "mask_ful": 323, "mask_gaussian": 292, "mask_gener": [43, 328, 353], "mask_random": 292, "mask_svd": 162, "mask_uniform": 292, "mat": [22, 301, 309, 334], "match": [171, 187, 193, 251, 260, 293, 294, 335, 343, 355], "materi": 170, "matern_kernel": 225, "math": [46, 135, 192, 207, 310, 312, 318, 336, 337], "mathbb": [30, 33, 43, 54, 55, 56, 57, 58, 108, 135, 160, 162, 171, 184, 276, 279, 300, 306, 324, 355, 359, 360], "mathbf": [170, 235, 236, 279, 318, 319], "mathcal": [40, 44, 47, 48, 49, 54, 55, 56, 57, 58, 86, 118, 119, 138, 160, 167, 168, 173, 180, 181, 185, 187, 196, 197, 225, 235, 236, 240, 279, 287, 305, 306, 318, 319, 320, 326, 330, 338, 354, 355, 361, 366], "mathemat": [215, 342], "mathrm": [160, 185, 306], "matlab": [98, 99], "matplotlib": [267, 270, 272, 287, 289, 290, 293, 300, 318, 323], "matric": [43, 155, 160, 192, 193, 213, 214, 316], "matrix": [33, 152, 160, 170, 171, 172, 184, 185, 188, 192, 193, 195, 276, 292, 316, 335, 336, 366], "matter": 194, "matthieu": 345, "mat\u00e9rn": 225, "max": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 79, 87, 121, 123, 142, 196, 211, 212, 267, 270, 276, 289, 290, 292, 293, 300, 317, 319, 320, 367], "max_": 330, "max_img": [267, 270], "max_it": [30, 33, 104, 108, 117, 118, 120, 143, 155, 156, 157, 172, 179, 235, 236, 237, 238, 239, 240, 257, 259, 276, 283, 288, 290, 300, 301, 302, 306, 309, 310, 311, 312, 313, 316, 317, 318, 320, 334, 335, 336, 337, 338, 339, 360], "max_iter_backward": [256, 334], "max_iter_int": 135, "max_pixel": [68, 70], "max_split_ratio": 218, "max_zernike_amplitud": [219, 220], "maxim": [135, 140, 155, 283, 295, 306, 309, 312, 334, 335, 336, 338, 339, 364], "maximis": [54, 57], "maximum": [30, 33, 42, 68, 70, 75, 86, 98, 99, 108, 117, 118, 120, 138, 142, 143, 155, 156, 157, 172, 179, 196, 220, 230, 237, 245, 249, 252, 253, 254, 255, 256, 267, 270, 283, 306, 317, 318, 361, 367], "maxpool": [79, 87], "mb": [82, 278, 281, 298, 304, 308, 315, 322, 332, 333, 341, 347], "mc": [43, 86, 325, 326, 328], "mcloss": [294, 324, 325, 326, 366, 367], "mcmc": [7, 348], "md": [306, 311, 323, 325, 338, 360], "md5": 14, "md_step": 109, "mea": 291, "mean": [12, 27, 35, 37, 38, 39, 43, 46, 47, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 82, 167, 190, 237, 238, 239, 240, 242, 251, 295, 300, 306, 316, 317, 318, 319, 320, 323, 335, 338, 349, 355, 360, 361, 367, 369], "mean_has_converg": 238, "meaning": 318, "meaningless": [75, 279], "measplit": [323, 328], "measur": [12, 13, 18, 22, 26, 27, 28, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 51, 53, 56, 57, 58, 69, 72, 75, 80, 81, 90, 92, 94, 100, 101, 102, 106, 107, 108, 113, 117, 118, 120, 133, 134, 139, 152, 160, 161, 162, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 190, 191, 193, 195, 196, 197, 218, 223, 233, 234, 235, 236, 238, 241, 242, 243, 262, 263, 279, 282, 283, 284, 288, 289, 291, 292, 295, 299, 300, 301, 302, 306, 309, 310, 311, 312, 313, 318, 319, 323, 324, 325, 327, 329, 330, 331, 332, 334, 337, 338, 339, 346, 347, 348, 349, 353, 355, 356, 358, 359, 360, 361, 366, 367, 369], "measurement_dir": [283, 284, 295, 309, 312, 325, 326, 327, 329, 330, 334, 335, 336, 338, 339], "mechan": [27, 39, 40, 43], "med": 16, "median": [89, 296, 316, 359], "medianfilt": [40, 43, 44, 296, 316, 346, 357, 359], "medic": [337, 352, 365], "medium": [169, 220, 289], "meet": [284, 320], "mem": [278, 281, 298, 304, 308, 315, 322, 332, 333, 341, 347], "memori": [84, 97, 99, 116, 195, 203, 204, 251, 263, 286, 350], "mention": 142, "merg": 323, "meshgrid": 296, "messi": [285, 316, 317, 320], "meta": 16, "metadata": [16, 20], "metadata_cache_fil": 16, "meth": 338, "method": [7, 12, 14, 18, 19, 26, 27, 30, 33, 34, 39, 40, 42, 43, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 79, 80, 81, 83, 84, 98, 99, 101, 108, 109, 113, 114, 115, 116, 118, 124, 129, 130, 132, 135, 136, 139, 143, 144, 148, 152, 155, 158, 159, 160, 162, 168, 171, 172, 177, 178, 179, 185, 187, 194, 195, 234, 237, 239, 241, 251, 263, 265, 267, 279, 282, 283, 285, 289, 291, 294, 296, 297, 298, 299, 301, 302, 310, 312, 313, 314, 315, 316, 317, 320, 328, 337, 338, 345, 347, 348, 351, 353, 355, 356, 357, 360, 365, 369, 370], "metric": [0, 12, 27, 29, 31, 32, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 52, 56, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 108, 117, 172, 234, 236, 241, 242, 243, 268, 276, 279, 283, 285, 290, 294, 295, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 320, 323, 334, 335, 336, 337, 338, 339, 348, 350, 366, 369], "mfx": 174, "microscop": 15, "microscopi": [15, 289, 365], "middl": [19, 158, 159, 165, 172, 195, 204, 352], "might": [34, 51, 53, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 84, 116, 160, 236, 272, 291, 358, 367], "min": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 84, 98, 99, 103, 104, 108, 116, 142, 145, 172, 175, 179, 196, 211, 212, 245, 252, 267, 270, 276, 290, 292, 301, 302, 306, 319, 338, 359, 360], "min_": [80, 283, 285, 300, 330], "min_max": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 267, 270, 272], "min_prob": [108, 306, 359, 360], "min_split_ratio": 218, "min_x": [108, 117, 335, 336], "mind": 319, "minim": [80, 84, 98, 108, 109, 116, 129, 146, 147, 149, 151, 157, 235, 285, 293, 301, 302, 306, 326, 335, 338, 359, 360], "minimax": [279, 355, 366], "minimis": [55, 56, 58, 108, 144, 145, 148, 149, 150, 336], "minimiza": 80, "minimize_variational_problem": 306, "minimum": [42, 142, 196, 230, 245, 252, 255], "minu": [59, 69, 70, 71], "minut": [276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "mio": [305, 364], "mirror": [81, 83, 88, 108, 109, 112, 114, 131, 133, 135, 136, 137, 143, 150, 159, 162, 172, 179, 181, 201, 258, 259, 263, 265, 267, 268, 299, 314, 315, 347, 360], "miss": [288, 302], "mix": [170, 224, 227, 292, 329, 330, 353], "mixin": [175, 351], "mixtur": [84, 116, 155, 170, 224, 305, 306], "mlp": 97, "mlp_ratio": 97, "mm": 12, "mmse": 138, "mn": [160, 188], "mnist": [26, 326, 327, 328, 329, 330, 335, 336, 365], "mnist_train": [335, 336], "mo": 36, "modal": 6, "mode": [12, 14, 21, 72, 79, 82, 87, 95, 96, 105, 188, 245, 248, 252, 253, 254, 255, 267, 270, 272, 286, 290, 306, 309, 312, 313, 323, 325, 338, 356], "model": [0, 3, 12, 25, 27, 28, 29, 30, 34, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 113, 114, 116, 117, 118, 120, 124, 129, 130, 132, 135, 136, 138, 139, 144, 145, 146, 147, 155, 160, 162, 167, 168, 169, 170, 171, 172, 173, 177, 179, 183, 187, 190, 191, 192, 193, 194, 195, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 252, 253, 255, 257, 259, 261, 263, 265, 267, 271, 276, 283, 290, 294, 296, 297, 298, 299, 300, 318, 321, 322, 324, 325, 326, 327, 329, 330, 334, 335, 336, 339, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "model_epl": 306, "model_eq": 296, "model_infer": [12, 369], "model_nam": [288, 294, 323, 325, 326, 327, 328, 329], "model_new": [288, 338], "model_nontrain": 288, "model_patchnr": 306, "model_spec": 338, "modifi": [39, 40, 43, 241, 244, 316, 352, 368], "modl": [261, 323, 325], "modul": [4, 5, 6, 8, 9, 10, 11, 12, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 65, 72, 74, 75, 76, 77, 78, 80, 81, 85, 88, 90, 91, 92, 93, 94, 95, 97, 100, 101, 105, 108, 109, 110, 111, 112, 116, 117, 128, 129, 130, 135, 153, 154, 155, 160, 164, 171, 172, 177, 178, 179, 185, 188, 203, 204, 227, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 251, 257, 259, 261, 271, 276, 283, 286, 291, 293, 296, 300, 301, 302, 306, 309, 313, 316, 317, 323, 325, 334, 335, 336, 337, 338, 339, 348, 353, 357, 359, 363, 366, 367, 368], "modulelist": 300, "modulu": 178, "moeiloss": 366, "mohan": 102, "moi": [37, 326], "moiloss": [36, 326, 366], "momentum": [47, 48, 108, 117, 256, 330], "monitor": 294, "monoton": 364, "mont": [27, 40, 43, 47, 48, 49, 86, 237, 238, 239, 240, 251, 296, 316, 320, 357, 358], "montecarlo": [237, 239, 240, 316, 361], "more": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 27, 39, 43, 65, 70, 75, 79, 82, 83, 84, 86, 87, 96, 97, 104, 108, 113, 116, 121, 123, 143, 156, 160, 167, 170, 172, 173, 179, 190, 191, 195, 203, 204, 219, 220, 225, 228, 239, 240, 241, 244, 248, 252, 253, 254, 255, 256, 257, 258, 259, 267, 270, 276, 279, 282, 285, 288, 294, 300, 306, 316, 323, 325, 330, 336, 338, 351, 353, 357, 359, 360, 363, 366, 367], "moreau": [135, 138, 149, 310, 361], "moreov": [108, 290, 291, 306, 319], "most": [81, 155, 251, 263, 323, 350, 357, 360], "mostli": 173, "mother": [103, 104], "motion": [19, 39, 54, 55, 93, 225, 226, 279, 283, 301, 309, 312, 334, 353], "motion_gener": 282, "motionblurgener": [224, 227, 279, 282, 353, 354], "mous": 15, "move": [19, 26, 260, 324], "movement": 19, "mr": [16, 222], "mri": [12, 16, 18, 26, 27, 29, 34, 35, 39, 43, 76, 101, 162, 166, 171, 172, 175, 176, 179, 186, 194, 216, 217, 218, 221, 222, 223, 226, 227, 229, 247, 251, 257, 261, 263, 267, 272, 296, 299, 300, 328, 331, 332, 345, 347, 350, 354, 365, 369, 370], "mri_mask_128x128": 325, "mrimixin": [174, 176, 351, 354], "mriquest": 176, "mse": [27, 29, 35, 36, 37, 38, 39, 40, 43, 46, 60, 67, 279, 295, 334, 335, 336, 337, 338, 339, 355, 367], "mse_loss": 336, "mseloss": [27, 29, 35, 37, 38, 39, 40, 43, 46, 52, 56, 64, 242, 279, 367], "mu": [126, 127, 155, 173, 306, 354, 360, 367], "mu_": 367, "mu_x": 367, "much": 323, "mul": [171, 179], "mult": [213, 214], "multi": [16, 36, 37, 176, 326, 337, 352, 366, 368], "multicoil": [16, 328], "multicoilmri": 354, "multidimension": 212, "multipl": [12, 18, 26, 28, 31, 32, 34, 35, 36, 37, 40, 41, 43, 44, 45, 48, 49, 62, 72, 81, 86, 94, 102, 114, 139, 162, 169, 171, 172, 179, 183, 190, 191, 224, 233, 237, 243, 246, 247, 251, 262, 263, 282, 296, 299, 309, 310, 317, 324, 328, 329, 330, 331, 332, 342, 347, 350, 353, 361, 365, 366, 370], "multipli": [133, 134, 144, 161, 171, 172, 181, 183, 189, 202, 214, 215, 228, 251, 260, 352, 353, 360, 370], "multiplier_adjoint": [213, 352], "multiscal": 70, "multispectr": [22, 59, 69, 71, 92, 177, 245, 254, 294, 324, 354, 362, 365, 367], "must": [27, 33, 34, 36, 37, 39, 43, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 75, 79, 101, 112, 128, 161, 170, 171, 177, 216, 217, 220, 221, 229, 232, 234, 236, 243, 251, 260, 269, 272, 291, 292, 294, 301, 302, 310, 311, 313, 328, 357, 367], "my_dataset_nam": [295, 325, 326, 327, 334, 335, 336, 338, 339], "mykernel": 238, "mysampl": 238, "n": [30, 33, 40, 42, 43, 47, 48, 82, 138, 160, 161, 162, 166, 168, 170, 171, 172, 176, 178, 179, 180, 183, 184, 185, 188, 190, 192, 193, 196, 221, 222, 235, 236, 240, 251, 276, 279, 288, 296, 300, 305, 306, 312, 318, 319, 320, 326, 330, 333, 348, 349, 353, 354, 357, 361, 367], "n0": [126, 127, 173, 306], "n_": 183, "n_0": [126, 127, 173, 354, 360], "n_1": 82, "n_2": 82, "n_channel": [283, 284, 288, 290, 295, 301, 302, 309, 310, 311, 312, 313, 334, 335, 336, 337, 338, 339], "n_coeff": 103, "n_coil": 176, "n_compon": [84, 116, 155, 306], "n_data": 337, "n_detector_pixel": [195, 204], "n_dual": 337, "n_eigen_psf": [228, 282], "n_eigenpsf": 282, "n_images_max": [283, 295, 309, 312, 325, 326, 327, 329, 330, 334, 335, 336, 338, 339], "n_img": [182, 183, 232, 293], "n_it_max": [98, 99, 140, 301], "n_iter": [152, 290, 293], "n_iter_train": 337, "n_layer": [93, 192, 193, 279], "n_level": [103, 335], "n_patch": 131, "n_primal": 337, "n_shard": 286, "n_step": 225, "n_tessel": 244, "n_tran": [86, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 296, 325], "n_wavelet_subband": 335, "n_zernik": [220, 282, 289], "na": [219, 220, 289], "nabla": [42, 98, 99, 109, 110, 112, 128, 136, 137, 138, 140, 147, 148, 150, 151, 152, 240, 311, 316, 320, 336, 359, 360, 361], "nabla_": [107, 125, 235, 319], "nabla_adjoint": [98, 99, 140], "nabla_u": [114, 139], "nabla_x": [110, 112, 114, 128, 135, 137, 139], "name": [15, 22, 104, 142, 143, 241, 257, 258, 259, 319, 338], "namedtupl": [15, 16, 20], "nan": 102, "nativ": [287, 296, 348, 354], "natur": [66, 82, 116, 284, 290, 305, 306, 324, 327, 365, 367], "nb": [79, 87], "nbia": 20, "nbu": [22, 294], "nbudataset": [294, 365], "nc": [77, 78, 79, 87], "ndarrai": 232, "ndf": [77, 93, 279], "nearest": [79, 82, 87, 97, 236, 247, 270, 289], "necessari": [12, 82, 235, 236, 243, 293, 326, 335, 343], "necessarili": [129, 312], "need": [12, 19, 20, 76, 78, 88, 90, 91, 92, 95, 101, 103, 145, 155, 181, 203, 204, 217, 221, 229, 282, 284, 288, 290, 300, 305, 316, 318, 338, 343, 351, 358, 360, 368, 369, 370], "neg": [112, 116, 126, 127, 128, 130, 131, 133, 134, 155, 181, 238, 239, 240, 251, 306, 320, 359, 361], "negat": [251, 260], "negative_log_likelihood": [116, 306], "negative_patch_log_likelihood": 131, "negentropi": 360, "neighbor": [38, 184, 276, 327], "neighbor2neighbor": [12, 18, 26, 34, 72, 81, 94, 102, 162, 164, 172, 179, 181, 262, 263, 299, 331, 332, 347, 366], "neighbour": [79, 87], "net": [20, 42, 79, 102, 279, 295, 318, 326, 327, 328, 329, 330], "network": [10, 12, 18, 25, 26, 27, 30, 34, 38, 39, 40, 42, 43, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 92, 93, 94, 95, 96, 97, 100, 101, 102, 130, 158, 160, 162, 171, 172, 179, 195, 222, 225, 227, 235, 236, 241, 242, 243, 261, 262, 263, 280, 281, 285, 288, 297, 298, 299, 306, 309, 318, 319, 320, 323, 347, 348, 349, 356, 358, 363, 367, 369], "neural": [30, 43, 61, 75, 76, 88, 92, 95, 102, 130, 222, 285, 295, 306, 319, 320, 337, 358], "neurip": 42, "neuro": 16, "neuron": [130, 306], "never": 324, "nevertheless": 319, "new": [12, 26, 36, 37, 65, 152, 155, 158, 159, 166, 170, 174, 186, 189, 194, 224, 227, 238, 251, 267, 282, 289, 291, 316, 338, 348, 353], "new_demo_ei_ckp_150_v3": 325, "new_mask": 323, "new_x": 238, "next": [20, 31, 32, 117, 279, 282, 286, 289, 316, 318, 323, 324, 328, 334, 335, 336, 339, 364, 365, 369], "next_phys": 37, "next_sigma": 318, "next_t": 319, "nf": [79, 83, 90, 91], "nfe": 319, "nftrainer": 306, "ngf": [78, 279], "ni": [220, 289], "nice": [287, 318], "nichol": 364, "niqe": 367, "nll": 131, "nmse": 367, "nn": [12, 27, 29, 30, 34, 35, 36, 37, 38, 39, 40, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 72, 75, 80, 81, 92, 94, 97, 100, 101, 102, 105, 130, 158, 159, 160, 162, 164, 166, 171, 174, 175, 176, 177, 178, 181, 185, 186, 188, 205, 234, 235, 236, 237, 238, 239, 240, 241, 242, 261, 271, 276, 279, 287, 292, 300, 316, 336, 348, 353, 360, 366, 367, 368], "no_grad": [29, 52, 108, 162, 164, 305, 311, 318, 334, 335, 336, 339], "no_learning_infer": [12, 241], "no_learning_method": [12, 241, 294, 328], "nois": [12, 15, 29, 37, 40, 42, 43, 44, 47, 48, 49, 68, 73, 74, 79, 80, 81, 82, 83, 86, 89, 92, 94, 95, 96, 97, 102, 104, 108, 109, 112, 113, 114, 124, 132, 133, 134, 135, 136, 137, 138, 139, 143, 159, 160, 162, 164, 166, 167, 168, 170, 171, 172, 173, 177, 178, 179, 180, 181, 187, 191, 195, 196, 197, 201, 227, 230, 234, 235, 236, 238, 239, 240, 263, 265, 267, 268, 276, 283, 284, 287, 290, 292, 294, 296, 299, 300, 301, 302, 305, 309, 310, 312, 313, 314, 315, 319, 327, 328, 329, 334, 339, 347, 348, 349, 353, 357, 359, 360, 361, 364, 366], "noise2invers": [43, 328], "noise2scor": 42, "noise_color": 177, "noise_dirnam": 15, "noise_gain": 92, "noise_grai": 177, "noise_level": [15, 82, 179], "noise_level_img": [283, 300, 301, 302, 309, 310, 311, 312, 313, 334, 337, 339], "noise_model": [42, 164, 168, 172, 173, 179, 180, 181, 191, 196, 197, 234, 236, 283, 285, 291, 292, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 320, 328, 334, 337, 339, 346, 353, 359, 365], "noise_std": 316, "noiseless": [47, 48, 49, 82], "noisemodel": [167, 168, 173, 180, 181, 196, 197], "noisi": [15, 38, 40, 42, 44, 47, 48, 49, 69, 73, 74, 79, 81, 82, 83, 84, 89, 95, 96, 97, 98, 99, 102, 103, 104, 139, 166, 167, 168, 171, 173, 178, 179, 180, 181, 196, 197, 285, 300, 301, 302, 305, 306, 316, 317, 318, 319, 320, 324, 328, 353, 357], "noisy_imag": 357, "noisysampleidentifi": 15, "noll": [219, 289], "nomenclatur": [282, 289], "non": [27, 39, 155, 160, 169, 172, 178, 179, 184, 186, 191, 194, 195, 221, 222, 251, 276, 285, 296, 320, 323, 348, 351, 353, 356, 358, 364, 366], "non_linear": [103, 104, 300], "none": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 31, 36, 37, 39, 41, 42, 43, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 79, 82, 83, 84, 86, 87, 89, 92, 95, 96, 97, 98, 99, 100, 101, 102, 108, 109, 111, 114, 115, 116, 117, 118, 119, 120, 129, 130, 135, 136, 142, 143, 155, 158, 159, 160, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 203, 204, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 264, 265, 267, 268, 269, 270, 271, 272, 279, 282, 283, 284, 286, 289, 291, 294, 306, 309, 310, 312, 323, 324, 326, 327, 328, 329, 330, 339, 353, 360, 368, 369], "nonetyp": [95, 165, 177], "nonexpans": [30, 320, 364], "nonstandard": 19, "norm": [12, 30, 33, 50, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 93, 98, 99, 102, 103, 104, 108, 110, 120, 121, 122, 124, 125, 140, 142, 160, 172, 175, 193, 195, 243, 276, 283, 290, 291, 300, 301, 313, 316, 319, 338, 360, 366], "norm_a2": 360, "norm_grad": 319, "norm_input": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "norm_lay": 97, "normal": [50, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 82, 83, 97, 98, 99, 124, 125, 126, 127, 130, 138, 172, 173, 181, 183, 184, 195, 276, 290, 306, 319, 335, 336, 360], "normalis": [22, 65, 67, 124, 170, 367], "normalizing_flow": [130, 306], "normliz": 195, "note": [12, 18, 26, 27, 59, 69, 71, 86, 114, 119, 139, 145, 149, 176, 178, 195, 204, 205, 206, 227, 241, 243, 248, 272, 276, 279, 282, 283, 294, 296, 311, 316, 318, 319, 323, 324, 328, 334, 335, 336, 339, 351, 365, 367, 368, 370], "notebook": [267, 272, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "noth": [65, 69, 251], "notic": [118, 282, 289, 318], "nov": 342, "now": [21, 256, 258, 276, 279, 282, 289, 294, 295, 300, 305, 306, 317, 318, 319, 323, 324, 334, 335, 336, 338, 339, 346, 353], "np": [160, 232, 234, 276, 279, 283, 289, 293, 295, 300, 309, 312, 316, 317, 318, 319, 323, 325, 326, 327, 328, 329, 330, 337, 338], "npy": [276, 289, 300, 301, 309, 312, 325, 334], "nsgan": 52, "nth": 176, "nufft": [184, 276], "nufftobj": 276, "null": [282, 289], "num_angl": 306, "num_block": 95, "num_channel": [219, 220, 224, 225, 227], "num_filt": 88, "num_head": 97, "num_it": 290, "num_lay": [88, 130], "num_refinement_block": 95, "num_step": 319, "num_train_timestep": [82, 236, 318, 319], "num_work": [26, 283, 284, 286, 295, 309, 310, 312, 313, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339], "number": [12, 15, 16, 18, 19, 20, 26, 28, 31, 32, 37, 40, 41, 42, 43, 45, 47, 48, 49, 73, 76, 77, 78, 79, 80, 83, 84, 86, 87, 88, 90, 91, 93, 95, 96, 97, 98, 99, 102, 103, 104, 106, 107, 108, 116, 117, 118, 120, 126, 127, 130, 131, 135, 140, 143, 155, 156, 157, 160, 161, 167, 168, 170, 171, 172, 173, 176, 179, 180, 181, 184, 185, 187, 188, 192, 193, 195, 196, 197, 204, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 230, 232, 234, 235, 236, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 267, 270, 273, 274, 276, 279, 282, 283, 285, 286, 288, 289, 290, 291, 295, 300, 301, 302, 306, 309, 311, 312, 316, 317, 318, 319, 320, 323, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 345, 360, 365, 367, 368], "number_of_oper": 326, "numer": [30, 33, 156, 172, 195, 220, 238, 239, 240, 289, 300, 316, 370], "numpi": [205, 206, 208, 209, 211, 212, 213, 214, 234, 260, 276, 287, 289, 293, 300, 316, 317, 318, 319], "numpoint": 276, "nutshel": 335, "nvidia": 263, "nwimag": 276, "nyquist": 219, "nyu": 16, "nz": [75, 78, 279], "o": [160, 169, 188, 337, 343], "object": [12, 16, 23, 52, 129, 148, 150, 155, 172, 175, 178, 179, 182, 190, 191, 194, 220, 233, 251, 260, 267, 269, 270, 272, 283, 285, 292, 300, 301, 302, 306, 317, 320, 323, 325, 335, 338, 352, 353, 360], "observ": [36, 37, 43, 44, 108, 114, 115, 116, 119, 122, 125, 127, 129, 134, 139, 144, 146, 147, 172, 179, 305, 306, 311, 348, 349, 355, 366], "obtain": [15, 40, 43, 86, 95, 178, 201, 234, 236, 238, 239, 248, 282, 285, 289, 292, 316, 320, 342, 356, 361, 363], "oct": 342, "od": 358, "odd": [39, 205, 226, 287], "odl": 337, "odlgroup": 337, "odot": [48, 49, 169, 189, 215, 329, 330], "off": [221, 251, 355, 358, 359, 362], "offer": [290, 291, 296, 352, 359, 370], "offici": [21, 97], "offlin": [12, 279], "offset": [169, 183, 221], "often": [348, 349, 352, 353, 355, 360, 365, 369], "oil": 289, "omega_": 300, "onc": [84, 108, 116, 251, 291, 295, 319, 338, 346, 355, 370], "one": [15, 16, 18, 19, 20, 27, 30, 32, 33, 37, 40, 41, 42, 43, 44, 51, 53, 59, 62, 69, 70, 71, 76, 78, 88, 90, 91, 92, 101, 103, 105, 139, 155, 158, 159, 160, 163, 165, 169, 172, 195, 198, 203, 204, 216, 218, 222, 223, 226, 229, 238, 239, 240, 250, 251, 279, 286, 289, 293, 300, 319, 326, 343, 352, 355, 356, 360, 365, 366, 368], "ones": [40, 42, 43, 44, 45, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 124, 139, 158, 159, 161, 163, 166, 172, 174, 176, 186, 195, 218, 223, 234, 236, 266, 282, 287, 288, 291, 292, 313, 316, 319, 335, 338, 348, 350, 352, 353, 357, 360, 366, 367], "ones_lik": [124, 287, 302, 318], "onesid": 62, "onli": [12, 17, 26, 27, 36, 39, 40, 42, 43, 45, 65, 67, 79, 80, 82, 83, 87, 92, 96, 97, 100, 101, 103, 104, 135, 142, 158, 171, 172, 195, 201, 204, 206, 209, 216, 218, 223, 226, 235, 238, 241, 247, 251, 256, 258, 267, 270, 279, 282, 285, 286, 289, 291, 293, 294, 295, 301, 302, 306, 310, 316, 318, 319, 323, 324, 325, 326, 327, 328, 329, 330, 334, 337, 338, 351, 353, 358, 360, 361, 367, 370], "onlin": [12, 79, 82, 83, 87, 96, 97, 241, 324], "online_measur": [12, 241, 294, 306, 323, 324, 337], "onto": 12, "open": [20, 212, 306, 323, 325, 338, 342, 343, 344], "oper": [9, 12, 18, 26, 27, 28, 29, 34, 35, 36, 37, 38, 40, 42, 43, 44, 47, 48, 49, 50, 51, 53, 72, 81, 84, 94, 95, 98, 99, 100, 102, 106, 108, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 134, 135, 136, 139, 140, 141, 142, 152, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 201, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 217, 219, 221, 222, 224, 225, 227, 228, 229, 233, 234, 235, 236, 238, 240, 241, 242, 243, 251, 262, 263, 265, 267, 284, 289, 290, 293, 294, 297, 298, 299, 305, 311, 318, 319, 327, 328, 329, 330, 331, 332, 345, 347, 349, 350, 352, 355, 356, 358, 360, 361, 364, 365, 366, 367, 370], "operatornam": [30, 86, 108, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 129, 132, 135, 136, 137, 138, 139, 144, 145, 146, 147, 149, 151, 152, 236, 256, 257, 276, 279, 300, 301, 302, 310, 318, 336, 338, 355, 359, 360, 363], "opnorm": 276, "opposit": 194, "opt": [294, 296, 323], "optic": 219, "optician": 289, "optim": [0, 10, 12, 75, 80, 81, 83, 84, 98, 99, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 168, 172, 178, 179, 188, 195, 235, 236, 238, 239, 240, 242, 243, 256, 257, 258, 259, 263, 265, 267, 268, 271, 276, 279, 285, 288, 290, 293, 294, 295, 304, 305, 306, 309, 311, 312, 313, 314, 315, 316, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 346, 347, 348, 350, 353, 358, 359, 361, 363, 369], "optim_build": [108, 276, 283, 290, 301, 302, 309, 310, 311, 312, 313, 346, 359, 360], "optim_iter": [108, 117, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 290, 310, 335, 336, 337, 338, 360], "optim_param": 290, "optim_step": 306, "optimalgo": 108, "optimis": [75, 279, 358], "optimiter": [108, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 257, 258, 259, 310], "optimize_z": 75, "optin": 12, "option": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 31, 32, 41, 42, 45, 47, 48, 49, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 102, 117, 133, 158, 160, 165, 168, 170, 172, 173, 174, 176, 177, 179, 180, 181, 185, 187, 188, 189, 195, 196, 197, 205, 208, 215, 216, 217, 218, 223, 226, 227, 228, 241, 243, 264, 265, 282, 291, 318, 319, 328, 330, 350, 353, 356, 359, 360, 369], "order": [19, 29, 31, 32, 50, 62, 69, 98, 172, 188, 219, 220, 234, 282, 286, 296, 316, 317, 318, 319, 348, 366], "org": [29, 30, 33, 37, 40, 47, 48, 49, 62, 70, 72, 77, 78, 83, 86, 90, 91, 156, 160, 163, 165, 167, 169, 187, 195, 204, 219, 225, 234, 235, 236, 239, 240, 245, 254, 267, 270, 272, 282, 285, 289, 316, 317, 320, 330], "organ": 342, "orgin": 172, "orginal_data_dir": 279, "orig": [296, 323, 324], "origin": [19, 43, 47, 51, 53, 55, 56, 77, 78, 80, 82, 83, 85, 93, 193, 201, 234, 236, 244, 248, 251, 279, 290, 293, 300, 301, 302, 306, 318, 319, 323, 335, 337, 364, 367], "original_data_dir": [311, 324, 326, 327, 329, 330, 335, 336], "original_data_hom": 328, "ortho": [175, 276], "orthogon": [103, 160, 175, 239, 270, 357], "orthograph": 350, "orthonorm": [103, 142, 162, 184], "osa": 282, "ossci": [328, 335], "other": [1, 12, 15, 22, 27, 29, 35, 36, 37, 38, 43, 46, 74, 95, 103, 163, 171, 172, 179, 227, 241, 242, 243, 251, 260, 276, 282, 284, 286, 318, 337, 348, 356, 358, 360, 365, 368, 370], "otherwis": [12, 29, 30, 33, 37, 45, 47, 62, 82, 86, 117, 158, 160, 165, 166, 171, 172, 174, 175, 177, 186, 188, 189, 195, 199, 200, 202, 205, 206, 207, 208, 209, 210, 215, 243, 283, 284, 293, 295, 309, 310, 312, 313, 325, 326, 327, 329, 330, 334, 335, 336, 338, 339], "otimes_": 289, "our": [59, 63, 64, 65, 71, 95, 145, 244, 276, 279, 288, 296, 301, 302, 310, 316, 319, 323, 328, 335, 336, 338, 343, 344, 346, 357, 365, 367], "ourselv": 292, "out": [19, 33, 160, 212, 238, 239, 240, 251, 279, 286, 289, 306, 318, 319, 323, 326, 346], "out_channel": [79, 82, 83, 87, 90, 91, 95, 102, 259, 279, 290, 295, 310, 313, 324, 326, 327, 328, 329, 330], "out_siz": 203, "outer": 239, "output": [12, 22, 26, 27, 28, 33, 39, 43, 52, 73, 75, 76, 78, 79, 82, 83, 84, 87, 90, 91, 95, 100, 101, 102, 103, 108, 115, 116, 117, 119, 130, 155, 158, 159, 162, 165, 166, 177, 181, 184, 186, 187, 189, 190, 192, 193, 194, 195, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 241, 247, 248, 251, 300, 301, 302, 310, 311, 312, 313, 318, 319, 323, 328, 335, 336, 350, 353], "output_s": [78, 279], "output_shap": [192, 193], "outsid": [267, 289], "ouvrirlasci": 342, "over": [12, 22, 40, 43, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 86, 89, 98, 99, 117, 121, 142, 195, 251, 276, 284, 318, 319, 323, 328, 350, 357, 365, 367], "overal": 170, "overcomplet": [104, 160, 172, 195, 357], "overfit": [80, 285], "overlaid": 269, "overlap": [27, 39, 84, 116, 131, 183, 186, 194, 323], "overlap2prob": 293, "overlap_img": 293, "overlin": [178, 235, 236, 318, 319], "overload": 286, "overrid": [12, 39, 51, 53, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 89, 97, 155, 170, 243, 244, 251, 369], "overridden": [65, 75, 76, 78, 88, 90, 91, 92, 101, 203, 204], "overriden": 52, "oversampl": [184, 192, 193, 276, 290], "oversampling_ratio": 290, "overview": 170, "overwrit": [26, 136, 167, 168, 173, 180, 181, 197, 241, 329], "overwrite_exist": 26, "overwritten": [136, 160, 172, 179, 195], "own": [15, 18, 26, 43, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 79, 82, 83, 87, 96, 97, 162, 164, 168, 172, 179, 218, 263, 267, 279, 291, 297, 298, 299, 310, 337, 347, 348, 365, 370], "ozan": 337, "p": [16, 42, 48, 49, 62, 69, 84, 108, 116, 138, 142, 173, 176, 180, 181, 183, 187, 215, 235, 240, 251, 276, 283, 287, 300, 302, 309, 312, 316, 319, 320, 349, 354, 359, 360, 361, 367], "p_": [54, 55, 56, 57, 58, 138, 279, 306, 316, 320, 355, 361], "p_i": [84, 116, 131, 306, 360], "p_ix": [84, 116], "p_p": 300, "p_x": [54, 55, 279, 306, 355], "p_y": [56, 57, 58], "p_z": [306, 355], "packag": [2, 7, 16, 74, 184, 244, 294, 296, 319, 323, 348, 353, 360, 361, 363, 366, 367, 370], "pad": [89, 102, 103, 131, 158, 159, 165, 172, 177, 183, 184, 189, 192, 193, 205, 206, 207, 208, 209, 210, 215, 228, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 276, 279, 282, 287, 289, 352], "pad_if_need": 16, "pad_input": 103, "pad_zero": 183, "padding_mod": 248, "page": [16, 360, 364], "paint": 170, "pair": [12, 18, 22, 26, 40, 43, 227, 241, 242, 279, 284, 294, 295, 326, 338, 365, 366], "pajot": [56, 279], "pan": [22, 59, 69, 92, 177, 245, 254, 324, 362, 367, 370], "pan_lr": 69, "panchromat": [22, 69, 92, 294, 365], "pannet": [294, 362], "pansharpen": [22, 59, 69, 92, 245, 254, 292, 294, 324, 354], "pantiltrot": [296, 324, 370], "papadaki": 312, "paper": [19, 42, 55, 56, 79, 80, 83, 88, 95, 144, 173, 177, 215, 236, 244, 248, 279, 283, 285, 287, 294, 306, 309, 317, 320, 324, 337], "paper_fil": 42, "parallel": [74, 195, 203, 204, 283, 284, 286, 295, 309, 310, 312, 313, 325, 326, 327, 329, 330, 334, 335, 336, 338, 339, 368, 370], "parallel_comput": [195, 203, 204], "param": [12, 18, 26, 36, 37, 95, 160, 162, 166, 171, 172, 195, 221, 222, 228, 229, 238, 244, 251, 272, 310, 312, 316, 337, 353, 365, 369], "param_nam": [224, 227], "param_valu": [224, 227], "paramet": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 276, 279, 283, 285, 288, 290, 291, 293, 294, 295, 300, 301, 302, 305, 309, 310, 311, 312, 316, 318, 319, 320, 323, 324, 328, 338, 350, 354, 363, 364, 367, 369, 370], "parameter": 167, "parameteris": 245, "parametris": [252, 253, 255], "params_algo": [108, 117, 143, 257, 258, 259, 271, 276, 283, 288, 290, 301, 302, 309, 310, 311, 312, 313, 334, 335, 336, 337, 338, 339, 346, 359, 360, 363], "params_algo_new": [288, 338], "params_dict": [224, 227], "params_pc": [189, 282], "parent": [162, 172, 179], "pari": 342, "part": [13, 79, 105, 166, 174, 186, 292, 363], "partial": [17, 65, 114, 122, 139, 172, 179, 256, 324, 363], "particular": [16, 99, 145, 184, 195, 276, 282, 289, 311, 363, 369], "pass": [12, 27, 28, 31, 32, 34, 36, 37, 39, 40, 41, 43, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 76, 77, 78, 85, 86, 88, 90, 91, 92, 93, 101, 143, 147, 158, 161, 165, 171, 174, 176, 193, 203, 204, 211, 216, 218, 223, 226, 242, 243, 251, 256, 257, 258, 259, 272, 279, 282, 296, 328, 343, 353, 357, 363, 368, 370], "pastur": 160, "patch": [12, 23, 61, 84, 93, 97, 114, 116, 126, 130, 131, 135, 136, 162, 164, 168, 171, 172, 173, 179, 195, 197, 265, 267, 308, 347, 357, 359, 360, 364], "patch_dimens": 116, "patch_norm": 97, "patch_siz": [23, 84, 97, 116, 130, 131, 305, 306], "patchdataset": 306, "patchgan": [93, 279, 355], "patchgandiscrimin": [243, 279, 355], "patchnr": 360, "patchnr_batch_s": 306, "patchnr_dataload": 306, "patchnr_epoch": 306, "patchnr_learning_r": 306, "patchnr_lodopab_smal": [130, 306], "patchnr_lodopab_small2": 306, "patchnr_prior": 306, "patchnr_subnets": 306, "patchprior": [306, 360], "path": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 79, 82, 83, 84, 87, 96, 97, 116, 130, 264, 267, 268, 270, 271, 279, 290, 323, 328, 343, 350, 365], "pathlib": [16, 279, 283, 284, 288, 290, 295, 300, 301, 302, 309, 310, 311, 312, 313, 323, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "patient": 20, "patient_id": 20, "pattern": [113, 163, 186, 188, 282, 289, 292, 293, 309, 343, 366], "pc_gener": [189, 228, 282], "pd": [129, 145], "pdf": [29, 42, 72, 112, 222, 225, 229, 311, 317], "pditer": 337, "pdnet": 363, "pdnet_dualblock": [337, 363], "pdnet_primalblock": [337, 363], "pdnetdatafid": 337, "pdnetiter": 337, "pdnetprior": 337, "peak": [68, 187, 276, 287, 290], "penal": [108, 283, 360], "per": [18, 19, 20, 27, 42, 79, 82, 83, 86, 96, 103, 116, 139, 163, 172, 187, 188, 191, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 272, 285, 287, 296, 317, 320, 325, 326, 335, 361, 364, 369], "percentag": [238, 239, 240, 245, 252, 253, 255], "percept": [355, 367], "perceptu": [61, 279, 348, 358, 367], "pereyra": 239, "perfect": 232, "perform": [3, 12, 13, 19, 22, 24, 25, 26, 27, 39, 40, 43, 47, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 76, 78, 80, 82, 88, 90, 91, 92, 95, 101, 109, 112, 117, 129, 136, 143, 155, 158, 159, 161, 183, 184, 189, 195, 203, 204, 205, 206, 207, 208, 209, 210, 215, 236, 243, 247, 248, 250, 251, 256, 257, 258, 259, 276, 283, 285, 294, 295, 300, 301, 302, 309, 313, 318, 319, 323, 328, 337, 338, 348, 350, 352, 355, 357, 358, 360, 363, 366, 367, 370], "period": [238, 239, 240, 248], "permut": 276, "persist": 282, "persist_prev": 216, "perspect": [245, 254, 294, 324, 370], "perturb": 40, "pf": 219, "pgd": [108, 117, 129, 143, 151, 256, 257, 258, 259, 288, 290, 301, 302, 312, 313, 334, 335, 336, 338, 359, 360, 363], "pgditer": [108, 117, 312, 313, 335, 336], "pgl": 324, "phantom": 290, "phase": [27, 39, 79, 81, 105, 106, 108, 114, 120, 124, 129, 132, 135, 136, 143, 148, 152, 178, 179, 182, 183, 185, 193, 219, 220, 226, 231, 232, 263, 265, 267, 282, 297, 298, 299, 323, 347, 354, 357, 360], "phase2phas": [39, 226, 323], "phase2phaseloss": [27, 43, 226, 323, 366], "phase2phasesplittingmaskgener": [216, 354], "phase_retriev": [178, 182, 183, 231, 232, 290, 293], "phaseless": [290, 293], "phaseretriev": [106, 107, 152, 182, 185, 193, 354], "phenomenon": 285, "phi": [72, 109, 110, 111, 112, 128, 135, 311, 326, 356, 360], "phi_": [295, 326], "photograph": 19, "photon": [15, 126, 127, 173, 179, 187, 263, 297, 298, 299, 347, 354], "phyic": 310, "physic": [0, 12, 18, 26, 27, 28, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 51, 53, 56, 69, 72, 75, 80, 84, 92, 94, 100, 101, 106, 107, 108, 114, 116, 117, 118, 120, 124, 129, 134, 139, 144, 145, 146, 147, 148, 150, 152, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 259, 276, 279, 282, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 346, 348, 349, 351, 352, 354, 359, 360, 361, 363, 365, 366, 369], "physicist": 289, "physics1": [44, 139, 172, 353], "physics2": [44, 139, 172, 291, 353], "physics3": 353, "physics4": 353, "physics_gener": [12, 26, 36, 37, 241, 279, 365], "physics_i": 44, "physics_list": [190, 191], "physicsgener": [12, 26, 36, 37, 43, 217, 218, 224, 228, 230, 241, 353], "pi": [193, 195, 201, 276, 290, 293, 313], "pi_": 240, "pick": [247, 286], "pickl": [306, 323, 325, 338], "piecewis": [244, 366, 370], "pil": [13, 14, 15, 17, 21, 24, 25, 245, 252, 253, 254, 255, 286], "pinhol": [252, 253, 255, 289, 370], "pinv": [72, 328, 356], "pip": [74, 103, 104, 244, 299, 343, 346], "pipelin": 16, "pixel": [14, 24, 39, 68, 70, 73, 79, 87, 95, 158, 159, 163, 165, 170, 171, 172, 179, 187, 188, 195, 198, 204, 216, 218, 220, 223, 226, 247, 251, 276, 279, 287, 288, 290, 293, 295, 296, 302, 310, 317, 319, 320, 324, 328, 329, 330, 335, 336, 338, 352, 353, 365, 366, 367], "pixel_s": [219, 220, 289], "pixel_spac": [195, 204], "pixelshuffl": 97, "pixelshuffledirect": 97, "pixelsize_xi": 289, "pixelsize_z": 289, "pixelsuffl": [79, 87], "pixelwis": [43, 171, 218, 223, 251, 319, 323, 354], "pkl": 16, "placehold": 69, "placeholderdataset": 243, "plai": [79, 81, 83, 99, 108, 109, 112, 113, 114, 132, 133, 135, 136, 137, 143, 159, 162, 172, 179, 181, 201, 236, 239, 240, 241, 263, 265, 267, 268, 290, 312, 315, 316, 320, 339, 345, 347, 348, 357, 358, 359, 360, 363], "plain": [234, 236], "plan": 294, "plane": [195, 220, 282, 289, 370], "plausibl": 349, "playback": 19, "pleas": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 170, 242, 251, 276, 306, 323, 325, 338, 343, 344], "plot": [12, 189, 241, 243, 268, 269, 270, 271, 272, 276, 279, 282, 283, 284, 286, 289, 290, 291, 292, 293, 294, 295, 296, 300, 305, 312, 318, 319, 323, 324, 325, 326, 327, 329, 334, 337, 338, 346, 348, 359, 360], "plot_convergence_metr": [241, 276, 283, 301, 302, 309, 312, 313, 337], "plot_curv": [276, 301, 302, 310, 311, 313, 350], "plot_imag": [12, 241, 279, 283, 294, 309, 312, 323, 325, 326, 327, 328, 329, 330, 337, 338], "plot_inset": [276, 350], "plot_kwarg": 272, "plot_measur": [12, 241], "plot_ortho3d": [289, 350], "plot_paramet": [335, 336, 339, 350], "plot_video": [323, 350], "plt": [267, 287, 289, 290, 293, 300, 318, 323], "plu": 323, "plug": [79, 81, 83, 99, 108, 109, 112, 113, 114, 132, 133, 135, 136, 137, 143, 159, 162, 172, 179, 181, 201, 236, 239, 240, 241, 263, 265, 267, 268, 290, 312, 315, 316, 319, 320, 339, 345, 347, 348, 357, 358, 359, 360, 363], "pm": 247, "png": [14, 15, 17, 21, 24, 25, 267, 282, 286, 290, 292, 293, 305, 311, 313, 318, 319, 346, 359], "pnp": [12, 18, 26, 30, 79, 81, 83, 108, 113, 114, 124, 129, 135, 136, 138, 143, 153, 154, 159, 162, 168, 171, 172, 179, 188, 195, 236, 238, 240, 241, 242, 259, 263, 265, 267, 268, 288, 299, 314, 315, 321, 322, 325, 334, 338, 346, 347, 348, 358, 360, 361, 363, 364], "pock": [12, 18, 26, 34, 46, 81, 98, 99, 103, 114, 118, 132, 135, 136, 143, 145, 162, 171, 172, 179, 241, 257, 258, 259, 263, 288, 299, 337, 340, 341, 347, 360], "poential": 136, "point": [30, 108, 117, 119, 129, 155, 172, 225, 256, 276, 320, 334, 343, 360, 363, 368], "poisson": [15, 42, 44, 48, 49, 81, 83, 108, 109, 112, 114, 126, 127, 133, 134, 135, 136, 137, 139, 143, 159, 162, 172, 173, 179, 180, 181, 187, 201, 263, 265, 267, 268, 287, 292, 299, 306, 314, 315, 327, 329, 330, 347, 361, 366], "poissongaussiannois": [292, 354], "poissonlikelihood": [112, 139, 311, 318, 360], "poissonnois": [42, 44, 134, 139, 187, 292, 311, 327, 329, 354], "polynomi": [219, 282, 289], "pool": [79, 87, 89], "poor": 290, "popular": [59, 86, 365, 366, 367], "pos_weight": 88, "posed": 366, "posit": [48, 49, 86, 88, 97, 133, 181, 183, 242, 247, 251, 296, 318, 329, 330, 359, 360], "possibl": [68, 82, 83, 158, 177, 192, 193, 256, 258, 276, 282, 289, 290, 306, 323, 325, 334, 338, 343, 353, 358, 359, 360, 367, 368], "possibli": [36, 37, 48, 94, 169, 238, 306, 316, 355, 358, 366], "post": [295, 317, 320, 367], "posterior": [7, 234, 235, 236, 238, 239, 240, 316, 317, 319, 320, 361], "posteriori": [138, 361], "postiv": [112, 128], "potenti": [101, 109, 110, 111, 112, 114, 115, 128, 131, 136, 143, 150, 258, 259, 285, 311, 312, 336, 369], "pow": 316, "power": [30, 33, 69, 82, 172, 188, 291, 313, 318], "pp": [98, 99, 113, 309], "pr": 343, "practic": [96, 142, 172, 276, 324, 335], "pre": [61, 95, 276, 290, 319, 359, 363, 367], "precis": [86, 108, 121, 123, 172, 219, 220, 276, 300, 306, 360], "preconula": 316, "predefin": [1, 172, 179, 345], "prefer": [19, 343], "prepar": [286, 343], "preprocess": [65, 152], "present": [325, 326, 327], "preserv": [276, 370], "pretrain": [12, 42, 55, 56, 58, 79, 82, 83, 84, 87, 95, 96, 97, 113, 116, 130, 234, 236, 279, 290, 294, 305, 306, 309, 310, 311, 312, 313, 317, 318, 320, 323, 324, 325, 326, 327, 328, 329, 334, 339, 345, 348, 357, 358, 359, 361, 367, 368], "pretrained_noise_level": 97, "prevent": [289, 323], "previou": [117, 144, 145, 146, 216, 238, 316, 318, 329, 353, 368], "previous": [26, 300], "primal": [12, 34, 46, 81, 83, 90, 91, 98, 99, 108, 114, 117, 124, 129, 132, 135, 136, 143, 145, 153, 154, 162, 168, 172, 179, 188, 195, 257, 259, 263, 265, 267, 268, 299, 314, 315, 338, 340, 341, 347, 359, 360, 363], "primari": [98, 99], "princip": 152, "print": [12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 27, 30, 33, 39, 40, 42, 43, 80, 98, 99, 108, 170, 172, 219, 220, 224, 225, 227, 228, 230, 234, 235, 236, 237, 238, 239, 240, 243, 263, 276, 282, 285, 286, 288, 289, 290, 291, 293, 294, 295, 301, 302, 305, 306, 310, 311, 313, 316, 317, 320, 323, 325, 326, 327, 329, 330, 338, 352, 353, 360, 365], "printout": 19, "printout_first": 19, "printout_index": 19, "prior": [12, 18, 23, 26, 27, 34, 46, 76, 79, 80, 84, 94, 99, 108, 113, 114, 116, 117, 121, 123, 124, 126, 129, 130, 131, 132, 135, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 159, 160, 162, 164, 168, 171, 172, 173, 179, 195, 197, 201, 216, 238, 239, 240, 241, 257, 258, 259, 261, 262, 263, 265, 267, 268, 271, 288, 290, 297, 298, 300, 303, 304, 305, 308, 309, 310, 311, 313, 323, 325, 334, 335, 338, 339, 340, 341, 346, 347, 348, 349, 357, 358, 359, 361, 363, 364], "prior_new": [288, 338], "priori": 306, "priviledg": 19, "prob": [224, 282], "probability_mask": [295, 338], "probabl": [48, 49, 160, 171, 188, 222, 224, 229, 295, 306, 329, 338], "probail": 306, "probe": [182, 183, 231, 232], "probe_radiu": [231, 293], "problem": [12, 18, 22, 25, 26, 29, 34, 42, 46, 51, 53, 54, 55, 56, 57, 58, 75, 77, 78, 80, 81, 83, 84, 85, 93, 94, 98, 99, 102, 103, 104, 108, 109, 112, 113, 114, 116, 117, 129, 133, 135, 136, 137, 143, 158, 159, 160, 162, 164, 165, 169, 170, 172, 179, 181, 194, 195, 201, 225, 227, 234, 236, 243, 262, 263, 265, 267, 268, 272, 280, 281, 284, 285, 290, 291, 294, 295, 296, 299, 305, 306, 314, 315, 317, 323, 325, 326, 330, 334, 335, 338, 343, 345, 347, 348, 350, 353, 355, 356, 357, 358, 359, 360, 362, 363, 366, 367], "proce": 117, "procedur": [102, 288, 316, 338], "proceed": [42, 113, 309], "process": [12, 22, 26, 27, 39, 74, 99, 100, 105, 118, 142, 160, 172, 179, 185, 193, 194, 225, 236, 295, 330, 348, 350, 352, 357, 365, 366, 367], "prod": [160, 290], "prod_": [192, 193, 319], "produc": [101, 161, 172, 177, 179, 190, 191, 233, 251, 361], "product": [33, 162, 172, 178, 179, 189, 215, 251, 296, 316, 352, 370], "product_convolution2d": [282, 352], "productconvolutionblurgener": [189, 282, 354], "progress": [12, 26, 75, 80, 155, 234, 235, 236, 237, 238, 239, 240, 241, 243, 295, 319, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339], "progress_bar": [12, 306], "prohibit": 160, "proj": 119, "project": [72, 90, 118, 119, 120, 184, 195, 203, 204, 238, 239, 240, 245, 251, 252, 253, 254, 255, 276, 296, 324, 335, 336, 343, 350, 352, 364, 370], "promot": [349, 366], "propag": [29, 38, 289, 327], "properli": [42, 276, 286], "properti": [296, 353, 370], "proport": [47, 48, 49, 103, 221, 370], "propos": [30, 33, 42, 69, 75, 77, 78, 85, 86, 93, 95, 116, 147, 276, 300, 305, 306, 319, 324, 336], "propto": [138, 320, 359, 361], "protocol": 92, "prototyp": 73, "provid": [2, 5, 6, 10, 11, 12, 16, 19, 20, 22, 26, 42, 51, 52, 53, 54, 55, 56, 57, 58, 81, 86, 94, 103, 130, 142, 158, 159, 161, 162, 166, 168, 173, 174, 175, 176, 177, 180, 181, 186, 194, 195, 196, 197, 198, 212, 227, 241, 242, 243, 251, 267, 272, 276, 282, 285, 289, 290, 291, 292, 294, 301, 302, 309, 310, 311, 312, 313, 316, 348, 350, 351, 353, 355, 357, 358, 359, 360, 361, 362, 363, 367, 369, 370], "prox": [114, 118, 119, 120, 121, 122, 123, 124, 125, 127, 132, 134, 135, 136, 139, 140, 141, 142, 144, 145, 146, 147, 149, 151, 152, 159, 166, 172, 174, 186, 236, 276, 300, 301, 302, 310, 318, 335, 336, 337, 338, 359, 360], "prox_conjug": [114, 135, 139, 310], "prox_d": [114, 139], "prox_d_conjug": [114, 139], "prox_l0": 103, "prox_l1": 103, "prox_l2": [12, 47, 162, 165, 172, 241, 291, 353], "prox_tau_fx": 99, "proxim": [98, 99, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 132, 134, 135, 136, 139, 140, 141, 142, 143, 151, 162, 165, 171, 172, 239, 257, 258, 259, 283, 291, 300, 301, 302, 310, 312, 313, 318, 337, 339, 359, 360, 363], "pseudo": [12, 47, 72, 159, 166, 171, 174, 178, 185, 186, 193, 195, 276, 279, 282, 291, 294, 328, 353, 358], "pseudoinvers": [72, 160, 162, 166, 170, 172, 179, 195, 356], "pseudorandom": [160, 168, 171, 173, 180, 181, 185, 187, 188, 196, 197, 227], "psf": [158, 172, 179, 219, 220, 225, 227, 228, 263, 267, 270, 276, 282, 297, 298, 299, 347], "psf_coll": 289, "psf_confoc": 289, "psf_gener": [189, 228, 282], "psf_grid": [189, 282], "psf_log": 276, "psf_size": [189, 219, 220, 224, 225, 227, 228, 282, 289, 353], "psf_size_xi": 289, "psf_size_z": 289, "psfgener": [219, 220, 225, 228, 282, 289], "psi": [103, 104, 142, 300, 302, 360], "psi_": 300, "psi_1": 104, "psi_2": 104, "psi_i": 276, "psi_l": 104, "psnr": [75, 172, 234, 236, 241, 276, 279, 283, 285, 290, 295, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 367], "psnr_epll": 306, "psnr_fbp": 306, "psnr_ob": 305, "psnr_patchnr": 306, "psnr_recon": 305, "psnr_std": [279, 283, 295, 309, 312, 323, 325, 326, 327, 328, 329, 330, 337, 338], "pt": [84, 116, 130, 305, 306, 319, 323, 325], "pth": [12, 95, 160, 171, 178, 185, 188, 279, 288, 290, 294, 309, 310, 320, 323, 324, 325, 326, 327, 328, 329, 338], "ptwt": [103, 104, 288], "ptychographi": [114, 120, 135, 178, 179, 183, 231, 232, 263, 265, 267, 297, 298, 299, 347, 354], "ptychographylinearoper": [182, 354], "public": [112, 311, 343], "pula": 316, "pula_mean": 316, "pula_var": 316, "pulaiter": 316, "pull": 343, "pupil": [219, 220, 282, 289], "pupil_s": [219, 220], "pure": [82, 170, 236, 245, 251, 324], "purpos": [288, 294], "push": 306, "put": [13, 14, 15, 17, 21, 24, 25, 216], "py": [276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 338, 339, 341, 347], "pyiqa": [61, 66, 309], "pyplot": [287, 289, 290, 293, 300, 318], "pytest": 343, "python": [74, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 343], "python3": [294, 296, 323], "pytorch": [77, 78, 79, 82, 83, 87, 89, 96, 97, 103, 104, 160, 185, 188, 205, 227, 282, 283, 284, 285, 288, 289, 292, 295, 300, 301, 302, 306, 309, 310, 311, 312, 313, 319, 320, 323, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339, 352, 365, 368], "pywavelet": 103, "pywt": 142, "q": [54, 55, 56, 57, 58, 69, 117, 279, 319, 355], "qk": 97, "qk_scale": 97, "qkv_bia": 97, "qnr": [294, 367], "qquad": [108, 117, 129, 360], "quad": [40, 47, 49, 56, 108, 179, 183, 279, 300, 306, 355, 359, 360], "quadrat": [84, 113, 116, 143, 149, 236, 257, 258, 259, 261, 305, 306, 309, 323, 325, 334, 360], "qualit": 358, "qualiti": [66, 69, 279, 295, 337, 338, 355, 358], "quantif": [30, 81, 83, 114, 124, 135, 136, 138, 162, 168, 171, 172, 179, 238, 240, 263, 265, 267, 299, 321, 322, 345, 347], "quantifi": 320, "quantiti": [51, 53, 172, 289], "quantiz": [172, 179], "queri": [19, 97], "question": [343, 344], "quick": [279, 286], "quickbird": 22, "quickli": [350, 358], "quickstart": 12, "quit": 276, "r": [30, 33, 38, 40, 42, 43, 47, 48, 49, 72, 79, 87, 89, 92, 98, 108, 118, 119, 133, 134, 135, 160, 162, 171, 184, 187, 241, 276, 286, 287, 289, 291, 310, 312, 316, 318, 319, 327, 329, 330, 337, 338, 348, 355, 356, 359, 360], "r2": 98, "r2d2": 276, "r2r": 40, "r2rloss": 366, "r2rmodel": 40, "r_": [187, 287, 316, 326], "rachford": [143, 146, 257, 258, 259, 339, 360], "radford": [77, 78], "radio": [108, 114, 124, 135, 136, 142, 143, 172, 179, 184, 267, 268, 269, 277, 278, 299, 347, 354], "radiointerferometri": [276, 354], "radiu": [118, 119, 120, 183, 195, 204, 231, 232, 288, 338], "radon": [195, 203, 292, 306, 352], "rai": [195, 204], "rais": [61, 66, 136], "ramp": [195, 203], "rand": [27, 39, 69, 100, 101, 168, 170, 173, 180, 181, 196, 197, 220, 251, 267, 270, 272, 289, 292, 350, 353, 370], "rand_lik": 166, "randn": [121, 160, 162, 164, 166, 171, 172, 174, 176, 177, 185, 186, 188, 195, 198, 245, 252, 253, 254, 255, 259, 353, 357, 363], "randn_lik": [33, 276, 290, 293, 316, 318, 319, 352], "random": [26, 27, 28, 29, 36, 37, 39, 41, 43, 47, 48, 49, 79, 80, 81, 82, 83, 86, 87, 96, 97, 108, 114, 121, 124, 129, 130, 132, 135, 136, 143, 148, 160, 161, 162, 164, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 185, 186, 187, 188, 192, 193, 195, 196, 197, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 234, 236, 238, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 263, 265, 267, 273, 276, 279, 282, 283, 284, 285, 289, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 309, 310, 311, 312, 313, 319, 320, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 338, 339, 347, 353, 354, 355, 357, 366, 369, 370], "random_lat": 75, "random_phantom": 337, "random_split": [279, 324], "random_split_ratio": 218, "randomappli": 251, "randomcrop": [13, 14, 15, 16, 17, 21, 24, 25, 295, 334, 338, 339], "randomeras": 296, "randomhorizontalflip": 16, "randomli": [12, 26, 27, 37, 41, 43, 86, 131, 216, 217, 221, 222, 223, 224, 227, 229, 241, 244, 246, 247, 249, 250, 251, 282, 286, 289, 295, 319, 323, 328, 338, 365, 370], "randomlossschedul": 366, "randommaskgener": [166, 174, 176, 186, 222, 292, 353, 354], "randomphantomdataset": 337, "randomphaseretriev": [290, 354], "randomverticalflip": 16, "randon": 37, "rang": [12, 24, 33, 61, 66, 82, 95, 97, 117, 179, 187, 236, 237, 247, 251, 263, 276, 282, 288, 290, 291, 293, 296, 297, 298, 299, 300, 302, 306, 318, 319, 323, 324, 325, 326, 335, 337, 338, 347, 360, 368, 370], "rangl": [109, 135], "rapidli": 309, "rare": [27, 216, 323], "rate": [12, 75, 80, 96, 97, 221, 279, 285], "rather": [138, 184, 288, 292, 318, 319, 361, 367], "ratio": [43, 68, 92, 97, 177, 218, 220, 223, 237, 276, 287, 290, 292, 328], "raw": [13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 286, 328, 335], "raw_hf_train_dataset": 286, "rcparam": 318, "re": [56, 57, 58, 69, 80, 290, 292, 294], "re_init": 80, "reach": [108, 117, 221, 283, 310, 312], "read": [16, 276, 286, 359], "reader": [276, 368], "readi": [276, 279, 282, 289, 300, 319, 346], "readili": [276, 300, 318, 319], "real": [15, 18, 19, 21, 51, 52, 53, 93, 105, 166, 174, 175, 176, 184, 186, 207, 210, 276, 290, 292, 357, 365], "real_fft": [206, 207, 209, 210], "real_imag": 105, "real_label": 52, "real_project": [184, 276], "realis": 328, "realist": 364, "realiz": [12, 40, 43, 219, 220, 276, 301, 302, 318], "reason": [19, 276, 300], "rec": [291, 334, 335, 336, 339, 355], "rec601": 161, "recal": [86, 257, 338, 363], "receiv": [189, 326], "recip": [76, 78, 88, 90, 91, 92, 101, 203, 204], "reciproc": 251, "recognit": [113, 309], "recommend": [80, 95, 99, 142, 160, 172, 188, 285, 291, 292, 295, 306, 318, 319, 323, 324, 325, 327, 328, 329, 330, 338, 360, 368], "recomposit": 103, "recon": [276, 301, 302, 310, 311, 313, 319, 335, 336], "recon_epl": 306, "recon_patchnr": 306, "reconstruct": [1, 2, 4, 5, 12, 18, 24, 26, 27, 28, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 79, 80, 81, 94, 97, 100, 101, 102, 108, 114, 116, 124, 129, 132, 135, 136, 143, 148, 160, 162, 166, 168, 171, 172, 173, 174, 175, 178, 179, 183, 184, 185, 186, 193, 194, 195, 204, 216, 217, 218, 222, 226, 227, 229, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 261, 263, 265, 267, 272, 276, 279, 296, 297, 298, 299, 301, 302, 305, 310, 311, 312, 313, 316, 318, 320, 321, 322, 324, 328, 331, 332, 334, 335, 336, 337, 339, 347, 349, 350, 352, 355, 356, 357, 361, 362, 363, 365, 366, 367, 369], "reconstructor": [72, 75, 80, 81, 100, 234, 235, 236, 356, 358], "reconstrunct": [106, 107], "record": 19, "recorrupt": 40, "recov": [170, 245, 276, 290, 294, 296, 301, 302, 323, 348, 358], "recoveri": 294, "recreat": 162, "red": [18, 26, 87, 108, 114, 124, 135, 136, 138, 143, 165, 168, 172, 179, 241, 263, 287, 299, 311, 314, 315, 347, 348, 360], "redefin": [276, 301, 302, 337], "reduc": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 84, 92, 116, 142, 276, 285, 318, 319, 325, 326, 327, 328, 329, 330, 336, 367], "reduced_alpha_cumprod": 318, "reduct": [12, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 97, 190, 336, 367], "redund": [19, 300], "refer": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 27, 29, 34, 39, 43, 51, 53, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 173, 192, 193, 279, 294, 306, 318, 349, 355, 364], "refin": 95, "reflect": [86, 158, 165, 177, 189, 205, 208, 215, 228, 245, 248, 250, 252, 253, 254, 255, 282, 296, 300, 324, 357, 370], "reformul": [335, 338], "refract": [220, 289], "reg": [108, 121, 123, 136, 137, 138, 140, 141, 142, 155, 349, 359, 360, 361, 363], "reg_l2": 33, "region": [16, 183, 276, 293, 318, 366], "regist": [76, 78, 88, 90, 91, 92, 101, 203, 204], "regnam": [108, 123, 129, 132, 135, 136, 137, 141, 142, 144, 145, 146, 147, 148, 149, 151, 154, 302, 338, 359, 360], "regress": 170, "regular": [18, 26, 38, 83, 87, 98, 99, 108, 114, 117, 121, 123, 124, 129, 135, 136, 137, 138, 140, 141, 142, 143, 152, 155, 165, 168, 170, 172, 179, 239, 240, 241, 256, 257, 258, 259, 263, 282, 283, 285, 288, 290, 299, 300, 301, 302, 306, 313, 314, 315, 320, 327, 334, 335, 336, 339, 345, 347, 349, 353, 359, 360, 363, 367], "regularis": [33, 108, 117, 143, 257, 258, 259, 276, 301, 302, 318, 338], "regularizi": 306, "regval": 33, "reimplement": [56, 251], "rel": [59, 172, 279, 300, 351, 367], "rel_crit": 300, "relat": [16, 289, 306, 310, 323, 325, 335, 336, 338], "relationship": 276, "relax": [87, 98, 99, 129, 144, 145, 146, 339, 360], "relaxation_step": 129, "releas": [296, 306, 323, 325, 338], "relev": [12, 108, 143, 257, 258, 259, 261, 319, 350, 364], "reli": [136, 172, 184, 276, 279, 310, 357], "relu": [79, 83, 87], "remain": [243, 291, 318], "remark": 319, "remot": [12, 22, 29, 34, 35, 44, 46, 47, 59, 71, 92, 161, 165, 170, 172, 177, 179, 190, 191, 260, 262, 267, 297, 298, 299, 347, 354], "remov": [12, 13, 14, 15, 19, 24, 25, 39, 48, 72, 95, 101, 160, 166, 171, 194, 241, 242, 294, 323, 326, 348, 355, 357, 358], "remove_finish": 19, "render": 323, "renorm": [318, 319], "reparametr": 319, "repeat": [194, 217, 221, 222, 229, 300, 323, 337], "replac": [192, 193, 246, 247, 279, 334, 337, 339, 359, 363, 367], "replic": [158, 165, 177, 189, 205, 208, 215, 228, 282], "report": 323, "repositori": [38, 79, 82, 83, 87, 96, 97, 343, 345, 346], "repres": [15, 20, 42, 84, 116, 166, 170, 174, 177, 182, 183, 186, 192, 222, 229, 231, 251, 260, 301, 302], "represent": [77, 78, 312], "reproduc": [19, 121, 160, 162, 164, 166, 171, 174, 176, 185, 188, 195, 234, 244, 282, 283, 284, 285, 289, 290, 292, 295, 300, 301, 302, 309, 310, 311, 312, 313, 320, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339], "request": 343, "requir": [12, 26, 28, 34, 69, 75, 103, 104, 108, 138, 145, 176, 195, 203, 204, 234, 236, 238, 239, 240, 244, 251, 272, 279, 287, 291, 296, 309, 310, 312, 313, 316, 317, 325, 338, 343, 351, 357, 358, 360, 361, 365, 366, 367, 368, 370], "requires_grad": [33, 45, 75, 161, 288], "requires_grad_": [33, 292, 306, 318, 319], "resampl": 248, "rescal": [12, 82, 267, 270, 272, 276, 313, 318, 319], "rescale_mod": [12, 241, 267, 270, 272, 290, 346, 359, 360], "research": [17, 342, 365], "reset": [12, 227, 238], "reset_metr": 12, "reset_rng": 227, "reshap": [103, 260, 276], "reshape_th": 103, "resi_connect": 97, "residu": [73, 97, 102, 108, 238, 318, 319], "resiz": [264, 265, 279, 286, 290, 293, 296, 310, 313, 323, 324, 325], "resize_mod": [264, 265, 290, 310, 313], "resnet": 92, "resolut": [12, 14, 18, 21, 24, 25, 26, 29, 34, 46, 81, 83, 85, 87, 92, 95, 96, 108, 114, 124, 132, 135, 136, 137, 143, 165, 168, 172, 177, 179, 241, 248, 257, 259, 263, 267, 271, 276, 294, 299, 314, 315, 324, 340, 341, 347, 354, 355, 364, 365], "resolv": [17, 25, 39, 219, 220, 226, 279, 288, 289, 290, 294, 300, 305, 306, 310, 312, 319, 320, 323, 324, 325, 326, 327, 328, 329, 346, 359], "reson": [39, 166, 174, 186, 226, 354], "resp": 339, "respect": [86, 115, 129, 219, 220, 251, 282, 289, 296, 330, 337, 357, 362, 363], "respiratori": [39, 226], "respons": [161, 177, 187, 189, 282, 287, 294, 306], "rest": [22, 113, 216, 294], "restart": 99, "restor": [13, 21, 79, 95, 97, 113, 116, 234, 236, 276, 283, 294, 305, 306, 309, 311, 312, 334, 335, 336, 339, 345, 348, 357, 361, 364, 365], "restorm": [357, 364], "restrict": [195, 235, 292], "result": [12, 43, 170, 172, 176, 179, 190, 191, 233, 236, 237, 239, 240, 251, 272, 279, 290, 292, 293, 294, 296, 306, 318, 319, 323, 324, 328, 353, 363], "results_dir": [283, 288, 290, 300, 301, 302, 309, 310, 311, 312, 313, 334, 335, 336, 337, 339], "retain": [43, 172, 357], "retrain": 306, "retriev": [20, 79, 81, 106, 108, 114, 120, 124, 129, 132, 135, 136, 143, 148, 152, 178, 179, 182, 183, 185, 193, 231, 232, 245, 263, 265, 267, 297, 298, 299, 319, 347, 350, 354, 357, 360], "return": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 81, 82, 86, 89, 92, 94, 96, 98, 99, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 135, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 155, 156, 157, 159, 160, 162, 166, 167, 168, 169, 171, 172, 173, 176, 177, 178, 179, 180, 181, 183, 184, 186, 193, 194, 195, 196, 197, 198, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 235, 238, 241, 242, 243, 251, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 272, 273, 274, 275, 276, 279, 282, 283, 284, 288, 289, 290, 291, 296, 301, 302, 306, 310, 311, 312, 313, 316, 317, 318, 319, 320, 326, 336, 337, 338, 357, 360, 369], "return_anim": 272, "return_ax": 267, "return_fig": [267, 269, 270], "return_pan": [22, 294], "rev": 130, "revers": [318, 319, 352], "review": [177, 187], "revisit": 318, "rewrit": 369, "reynold": [251, 370], "rgb": [84, 116, 161, 169, 170, 177, 282, 291, 292, 294, 357, 365], "rho": [99, 318, 319], "rho_t": [236, 318], "right": [47, 48, 49, 54, 55, 56, 57, 58, 109, 114, 118, 119, 135, 138, 139, 160, 172, 179, 182, 183, 185, 201, 225, 236, 240, 256, 269, 279, 289, 311, 316, 318, 320, 326, 329, 330, 335, 351, 355, 360, 361, 363, 367], "rightarrow": 251, "rigid": 370, "risk": 294, "rm": [289, 319], "rmtree": [13, 14, 15, 24, 25], "rng": [37, 47, 48, 49, 160, 168, 171, 173, 180, 181, 185, 187, 188, 192, 196, 197, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "rng_manual_se": 227, "robust": [95, 102, 195, 282, 296], "role": 320, "roll": [172, 198, 250], "roll_reflect_1d": 250, "root": [13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 279, 324, 326, 327, 328, 329, 330, 335, 336, 343, 365], "root_dir": [22, 323, 325], "rotat": [29, 86, 195, 201, 204, 245, 251, 252, 253, 254, 255, 296, 324, 325, 326, 357, 366, 370], "roto": 296, "rotoreflect": 296, "rotoshift": [251, 370], "roughli": [306, 366], "round": 188, "routin": [360, 363], "row": [106, 222, 267, 270], "rule": [108, 114, 139, 319], "run": [12, 74, 75, 76, 78, 79, 80, 83, 88, 90, 91, 92, 95, 97, 101, 102, 103, 104, 108, 143, 203, 204, 234, 235, 236, 237, 238, 240, 257, 258, 259, 276, 279, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 309, 310, 311, 312, 313, 318, 319, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 343], "rung": [239, 361], "runner": [276, 279, 287, 288, 290, 292, 294, 305, 306, 309, 310, 312, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 338], "runtim": [158, 285], "rvert": [56, 279, 355], "rx": 195, "s3": [328, 335], "s_": 316, "s_i": 36, "s_n": 176, "s_sequential_indic": 289, "s_t": 186, "saito": 112, "sam": [71, 294], "same": [12, 15, 16, 19, 20, 26, 43, 63, 64, 82, 89, 95, 98, 99, 103, 108, 114, 118, 119, 120, 122, 126, 127, 139, 140, 143, 158, 160, 165, 177, 185, 189, 193, 203, 205, 206, 207, 208, 209, 210, 213, 214, 215, 220, 243, 244, 251, 257, 258, 259, 266, 267, 269, 270, 272, 273, 274, 275, 279, 282, 287, 288, 296, 316, 325, 326, 327, 329, 337, 338, 353, 360, 364], "sampl": [0, 12, 15, 16, 18, 20, 26, 27, 29, 36, 37, 39, 40, 42, 43, 75, 78, 81, 86, 89, 96, 114, 124, 134, 135, 136, 138, 159, 160, 162, 166, 168, 170, 171, 172, 174, 176, 179, 184, 185, 186, 193, 195, 212, 217, 219, 220, 221, 222, 223, 224, 225, 227, 229, 230, 234, 235, 236, 237, 238, 239, 240, 241, 248, 263, 265, 267, 279, 282, 286, 289, 291, 292, 293, 296, 312, 319, 322, 323, 324, 326, 335, 336, 347, 348, 353, 354, 357, 358, 361, 369], "sample_filt": 16, "sample_mask": [217, 221, 229], "sample_r": 16, "sampler": [92, 237, 238, 239, 240, 319, 323, 361], "samples_loc": [184, 276], "samuel": 345, "saniti": 251, "sar": 167, "sara": 276, "satellit": [12, 22, 29, 34, 35, 44, 46, 47, 59, 71, 92, 161, 165, 170, 172, 177, 179, 190, 191, 260, 262, 267, 297, 298, 299, 347, 365], "satisfi": [145, 147, 151, 152], "satur": [172, 179], "save": [12, 13, 14, 15, 17, 20, 21, 24, 25, 26, 27, 39, 40, 42, 43, 81, 97, 103, 114, 118, 132, 135, 136, 160, 162, 171, 172, 178, 179, 185, 188, 237, 241, 243, 257, 259, 263, 267, 268, 269, 270, 271, 272, 279, 283, 284, 286, 295, 297, 298, 299, 301, 302, 309, 311, 312, 313, 318, 323, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 339, 347, 365, 369], "save_chain": [237, 238, 239, 240], "save_dir": [26, 267, 268, 270, 271, 279, 283, 284, 290, 295, 309, 310, 311, 312, 313, 325, 326, 327, 328, 329, 330, 334, 335, 336, 338, 339, 365], "save_fn": [267, 269, 272], "save_fold": [241, 283, 309, 312, 337], "save_iter": 235, "save_metadata_to_cach": 16, "save_model": [12, 243], "save_path": [12, 160, 171, 178, 185, 188, 279, 295, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "save_physics_generator_param": 26, "save_step": 318, "sbr": 287, "scalar": [12, 50, 169, 212, 243, 289, 359, 360], "scale": [21, 22, 40, 82, 95, 97, 100, 101, 102, 118, 167, 223, 225, 243, 245, 251, 255, 276, 279, 283, 284, 290, 294, 295, 296, 301, 302, 309, 310, 311, 312, 313, 324, 326, 327, 328, 329, 330, 334, 337, 338, 339, 352, 365, 370], "scale_factor": 92, "scale_out": 76, "scan": [12, 16, 20, 34, 46, 90, 91, 114, 129, 135, 136, 145, 153, 154, 168, 172, 179, 195, 204, 257, 259, 263, 299, 340, 341, 347, 352, 365], "scan_fold": 20, "scanvic": 324, "scatter": [276, 282], "scatter_plot": 276, "scene": [22, 25, 169, 170, 187, 287, 324, 365], "schedul": [12, 28, 31, 32, 41, 45, 236, 279, 295, 317, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339], "scheme": [276, 325, 326], "schlemper": 222, "school": 342, "sci": 98, "scienc": [145, 342], "score": [42, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 138, 290, 316, 319, 320], "scoreloss": 366, "scoreprior": [238, 239, 240, 316, 320, 360, 361], "scratch": [279, 294, 323, 325, 326, 327, 329, 369], "screen": [19, 20], "script": [276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "scunet": [357, 364], "sde": 358, "seamlessli": [260, 282, 330, 368, 370], "search": [286, 305, 306], "second": [48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 82, 84, 108, 116, 129, 166, 171, 172, 174, 177, 186, 187, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 353, 360], "second_deriv": 48, "secondli": 318, "section": [6, 318], "secur": [306, 323, 325, 338], "see": [12, 27, 29, 36, 37, 38, 39, 42, 43, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 65, 70, 71, 72, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 93, 96, 97, 98, 99, 104, 108, 113, 116, 117, 143, 144, 156, 160, 163, 166, 167, 170, 171, 172, 174, 175, 176, 177, 179, 186, 187, 188, 190, 191, 195, 220, 221, 222, 225, 228, 229, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 267, 270, 272, 276, 285, 287, 289, 292, 294, 296, 306, 310, 316, 319, 320, 323, 324, 325, 328, 329, 330, 335, 336, 338, 349, 351, 353, 355, 357, 359, 360, 363, 365, 366, 367, 369, 370], "seed": [121, 160, 162, 164, 166, 168, 171, 173, 174, 176, 180, 181, 185, 188, 195, 196, 197, 217, 218, 219, 224, 225, 227, 228, 230, 234, 235, 236, 238, 244, 282, 283, 284, 285, 286, 289, 290, 292, 295, 300, 301, 302, 309, 310, 311, 312, 313, 320, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339], "seek": 300, "segment": [13, 365], "select": [14, 19, 21, 27, 28, 31, 32, 37, 41, 45, 108, 131, 216, 221, 222, 224, 227, 229, 246, 247, 251, 263, 276, 283, 288, 301, 302, 309, 310, 311, 312, 313, 334, 335, 336, 338, 339, 370], "self": [12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 26, 27, 29, 34, 35, 37, 38, 39, 43, 47, 48, 49, 72, 81, 94, 102, 119, 136, 160, 162, 164, 166, 168, 171, 172, 174, 175, 178, 179, 181, 185, 186, 188, 194, 195, 217, 218, 222, 223, 227, 229, 234, 238, 247, 248, 251, 257, 261, 262, 263, 267, 272, 276, 283, 286, 287, 291, 294, 296, 306, 310, 312, 316, 324, 332, 337, 345, 347, 348, 353, 355, 358, 369, 370], "selfexsr": 24, "semigroup": 245, "send": 343, "sens": [12, 18, 22, 26, 29, 34, 35, 37, 44, 46, 47, 54, 55, 59, 71, 75, 92, 114, 124, 135, 136, 142, 151, 158, 160, 161, 162, 163, 164, 165, 168, 170, 171, 172, 174, 175, 177, 179, 180, 181, 188, 190, 191, 195, 201, 217, 221, 222, 227, 229, 257, 259, 260, 262, 263, 265, 267, 271, 276, 279, 297, 298, 299, 319, 336, 340, 341, 342, 347, 354, 365], "sensit": [47, 48, 49, 176, 289], "sensitv": 176, "sensor": [29, 37, 160, 170, 172, 178, 179, 191, 195], "sensor_model": [172, 179], "separ": [22, 105, 170, 305], "seq": [318, 319], "seq_next": 319, "sequenc": [27, 39, 82, 184, 186, 188, 212, 235, 236, 272, 276, 300, 318, 323, 350], "sequenti": [27, 31, 32, 39, 74, 186, 219, 286, 323, 366], "sequentialmri": [27, 39, 323, 354], "seri": [83, 323], "serial": [306, 323, 325, 338], "series_uid": 20, "serv": [19, 103, 356, 360], "server": [286, 343, 344], "set": [6, 12, 16, 18, 19, 22, 25, 26, 27, 29, 30, 33, 34, 35, 36, 37, 38, 39, 43, 46, 51, 53, 65, 68, 70, 79, 80, 82, 83, 86, 87, 95, 96, 97, 103, 119, 124, 130, 138, 142, 144, 145, 146, 155, 166, 168, 170, 171, 172, 173, 174, 179, 180, 181, 184, 186, 191, 196, 197, 224, 227, 228, 238, 240, 241, 245, 246, 247, 251, 262, 276, 282, 284, 285, 288, 289, 290, 292, 294, 300, 305, 311, 312, 316, 317, 320, 323, 324, 328, 334, 335, 336, 337, 339, 354, 358, 359, 361, 367, 368], "set14": 24, "set14_sr": 24, "set14hr": 365, "set3": 284, "set3c": [283, 284, 295, 301, 302, 309, 310, 312, 334, 338, 339], "set_cov": 155, "set_cov_reg": 155, "set_descript": 306, "set_noise_model": [179, 191, 354], "set_weight": 155, "setup": [12, 243], "setup_train": [12, 243], "setweight": 276, "sever": [195, 204, 286, 294, 300], "shake": 19, "shannon": [219, 220, 282, 289], "shape": [16, 19, 20, 23, 27, 39, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 76, 79, 84, 85, 90, 91, 92, 95, 97, 98, 99, 100, 101, 103, 107, 116, 119, 140, 155, 156, 160, 166, 167, 170, 171, 174, 175, 176, 177, 182, 183, 185, 186, 188, 192, 193, 194, 206, 207, 209, 210, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 231, 247, 251, 260, 267, 270, 272, 276, 282, 283, 285, 290, 292, 293, 294, 300, 302, 305, 306, 317, 318, 319, 320, 323, 335, 336, 353, 357, 360, 365, 370], "shard": 21, "share": [323, 336], "shared_weight": 193, "sharp": [19, 365], "sharp_fram": 19, "sharpen": [22, 59, 92, 177, 362, 367], "shear": [221, 324, 370], "shelf": [358, 359, 362], "shepp": 290, "sheppard": 289, "shepplogan": [290, 313], "shepplogandataset": 337, "shift": [82, 172, 182, 183, 198, 232, 245, 250, 251, 252, 253, 255, 290, 293, 296, 324, 370], "shift_max": [245, 249, 252, 253, 254, 255, 296], "shifttim": 370, "short": [295, 338], "shot": [19, 365], "should": [12, 13, 16, 17, 22, 24, 25, 26, 27, 39, 40, 42, 43, 47, 48, 49, 52, 65, 76, 78, 80, 88, 90, 91, 92, 95, 97, 101, 103, 136, 143, 145, 147, 150, 151, 152, 160, 166, 169, 172, 173, 174, 175, 176, 184, 188, 195, 198, 203, 204, 216, 218, 219, 220, 225, 226, 227, 234, 236, 238, 240, 241, 242, 251, 257, 258, 259, 267, 270, 272, 276, 285, 286, 287, 289, 290, 310, 313, 325, 334, 360], "show": [12, 19, 26, 108, 117, 189, 194, 241, 267, 268, 269, 270, 271, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 300, 301, 302, 309, 310, 311, 313, 316, 317, 318, 320, 323, 324, 325, 326, 327, 329, 330, 334, 335, 336, 339, 353], "show_progress_bar": [12, 26, 117, 241, 279, 294, 295, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "showcas": 290, "shown": [112, 269, 276, 287, 311, 355, 359], "shrinkag": 360, "shuffl": [12, 20, 79, 87, 279, 283, 284, 295, 306, 309, 312, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 338, 339, 365], "shutil": [13, 14, 15, 24, 25], "siam": [83, 98], "side": [62, 267, 272], "sigma": [40, 42, 47, 48, 73, 74, 79, 81, 82, 83, 84, 86, 89, 95, 96, 97, 102, 113, 116, 124, 125, 132, 137, 138, 145, 149, 164, 168, 179, 180, 187, 196, 201, 225, 227, 230, 234, 235, 236, 239, 240, 257, 282, 283, 285, 287, 288, 291, 292, 296, 300, 301, 302, 305, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 330, 334, 337, 338, 339, 346, 349, 353, 354, 357, 359, 360, 361, 365, 367], "sigma2": 330, "sigma2_nois": 316, "sigma_": [196, 367], "sigma_cur": [318, 319], "sigma_d": 316, "sigma_denois": [132, 137, 138, 288, 309, 311, 312, 320, 334, 338, 339], "sigma_dict": 230, "sigma_i": [201, 319], "sigma_init": 330, "sigma_k": 318, "sigma_max": [196, 230], "sigma_min": [196, 230], "sigma_n": 236, "sigma_nois": 318, "sigma_sq": [84, 116], "sigma_t": [318, 319], "sigma_tild": 319, "sigma_x": [201, 367], "sigmagener": [227, 353, 365], "sigmat": 319, "sigmoid": 93, "sign": [122, 123, 160], "signal": [12, 18, 26, 29, 35, 36, 37, 46, 68, 72, 94, 100, 118, 134, 138, 142, 160, 162, 170, 172, 178, 179, 185, 187, 191, 192, 193, 195, 223, 242, 282, 284, 289, 291, 292, 293, 323, 346, 348, 349, 355, 358, 359, 360, 366], "signific": [316, 343], "significantli": 337, "sigpi": 176, "silent": [76, 78, 88, 90, 91, 92, 101, 203, 204], "sim": [29, 36, 40, 47, 48, 49, 54, 55, 56, 57, 58, 86, 160, 168, 180, 185, 196, 197, 225, 240, 279, 305, 306, 319, 320, 330, 354, 355], "simeq": 319, "similar": [43, 61, 70, 71, 160, 171, 178, 185, 188, 212, 245, 251, 260, 290, 296, 324, 352, 367, 370], "similarli": [288, 338, 365], "simlarli": 276, "simpl": [55, 56, 58, 73, 75, 92, 166, 174, 186, 276, 279, 283, 284, 286, 288, 291, 292, 293, 295, 296, 310, 311, 316, 317, 320, 326, 327, 328, 329, 330, 337, 339, 351, 355, 369], "simpler": 318, "simplest": 356, "simpli": [46, 177, 194, 198, 267, 279, 306, 318, 319, 323, 336, 357, 368], "simplic": [276, 279, 318, 334, 339], "simul": [12, 170, 176, 186, 254, 289, 293, 296, 323, 348, 352, 369, 370], "simulate_birdcage_csm": 176, "simultan": [43, 171, 218, 223], "sin": [201, 289], "sinc": [72, 76, 78, 88, 90, 91, 92, 101, 103, 117, 118, 120, 158, 160, 188, 202, 203, 204, 279, 285, 294, 316, 319, 320, 368], "sinc_filt": 354, "sine": 160, "singl": [16, 19, 26, 36, 37, 38, 95, 103, 108, 129, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 158, 159, 166, 172, 174, 179, 186, 187, 188, 190, 191, 219, 257, 258, 259, 260, 263, 267, 269, 270, 276, 282, 288, 294, 297, 298, 299, 300, 310, 317, 318, 323, 324, 325, 327, 335, 336, 337, 338, 339, 347, 353, 354, 359, 360, 361, 366, 367], "single_pixel": 310, "singlecoil": 16, "singlephotonlidar": [287, 354], "singlepixelcamera": [292, 310, 354], "singular": [159, 162, 166, 174, 186, 188, 234, 291, 316, 317, 351, 353], "sinogram": 292, "site": [21, 294, 296, 323], "situat": [282, 300], "size": [12, 14, 15, 23, 24, 26, 27, 34, 39, 43, 47, 48, 49, 50, 51, 53, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 76, 77, 78, 80, 82, 84, 88, 89, 92, 93, 97, 101, 107, 108, 109, 115, 116, 117, 118, 119, 120, 122, 125, 127, 130, 131, 134, 142, 145, 149, 155, 157, 158, 159, 160, 162, 163, 165, 166, 170, 171, 172, 173, 174, 176, 177, 179, 183, 184, 186, 187, 188, 189, 194, 195, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 232, 239, 240, 251, 256, 260, 264, 265, 267, 269, 270, 272, 276, 282, 285, 287, 289, 290, 292, 293, 294, 295, 296, 300, 306, 309, 312, 316, 318, 319, 320, 323, 325, 328, 330, 335, 336, 337, 338, 349, 352, 353, 357, 360, 363, 365, 367, 370], "skew": [245, 252], "skew_max": [245, 252, 253, 254, 255], "skip": [102, 319, 323], "skrock": 361, "slice": [16, 20, 174, 176, 357, 365], "slice_fnam": 20, "slice_ind": 16, "slicesamplefileidentifi": 16, "slicesampleidentifi": 20, "slide": 89, "slow": [80, 158, 165, 279, 361], "slower": 282, "sm": 360, "small": [43, 48, 49, 84, 98, 107, 116, 142, 156, 195, 204, 285, 300, 306, 324, 328, 329, 330, 334, 339, 360, 365, 366], "smaller": [43, 82, 135, 155, 158, 165, 167, 177, 189, 205, 208, 215, 239, 240, 276, 283, 301, 302, 312, 360], "smi": 263, "smolyakov": [98, 99], "smooth": [133, 134, 336, 366, 370], "snippet": 276, "snu": 17, "so": [12, 19, 166, 174, 186, 216, 221, 222, 254, 276, 282, 290, 291, 294, 318, 319, 330, 339], "soft": [12, 13, 18, 26, 34, 46, 103, 104, 114, 122, 124, 135, 136, 142, 147, 151, 160, 172, 179, 257, 259, 262, 263, 267, 271, 288, 299, 300, 336, 338, 340, 341, 347], "softplu": [79, 87], "softwar": [98, 99, 342], "solut": [12, 99, 103, 104, 108, 117, 129, 160, 172, 177, 195, 256, 276, 290, 291, 300, 301, 302, 360, 363], "solv": [80, 98, 99, 108, 117, 145, 156, 279, 290, 296, 311, 312, 318, 319, 323, 334, 338, 345, 355, 358, 359, 360, 363], "solver": 140, "some": [16, 28, 34, 95, 131, 160, 172, 179, 195, 276, 282, 285, 289, 291, 292, 296, 301, 302, 316, 319, 350, 353, 354, 357, 358, 359, 360, 362, 363, 367, 368, 370], "sometim": 363, "somewhat": 285, "soon": 343, "sor": 160, "sort": 353, "sota": 361, "sourc": [12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 342, 343], "source_radiu": [195, 204], "sourcetensor": [292, 318, 319], "space": [16, 27, 39, 73, 84, 116, 131, 184, 186, 189, 194, 195, 204, 217, 221, 222, 228, 229, 276, 279, 292, 296, 306, 323, 324, 325, 337, 360], "spacevaryingblur": [228, 282, 354], "spacial": 276, "spars": [74, 170, 184, 203, 204, 212, 276, 292], "sparsiti": [276, 300, 302, 357], "spatial": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 189, 223, 276, 282, 352, 367], "special": [27, 39, 252, 253, 254, 255, 323, 370], "specif": [9, 16, 19, 51, 53, 108, 113, 114, 117, 139, 183, 282, 283, 291, 309, 312, 313, 348, 353, 354, 356, 358, 363, 370], "specifi": [14, 21, 45, 51, 53, 54, 55, 56, 57, 58, 83, 136, 150, 163, 166, 174, 176, 186, 217, 218, 221, 229, 231, 243, 262, 272, 276, 282, 283, 289, 292, 301, 302, 309, 310, 312, 313, 338, 339, 353, 366, 370], "speckl": 167, "spectra": 170, "spectral": [30, 33, 69, 71, 152, 161, 172, 177, 178, 294, 360, 366, 367], "spectral_angle_mapp": [294, 323], "spectral_method": [178, 290], "spectralanglemapp": [294, 367], "spectrum": 170, "speed": [26, 48, 99, 172, 279, 291, 294, 323, 337, 358], "sphinx": [276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "sphinx_gallery_multi_imag": [276, 318], "sphinx_gallery_thumbnail_numb": 318, "split": [12, 14, 16, 18, 21, 26, 27, 34, 35, 38, 39, 40, 43, 72, 81, 84, 94, 98, 99, 102, 113, 116, 118, 129, 143, 145, 146, 149, 168, 172, 179, 195, 216, 218, 223, 226, 236, 257, 258, 259, 261, 262, 263, 286, 299, 305, 306, 309, 323, 325, 331, 332, 334, 338, 339, 347, 360, 366], "split_ratio": [43, 171, 218, 223, 323, 328], "split_siz": [27, 216, 323], "splitter": 323, "splittingloss": [27, 39, 218, 223, 323, 328, 366], "splittingmodel": 43, "spoke": [27, 39, 186], "sqrt": [68, 82, 98, 99, 106, 107, 160, 188, 225, 235, 236, 240, 276, 316, 317, 318, 319, 320, 330, 336, 360], "sqrt_1m_alphas_cumprod": 318, "sqrt_alphas_cumprod": 318, "sqrt_recip_alphas_cumprod": 318, "squar": [12, 27, 35, 37, 38, 39, 43, 46, 47, 48, 49, 52, 64, 67, 78, 92, 110, 156, 195, 219, 220, 223, 232, 242, 283, 295, 318, 338, 355, 360], "sr": [21, 97], "src": [287, 296], "srf": [161, 177, 294], "ss": 12, "ssdu": [43, 223, 328], "ssim": [31, 32, 41, 45, 323, 367], "ssim_std": 323, "stabil": [156, 320], "stabilis": 239, "stabl": [47, 70, 267, 270, 272, 346], "stack": [44, 139, 172, 179, 190, 191, 251, 294, 323, 353, 370], "stackedlinearphys": [44, 139, 177], "stackedphys": [44, 139, 172, 179, 190, 353], "stackedphysicsdatafidel": 353, "stackedphysicsloss": [294, 353], "stage": [95, 96], "stand": 135, "standalon": 357, "standard": [19, 40, 46, 47, 48, 56, 69, 82, 84, 95, 108, 113, 116, 124, 156, 157, 164, 168, 169, 177, 180, 187, 196, 201, 218, 225, 239, 240, 241, 257, 258, 259, 274, 279, 283, 287, 288, 290, 292, 294, 300, 301, 302, 305, 306, 309, 310, 313, 317, 318, 319, 320, 338, 349, 355, 357, 359, 360, 361, 363, 365, 367], "standart": [143, 258, 259, 312, 313], "star": [189, 215, 256, 363], "start": [129, 153, 154, 276, 291, 306, 323, 325, 326, 327, 329, 338], "state": [12, 13, 227, 276, 345], "state_dict": [12, 279, 288, 294, 323, 324, 325, 326, 327, 328, 329, 338], "state_dict_d": 279, "static": [27, 39, 43, 98, 99, 100, 101, 103, 166, 175, 193, 194, 292, 319, 323], "statist": [40, 170, 238, 239, 240, 352, 361, 367], "std": [317, 320], "std_scale": 223, "stein": 294, "stem": 287, "step": [12, 27, 39, 40, 42, 43, 47, 48, 87, 102, 108, 109, 117, 118, 119, 120, 129, 134, 143, 145, 149, 150, 153, 154, 157, 166, 171, 186, 189, 195, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 236, 239, 240, 256, 257, 258, 259, 276, 282, 289, 292, 300, 301, 302, 306, 309, 310, 312, 313, 316, 320, 323, 330, 337, 353, 360, 363, 364, 369], "step_ratio_d": 243, "step_siz": [47, 48, 157, 238, 239, 240, 279, 295, 316, 320, 325, 326, 327, 329, 330, 334, 338, 339], "steplossschedul": 366, "steplr": [279, 295, 325, 326, 327, 329, 334, 337, 338, 339], "stepsiz": [99, 108, 117, 118, 120, 121, 122, 123, 124, 135, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 257, 258, 259, 276, 283, 288, 290, 301, 302, 309, 310, 311, 312, 313, 334, 335, 336, 338, 339, 346, 359, 360, 363], "stepsize_du": [338, 360], "stepsize_int": 135, "stepz_pixel": [220, 289], "still": [251, 353], "stochast": [96, 97, 172, 179, 235, 239, 330, 349, 361], "stop": [75, 80, 108, 113, 117, 155, 156, 157, 283, 285, 309, 310, 312, 359], "stopping_criterion": 155, "storag": [288, 294, 323, 325, 326, 327, 328, 329], "store": [16, 18, 20, 26, 117, 129, 158, 159, 160, 162, 165, 166, 185, 186, 188, 189, 216, 218, 223, 226, 230, 238, 251, 262, 286, 350, 353, 360], "str": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 39, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 79, 82, 83, 84, 87, 88, 92, 95, 96, 97, 102, 103, 104, 105, 108, 116, 130, 142, 143, 155, 158, 159, 160, 161, 163, 165, 170, 175, 176, 177, 182, 183, 185, 187, 188, 189, 190, 192, 193, 195, 198, 203, 204, 205, 207, 208, 210, 215, 216, 218, 219, 220, 223, 225, 226, 227, 228, 230, 231, 235, 236, 241, 244, 245, 248, 250, 252, 253, 254, 255, 257, 258, 259, 261, 264, 265, 267, 268, 269, 270, 271, 272, 295, 323, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339], "strategi": [108, 217, 221, 229, 292], "strength": [152, 173, 316, 320], "stretch": [245, 252], "strictli": 147, "stride": [23, 79, 87], "strideconv": [79, 87], "strike": 355, "string": [143, 193, 257, 258, 259], "strong_convex": 88, "strongli": 88, "structur": [13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 69, 70, 79, 166, 174, 186, 192, 193, 291, 352, 353, 365], "structural_similar": 70, "structural_similarity_index_measur": 65, "structured_random": 192, "structuredrandom": [160, 354], "structuredrandomphaseretriev": 354, "study_uid": 20, "style": [27, 343], "sub": [28, 31, 32, 41, 45, 142, 318, 335], "sub_net_s": [130, 306], "subband": 103, "subclass": [76, 78, 88, 90, 91, 92, 101, 203, 204, 310, 337, 355], "subfold": 15, "subgroup": [245, 252, 253, 254, 255, 370], "subject": [19, 300], "submit": 343, "subnetwork": [130, 306], "suboptim": 318, "subpackag": [1, 365], "subplot": [287, 318], "subsampl": [43, 160, 165, 166, 174, 175, 176, 186, 188, 218, 223, 292], "subselect": [28, 246], "subset": [22, 43, 171, 218, 224, 323, 325, 327, 328, 329, 330, 365], "substract": 260, "subsubfold": 15, "success": 355, "successfulli": [13, 14, 24, 25, 279, 294, 324], "suffic": [282, 289], "suffici": [108, 319, 326], "suggest": [95, 118, 306, 318, 319, 344], "suit": [76, 360], "suitabl": [352, 367], "sum": [45, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 129, 131, 142, 161, 166, 188, 190, 194, 227, 251, 260, 293, 306, 317, 319, 320, 323, 336, 350, 352, 353, 360, 367, 370], "sum_": [40, 43, 86, 106, 107, 189, 190, 215, 251, 300, 306, 326, 335, 360, 367], "sum_i": [44, 84, 112, 116, 121, 128, 131, 134, 139, 276, 296, 360], "summar": [349, 364], "summari": [348, 358], "summat": 155, "summer": 342, "sup": [31, 32, 41, 279], "sup_": 135, "supadversarialdiscriminatorloss": [51, 243, 279, 366], "supadversarialgeneratorloss": [53, 243, 279, 366], "super": [12, 14, 18, 21, 25, 26, 29, 34, 46, 81, 83, 85, 87, 108, 114, 124, 132, 135, 136, 137, 143, 165, 168, 172, 179, 219, 220, 238, 241, 248, 257, 259, 263, 267, 271, 276, 283, 291, 294, 299, 310, 314, 315, 316, 324, 337, 340, 341, 347, 354, 355, 365], "supervis": [12, 18, 26, 27, 29, 34, 35, 37, 38, 39, 40, 43, 46, 47, 48, 49, 54, 55, 72, 81, 94, 102, 162, 164, 166, 168, 171, 172, 174, 175, 179, 181, 186, 194, 195, 217, 218, 222, 223, 227, 229, 242, 247, 248, 251, 257, 261, 262, 263, 267, 272, 279, 294, 295, 296, 324, 332, 334, 335, 336, 337, 338, 339, 345, 347, 348, 353, 355, 358, 370], "suploss": [31, 32, 41, 242, 279, 294, 295, 334, 335, 336, 337, 338, 339, 366, 367], "support": [18, 26, 42, 67, 74, 130, 142, 167, 205, 206, 208, 209, 213, 214, 221, 222, 229, 243, 300, 348, 354, 365], "suppos": [296, 369], "suptitl": [267, 270, 282, 289, 300, 318, 334, 335, 336, 339], "sure": [12, 18, 26, 34, 47, 48, 49, 72, 81, 94, 102, 162, 164, 172, 179, 181, 262, 263, 299, 320, 330, 331, 332, 343, 347], "suregaussianloss": [44, 294, 329, 330, 366], "surepgloss": [329, 330, 366], "surepoissonloss": [44, 329, 366], "surpris": 285, "survei": 170, "svd": [162, 171, 291, 361], "swin": [96, 97], "swinir": [357, 364], "switch": 251, "swz30": 364, "symmetr": [86, 251, 296, 357, 370], "symmetris": 251, "symposium": 342, "synchron": [12, 283, 284, 295, 309, 310, 312, 313, 325, 326, 327, 329, 330, 334, 335, 336, 338, 339], "synthes": [19, 219, 220, 282], "synthesi": [59, 96, 367], "synthet": 364, "system": [117, 156, 349, 353, 360], "t": [13, 21, 27, 39, 40, 61, 66, 69, 82, 89, 98, 99, 100, 101, 117, 133, 134, 138, 152, 166, 169, 172, 186, 187, 194, 198, 216, 217, 221, 222, 223, 225, 226, 229, 235, 236, 241, 251, 263, 269, 272, 279, 284, 287, 292, 296, 306, 313, 318, 319, 323, 324, 325, 335, 336, 338, 354, 355, 357, 358, 360, 366, 370], "t1": [300, 350], "t10k": [328, 335], "t2": 350, "t3": 350, "t_": 251, "t_g": [29, 36, 86, 251], "t_hist": 117, "t_i": [296, 318], "t_im1": 318, "t_ix": 296, "t_l": 183, "t_max": 337, "t_temp": 318, "tabl": [335, 336, 343, 349], "tachella": 345, "tag": [108, 335, 360], "tail": 222, "take": [12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 48, 49, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 76, 78, 79, 82, 88, 90, 91, 92, 100, 101, 105, 116, 117, 129, 130, 131, 195, 203, 204, 221, 243, 251, 292, 293, 306, 316, 318, 319, 328, 329, 357, 360, 366, 367], "taken": [19, 36, 37, 77, 78, 85, 140, 222, 269, 276, 296, 343, 362], "tangent": 285, "taohuang2018": 38, "tar": [12, 15, 17, 21, 25], "target": [16, 46, 59, 65, 71, 184, 194, 276], "target_transform": 15, "task": [21, 26, 95, 276, 355, 365], "tau": [47, 48, 49, 99, 108, 145, 276, 301, 302, 310, 311, 329, 330, 338, 360], "tau1": 48, "tau2": 48, "tau_1": 48, "tau_2": 48, "tcia": 20, "teboul": 99, "telescop": 276, "templat": [34, 81, 94, 194], "tempor": [39, 101, 194, 370], "tend": [160, 276], "tensor": [12, 19, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 82, 83, 84, 85, 86, 89, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 238, 243, 250, 251, 260, 264, 265, 266, 267, 269, 270, 272, 273, 274, 275, 276, 282, 288, 289, 290, 291, 292, 293, 294, 296, 310, 312, 318, 319, 323, 335, 337, 350, 352, 353, 357, 360, 365, 367, 370], "tensor_s": [27, 39, 43, 124, 162, 171, 216, 218, 223, 226, 234, 236, 285, 292, 295, 302, 305, 317, 318, 319, 320, 323, 326, 338, 353, 360], "tensorlist": [22, 44, 69, 92, 139, 172, 177, 179, 190, 191, 233, 266, 273, 274, 275, 276, 294, 353], "tensorshap": 296, "term": [48, 84, 98, 99, 106, 108, 113, 114, 116, 117, 120, 123, 129, 135, 136, 137, 139, 141, 143, 145, 153, 154, 236, 257, 258, 259, 276, 283, 288, 301, 302, 309, 310, 311, 312, 313, 318, 319, 334, 335, 336, 338, 339, 349, 353, 359, 360, 363], "terminologi": 129, "terri": [276, 296, 345], "tessel": 244, "test": [8, 12, 16, 18, 19, 24, 25, 26, 27, 39, 40, 42, 43, 75, 80, 95, 96, 104, 172, 267, 279, 282, 283, 289, 290, 291, 294, 309, 312, 343, 365, 369], "test_base_dataset": [326, 334, 335, 336, 338, 339], "test_batch_s": [295, 334, 335, 336, 337, 338, 339], "test_dataload": [12, 241, 279, 283, 295, 309, 312, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "test_datapoint": [26, 326, 327, 328, 329, 330, 335, 336], "test_dataset": [26, 279, 283, 284, 295, 309, 312, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 348, 365], "test_dataset_nam": [295, 334, 338, 339], "test_img": [305, 306], "test_psnr": [295, 338], "test_sampl": [334, 335, 336, 339], "test_transform": [295, 334, 338, 339], "text": [40, 47, 49, 54, 55, 56, 57, 58, 61, 63, 64, 66, 67, 68, 69, 70, 86, 108, 118, 119, 120, 122, 124, 125, 135, 142, 152, 160, 162, 171, 176, 178, 183, 195, 196, 199, 200, 202, 230, 279, 296, 300, 301, 302, 324, 335, 336, 355, 360, 367], "tgv": 98, "tgvdenois": 357, "th": [98, 99, 103, 104, 106, 107, 123, 130, 240, 300, 306], "than": [22, 43, 135, 147, 155, 158, 160, 165, 172, 177, 184, 188, 189, 195, 198, 205, 208, 215, 220, 239, 240, 267, 270, 276, 283, 284, 288, 292, 312, 318, 319, 328, 338, 360, 366, 367], "thank": [282, 289], "thei": [12, 18, 19, 26, 136, 234, 306, 316, 323, 325, 336, 338, 339, 352, 353, 355, 357, 363, 366, 367, 368, 369], "them": [19, 20, 28, 76, 78, 88, 90, 91, 92, 101, 103, 172, 183, 203, 204, 227, 272, 296, 299, 334, 335, 336, 357, 370], "themselv": [243, 279], "theorem": [219, 256, 282, 289, 319, 363], "theoret": [172, 296, 370], "theori": [98, 99, 219, 220, 282, 289, 360], "therefor": [290, 348, 360], "therein": 289, "theta": [80, 201, 203, 204, 227, 235, 236, 251, 285, 291, 295, 306, 326, 353, 354], "theta2": 353, "theta_max": [245, 252, 253, 254, 255, 296, 324], "theta_z_max": [245, 252, 253, 254, 255, 296], "thi": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 88, 90, 91, 92, 93, 95, 97, 98, 99, 101, 102, 103, 104, 106, 108, 113, 114, 115, 117, 118, 119, 120, 131, 136, 138, 139, 144, 149, 155, 158, 160, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 179, 181, 183, 184, 185, 186, 187, 188, 189, 194, 195, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 227, 229, 234, 235, 236, 238, 241, 242, 243, 244, 251, 256, 257, 259, 262, 267, 271, 272, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 305, 306, 309, 310, 311, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 343, 353, 355, 356, 357, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370], "thin": [237, 238, 239, 240, 316], "third": [187, 287], "thorac": 20, "thorough": 296, "those": [142, 318], "three": [145, 170, 350], "three_d": [166, 174, 175, 176, 186], "thres_conv": [108, 237, 283, 312], "thresh_conv": [238, 239, 240], "threshold": [12, 18, 26, 34, 45, 46, 103, 104, 108, 114, 122, 124, 125, 135, 136, 142, 147, 151, 160, 172, 179, 237, 238, 240, 257, 259, 262, 263, 267, 271, 288, 299, 300, 336, 338, 340, 341, 347, 360], "threshold_3d": 103, "threshold_nd": 103, "thresold_2d": 103, "thresold_func": 103, "through": [27, 29, 30, 33, 39, 43, 75, 184, 246, 276, 282, 289, 291, 319, 353, 361, 366, 370], "thu": [16, 21, 80, 82, 88, 103, 104, 166, 174, 186, 195, 238, 239, 240, 286, 312, 337, 360], "ti": 259, "tight": [267, 270, 300], "tight_layout": [287, 318], "tikhonov": 360, "tild": [159, 160, 162, 166, 171, 172, 179, 181, 186, 195, 235, 319], "tilt": [245, 254, 324, 370], "time": [9, 16, 27, 28, 31, 32, 39, 40, 41, 42, 43, 45, 75, 82, 84, 86, 100, 101, 108, 116, 160, 162, 165, 166, 171, 184, 185, 186, 187, 194, 216, 217, 221, 222, 223, 229, 237, 241, 243, 246, 250, 251, 272, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 357, 359, 360, 366], "time_dim": 272, "time_pair": 319, "timeagnosticnet": [27, 39, 357], "timeaveragingnet": 357, "timemixin": [100, 101, 166, 251, 351], "timestep": [82, 235, 236, 318, 319], "tini": 294, "tip": [239, 240], "tissu": 15, "titl": [189, 267, 269, 270, 272, 276, 282, 285, 287, 289, 290, 291, 292, 293, 294, 296, 301, 302, 310, 311, 313, 316, 317, 318, 319, 320, 323, 334, 335, 336, 339, 350], "tkbn": 276, "to_complex_denois": [290, 357], "to_logimag": 276, "to_stat": [101, 166], "to_torch_complex": 175, "togeth": [9, 296, 370], "toi": 334, "tol": [30, 33, 156, 157, 172, 179, 276, 360], "tol_int": 135, "toler": [30, 33, 75, 156, 157, 172, 179, 279], "tomographi": [12, 20, 23, 81, 83, 108, 114, 116, 124, 126, 130, 131, 132, 135, 136, 143, 162, 164, 168, 172, 173, 179, 197, 263, 265, 267, 268, 299, 307, 308, 314, 315, 328, 337, 347, 352, 354, 364], "too": [22, 26, 43, 65, 94, 170, 243], "tool": [19, 276, 348], "toolbox": [282, 289, 352], "top": [47, 48, 49, 72, 103, 104, 108, 114, 126, 127, 133, 139, 145, 159, 160, 162, 166, 172, 178, 179, 186, 190, 195, 198, 256, 269, 276, 295, 299, 310, 316, 326, 329, 330, 337, 338, 349, 353, 356, 360, 363], "topk": [103, 104], "torch": [12, 18, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 84, 86, 89, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 195, 196, 197, 198, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 348, 350, 352, 353, 357, 360, 363, 365, 366, 367, 368, 370], "torchist": 212, "torchkbnufft": [184, 276], "torchmetr": [59, 63, 64, 65, 69, 70, 71, 294, 323], "torchmetric_kwarg": 70, "torchvis": [13, 14, 15, 16, 17, 18, 21, 24, 25, 29, 251, 279, 283, 284, 286, 295, 296, 301, 302, 309, 312, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 338, 339, 365, 370], "torso": 82, "total": [12, 19, 20, 37, 42, 50, 73, 95, 98, 99, 103, 108, 114, 124, 135, 136, 140, 143, 159, 162, 168, 172, 179, 221, 249, 263, 267, 268, 276, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 341, 347, 355, 357, 359, 366, 369], "total_batch": 42, "totalloss": [279, 294, 295, 306, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 369], "totensor": [16, 279, 283, 284, 286, 295, 301, 302, 309, 312, 324, 326, 327, 328, 329, 330, 334, 335, 336, 338, 339, 365], "toulous": 342, "tour": [158, 159, 160, 161, 162, 163, 164, 165, 168, 171, 172, 174, 175, 177, 179, 180, 181, 188, 189, 190, 191, 195, 201, 217, 219, 221, 222, 224, 225, 227, 228, 229, 263, 265, 267, 289, 297, 298, 299, 347], "toward": [212, 301, 302], "tqdm": [12, 306, 318, 319], "track": 367, "tracker": [343, 344], "trade": 355, "tradeoff": 367, "tradit": [82, 276], "train": [0, 2, 12, 14, 16, 18, 21, 26, 27, 34, 39, 40, 42, 43, 46, 51, 53, 54, 55, 56, 57, 58, 59, 61, 65, 69, 70, 71, 72, 75, 76, 77, 78, 81, 82, 83, 85, 92, 93, 94, 95, 96, 102, 138, 162, 171, 172, 179, 238, 239, 240, 241, 243, 257, 259, 263, 271, 282, 283, 284, 286, 288, 290, 294, 297, 298, 299, 309, 310, 312, 313, 318, 319, 324, 345, 347, 355, 358, 361, 363, 364, 365, 367, 368, 369], "train_base_dataset": [326, 334, 335, 336, 338, 339], "train_batch_s": [295, 334, 335, 336, 337, 338, 339], "train_dataload": [12, 242, 243, 279, 286, 294, 295, 306, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "train_datapoint": [26, 283, 295, 309, 312, 325, 326, 327, 328, 329, 330, 334, 335, 336, 338, 339], "train_dataset": [26, 279, 283, 284, 295, 306, 309, 312, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 348, 365], "train_dataset_nam": [295, 325, 327, 329, 330, 334, 335, 336, 337, 338, 339], "train_img": 306, "train_loss": [31, 32, 41, 45, 59, 63, 64, 65, 69, 70, 71, 367], "train_test_transform": [335, 336], "train_transform": [295, 334, 338, 339], "trainabl": [38, 40, 43, 47, 48, 49, 102, 257, 259, 261, 279, 288, 294, 295, 311, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 338, 339, 358, 363], "trainable_param": [257, 259, 288, 334, 335, 336, 338, 339, 363], "trainer": [69, 241, 242, 243, 279, 294, 295, 306, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 348, 355, 367, 368], "trajectori": [19, 225, 282], "trajectory_first": 19, "trajectory_index": 19, "transact": [74, 337], "transform": [0, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 34, 35, 36, 42, 72, 74, 81, 86, 89, 95, 97, 102, 103, 104, 142, 160, 162, 166, 168, 171, 172, 174, 175, 176, 179, 183, 184, 186, 188, 192, 193, 194, 195, 203, 204, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 262, 263, 265, 267, 276, 279, 283, 284, 292, 295, 297, 298, 299, 300, 301, 302, 306, 309, 310, 312, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 347, 348, 352, 357, 360, 364, 365, 366], "transform2": 296, "transform3": 296, "transform_data": 365, "transform_func": 192, "transform_func_inv": 192, "transform_kspac": 16, "transform_m": 22, "transform_pan": 22, "transform_target": 16, "transformerblock": 95, "transformparam": 251, "translat": [29, 93, 245, 249, 252, 253, 255, 324, 325, 366, 370], "transmiss": 169, "transpos": [72, 79, 87, 108, 117, 160, 162, 170, 172, 195, 208, 209, 210, 291, 352], "treat": 194, "trick": 319, "trigger": [227, 287, 296], "trim": 193, "trivial": [169, 171, 316], "true": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 43, 45, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 80, 82, 83, 86, 88, 89, 90, 91, 93, 95, 97, 100, 102, 107, 108, 117, 129, 130, 133, 134, 136, 142, 144, 145, 146, 153, 154, 155, 160, 165, 171, 172, 174, 175, 176, 177, 181, 183, 184, 186, 188, 193, 195, 198, 202, 203, 204, 205, 206, 207, 208, 209, 210, 218, 223, 234, 235, 236, 237, 238, 241, 243, 244, 247, 251, 256, 263, 267, 268, 269, 270, 271, 272, 276, 279, 282, 283, 284, 285, 286, 288, 289, 290, 292, 294, 295, 296, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 346, 359, 360, 365, 367, 369, 370], "true_sigma": 330, "truli": [47, 48, 49], "truth": [12, 15, 16, 18, 19, 27, 28, 39, 46, 54, 55, 67, 117, 216, 226, 241, 243, 279, 285, 294, 295, 301, 302, 305, 306, 310, 311, 313, 316, 317, 318, 319, 320, 323, 324, 328, 334, 335, 336, 338, 339, 355, 358, 366, 369], "try": [251, 276, 328, 335, 343, 346], "tun": 236, "tune": [152, 279, 306, 313, 323], "tupl": [12, 19, 23, 27, 39, 42, 48, 76, 80, 85, 89, 92, 97, 117, 159, 160, 161, 163, 165, 166, 169, 171, 174, 175, 176, 177, 182, 183, 184, 185, 186, 188, 192, 193, 198, 201, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 231, 237, 238, 239, 240, 241, 242, 243, 264, 265, 267, 269, 270, 272, 276], "turn": [86, 237, 256, 257, 282, 296, 300, 305, 319, 357, 363, 367], "tutori": [77, 78, 117, 256, 318, 319, 342, 363], "tv": [50, 98, 99, 108, 114, 124, 135, 136, 140, 143, 159, 162, 168, 172, 179, 263, 267, 268, 299, 303, 304, 336, 347], "tv_smooth": 336, "tvdenois": [140, 357], "tvloss": 366, "tvprior": [99, 301, 360], "tweedi": [42, 138, 319, 320, 361], "two": [15, 16, 38, 42, 43, 44, 61, 129, 135, 139, 171, 172, 179, 195, 204, 224, 227, 251, 260, 279, 305, 306, 318, 319, 325, 326, 327, 355, 360, 367], "twophoton_bpae_b": 15, "twophoton_bpae_g": 15, "twophoton_bpae_r": 15, "twophoton_mic": 15, "tx_prev": 117, "type": [15, 16, 87, 160, 176, 184, 185, 193, 195, 203, 204, 215, 217, 218, 219, 220, 223, 224, 225, 227, 230, 231, 242, 251, 257, 259, 260, 266, 273, 274, 275, 279, 286, 289, 293, 296, 336, 355, 357, 365], "type_t": 82, "typic": [51, 53, 138, 166, 186, 352, 360, 361, 365], "u": [40, 47, 48, 49, 79, 90, 102, 107, 114, 118, 119, 120, 122, 124, 125, 129, 135, 139, 162, 172, 196, 197, 256, 279, 286, 295, 310, 316, 318, 319, 326, 327, 328, 329, 330, 337, 349, 354, 360, 363], "u0": 337, "u2": [98, 99], "u_": [117, 144, 145, 146, 147, 149, 151, 310, 338, 359, 360], "u_0": 145, "u_adjoint": [162, 316], "u_init": [288, 338], "u_k": [117, 145, 147, 149, 151, 310, 338, 359, 360], "uair": 56, "uair_model": 279, "uairgeneratorloss": [279, 366], "ubyt": [328, 335], "uc": 306, "ucl": 342, "uk": 342, "ula": [30, 81, 83, 114, 124, 135, 136, 138, 162, 168, 171, 172, 179, 238, 263, 265, 267, 299, 321, 322, 347, 361], "ula_mean": 316, "ula_var": 316, "ultim": 343, "ulyanov": [80, 285], "un": [76, 330], "unadjust": [239, 240, 316, 320, 361], "unavail": 21, "unbias": [47, 48, 49, 294, 329], "uncertainti": [30, 81, 83, 114, 124, 135, 136, 138, 162, 168, 171, 172, 179, 238, 240, 263, 265, 267, 299, 317, 321, 322, 345, 347], "uncondit": [348, 358], "under": [82, 286, 289, 296, 306, 335, 336], "underli": [12, 82, 130, 349], "undersampl": [166, 174, 176, 186, 192, 193, 217, 221, 222, 229, 292, 323, 328, 366], "underset": [84, 98, 99, 103, 104, 108, 116, 118, 120, 122, 124, 125, 135, 145, 172, 179, 276, 301, 302, 306, 338, 359, 360], "understood": 285, "undesir": [131, 267], "unet": [82, 96, 100, 101, 243, 279, 295, 324, 326, 327, 328, 329, 330, 357], "uneven": [12, 367], "unflatten": [100, 194, 251], "unfold": [0, 12, 18, 26, 34, 46, 81, 83, 90, 91, 103, 114, 118, 124, 132, 135, 136, 162, 165, 168, 171, 172, 179, 241, 256, 257, 258, 259, 263, 267, 271, 288, 311, 326, 334, 341, 345, 347, 348, 355, 358], "unfolded_build": [288, 335, 336, 337, 338, 339, 363], "unfolded_pgd": [335, 336, 339], "ungrid": 184, "unif": 75, "unifi": 349, "uniform": [59, 71, 170, 184, 193, 196, 197, 221, 222, 229, 255, 273, 276, 292], "uniform_phas": 193, "uniformgaussiannois": 42, "uniformli": [195, 230, 247, 357], "uniformnois": [306, 354], "union": [16, 19, 184, 272, 276], "uniqu": [98, 99], "unit": [88, 160, 172, 193, 220, 290, 291, 318], "unitari": 185, "univ": 342, "unknown": [47, 48, 169, 170, 294, 324, 330, 348], "unless": [292, 306, 323, 325, 338], "unlik": [19, 74, 83, 237, 276], "unmix": [170, 294], "unnormalis": [222, 229], "unorgan": 40, "unpickl": [306, 323, 325, 338], "unrol": [12, 27, 39, 241, 242, 256, 261, 279, 288, 323, 325, 334, 335, 336, 337, 338, 339, 357, 358, 363], "unsqueez": [162, 189, 276, 284, 289, 291, 292, 293, 294, 300, 301, 302, 309, 312, 317, 320, 334, 337], "unsupadversarialdiscriminatorloss": [51, 279, 366], "unsupadversarialgeneratorloss": [53, 279, 366], "unsupervis": [40, 56, 57, 58, 77, 78, 245, 254, 279, 294, 324, 326, 366], "unsur": [12, 18, 26, 34, 47, 48, 72, 81, 94, 102, 162, 164, 168, 172, 179, 262, 263, 299, 331, 332, 347], "unti": 259, "until": 323, "untouch": 142, "untrain": 355, "untrust": [306, 323, 325, 338], "unus": [65, 226], "unwrap": 194, "up": [12, 14, 20, 48, 82, 92, 99, 172, 245, 252, 255, 284, 288, 291, 306, 311, 334, 335, 337, 339, 365], "upcom": 296, "upconv": [79, 87], "updat": [12, 99, 108, 109, 117, 129, 144, 145, 146, 147, 148, 150, 158, 159, 162, 166, 167, 168, 170, 171, 173, 174, 175, 176, 179, 180, 181, 189, 197, 306, 310, 312, 318, 319, 337, 338, 343, 360, 369], "update_data_fidelity_fn": 117, "update_metrics_fn": 117, "update_paramet": [27, 39, 40, 42, 43, 158, 159, 162, 166, 167, 168, 170, 171, 173, 174, 176, 180, 181, 186, 189, 197, 353, 369], "update_params_fn": 117, "update_prior_fn": 117, "upload": [285, 316, 317, 320], "upp": [211, 212], "upper": [211, 212], "upsampl": [79, 87, 92, 97, 352], "upsample_mod": [79, 87], "upscal": 97, "urban": [22, 25, 294, 324, 365], "urban100": [25, 279, 324], "urban100_hr": 25, "urban100_inpainting_homography_model": 324, "urban100hr": [279, 324, 365], "url": [97, 265, 282, 285, 288, 290, 292, 293, 294, 305, 306, 310, 311, 313, 316, 317, 318, 319, 320, 323, 325, 326, 327, 328, 329, 346, 350, 359], "us": [1, 3, 9, 13, 15, 16, 19, 24, 28, 31, 32, 36, 40, 41, 42, 45, 61, 65, 66, 68, 69, 70, 73, 84, 85, 88, 95, 96, 97, 99, 111, 117, 119, 128, 139, 150, 155, 176, 183, 192, 193, 204, 206, 207, 209, 210, 211, 212, 215, 216, 226, 239, 242, 250, 276, 279, 282, 283, 284, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 365, 366, 367, 369, 370], "usag": [43, 95, 243, 267, 270, 353, 367, 370], "use_bicubic_init": 312, "use_brovei": 177, "use_checkpoint": 97, "use_fft": 165, "use_filt": 203, "use_fp16": 82, "use_sigmoid": 93, "user": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 26, 42, 79, 82, 83, 87, 96, 97, 121, 143, 161, 164, 177, 241, 258, 259, 272, 294, 306, 316, 323, 325, 338, 346, 353, 360, 363, 369], "userwarn": [276, 287, 292, 296, 318, 319, 323, 329], "usual": [19, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 243, 276, 318, 319, 367], "usv": 316, "ut": [112, 311], "util": [0, 12, 20, 22, 44, 61, 66, 69, 84, 92, 116, 139, 155, 156, 157, 160, 169, 172, 177, 179, 189, 190, 191, 195, 233, 234, 236, 241, 242, 243, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 346, 353, 359, 365, 367], "uv": 276, "uv_coordin": 276, "v": [108, 117, 129, 162, 170, 172, 178, 179, 256, 291, 310, 316, 328, 363, 367], "v2": 289, "v_": [148, 150, 360], "v_adjoint": [162, 291, 316], "v_k": 310, "val": [14, 21, 365], "val1": 21, "val_dataset": 21, "val_transform": [283, 284, 301, 302, 309, 312], "valid": [14, 16, 43, 135, 158, 165, 177, 189, 205, 207, 208, 210, 215, 228, 282, 302, 324, 361, 364], "valu": [12, 15, 16, 18, 19, 42, 47, 48, 49, 52, 68, 70, 80, 82, 84, 89, 97, 98, 105, 107, 108, 115, 116, 117, 130, 131, 135, 138, 140, 142, 143, 155, 156, 159, 162, 166, 167, 173, 174, 176, 181, 186, 188, 195, 204, 212, 217, 218, 223, 227, 234, 236, 239, 240, 251, 257, 258, 259, 267, 270, 276, 285, 290, 291, 292, 293, 305, 306, 316, 317, 318, 323, 325, 329, 335, 336, 338, 339, 351, 353, 357, 360, 361, 367], "vanilla": [12, 18, 26, 34, 46, 81, 83, 108, 114, 124, 132, 135, 136, 143, 165, 168, 172, 179, 195, 257, 259, 263, 265, 267, 268, 271, 299, 314, 315, 340, 341, 347], "var": [238, 317, 320], "var_has_converg": 238, "varepsilon": [235, 236, 318, 319], "varepsilon_t": 236, "varga": 239, "vari": [12, 14, 27, 39, 100, 101, 166, 186, 189, 194, 217, 221, 222, 228, 229, 272, 323, 352, 357], "variabl": [48, 49, 75, 90, 91, 98, 99, 107, 108, 109, 110, 111, 112, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 132, 134, 135, 137, 139, 140, 141, 142, 145, 251, 262, 283, 284, 288, 301, 302, 309, 310, 312, 313, 320, 323, 329, 330, 337, 338, 355, 360, 365], "varianc": [81, 167, 237, 238, 239, 240, 316, 317, 318, 320, 361, 367], "variant": [103, 104], "variat": [50, 98, 99, 108, 114, 124, 135, 136, 140, 143, 159, 162, 168, 172, 179, 263, 267, 268, 299, 303, 304, 306, 347, 348, 357, 359, 366], "varieti": [348, 365], "variou": [6, 7, 11, 161, 166, 170, 174, 176, 186, 194, 279, 292, 317, 324, 329, 330, 348, 361, 364, 366, 370], "vdot": [183, 191, 233], "vector": [12, 33, 47, 48, 49, 75, 76, 80, 98, 103, 162, 166, 170, 172, 178, 179, 212, 222, 229, 240, 316, 349], "veloc": 244, "verbos": [12, 26, 30, 33, 80, 98, 99, 108, 117, 155, 156, 172, 234, 235, 236, 237, 238, 239, 240, 241, 243, 263, 276, 279, 283, 285, 290, 295, 301, 302, 306, 309, 310, 311, 312, 313, 316, 317, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 360, 365], "verbose_individual_loss": 12, "veri": [243, 276, 279, 290, 306, 319], "verif": 13, "verifi": [13, 14, 17, 21, 22, 24, 25, 156, 166, 172, 175, 238, 240, 330], "verify_split_dataset_integr": [14, 21], "version": [13, 14, 15, 16, 17, 20, 21, 24, 25, 27, 72, 86, 98, 99, 160, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 260, 290, 318, 346], "vert": [121, 289], "vert_2": 121, "vertic": [14, 50, 217, 221, 222, 229, 269, 323], "vgg": 279, "vi": [295, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339], "via": [26, 36, 37, 79, 82, 83, 84, 95, 96, 102, 116, 130, 138, 159, 160, 162, 166, 171, 172, 178, 179, 185, 188, 189, 195, 227, 251, 276, 283, 300, 305, 306, 310, 316, 318, 319, 320, 323, 325, 327, 329, 330, 338, 346, 353, 356, 360, 361, 363, 365, 368, 370], "vid": 272, "vid_list": 272, "video": [19, 27, 39, 166, 221, 222, 229, 250, 251, 272, 323], "view": [15, 228, 232, 248, 270, 272, 283, 292, 306, 319, 320], "viridi": [276, 300], "virtual": [29, 256, 363], "visibl": [251, 276], "vision": [21, 113, 215, 276, 309], "visit": 319, "visual": [12, 276, 318, 319, 334, 335, 336, 337, 339, 350, 352], "visualis": [186, 323, 328, 370], "vjp": [172, 178, 179], "vol": [98, 99], "volum": [16, 174, 176, 348], "volume_data": [289, 300], "volume_perserv": 244, "volume_sample_r": 16, "volumetr": 352, "voxel": [220, 365], "vrv": 316, "vu": [81, 83, 108, 114, 124, 129, 132, 135, 136, 143, 153, 154, 162, 168, 172, 179, 188, 263, 265, 267, 268, 299, 314, 315, 347, 359], "w": [27, 39, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 80, 92, 95, 97, 100, 101, 113, 133, 134, 158, 159, 160, 161, 163, 166, 170, 171, 172, 174, 175, 176, 177, 184, 185, 186, 187, 188, 189, 192, 193, 194, 198, 199, 200, 205, 206, 207, 208, 209, 210, 215, 216, 217, 218, 219, 221, 222, 223, 226, 228, 229, 241, 251, 267, 270, 272, 276, 287, 289, 292, 300, 309, 319, 323, 336, 337, 357, 367, 370], "w_k": [189, 215], "wa": [18, 22, 43, 54, 55, 57, 58, 69, 74, 75, 76, 77, 78, 83, 85, 93, 95, 96, 97, 216, 239, 288, 294, 306, 319, 323, 328], "wai": [161, 279, 286, 288, 296, 325, 326, 327, 329, 330, 343, 353, 367, 369], "wald": 92, "walk": 291, "wandb": [12, 334, 339], "wandb_setup": 12, "wandb_vi": [12, 295, 323, 325, 326, 327, 329, 334, 335, 336, 337, 338, 339], "wang": [85, 245, 254, 294, 324, 345], "want": [12, 19, 26, 30, 33, 176, 194, 205, 208, 282, 289, 291, 296, 301, 302, 312, 348, 353, 367, 369], "warm": 99, "warn": [135, 244, 323, 329], "wavdict": 300, "wave": [220, 289], "wavelength": [220, 289], "wavelet": [81, 103, 104, 108, 114, 124, 135, 136, 142, 143, 162, 168, 171, 172, 179, 263, 267, 268, 288, 299, 303, 304, 335, 338, 347, 357, 360], "waveletdenois": [104, 142, 288, 300, 338, 357], "waveletdictdenois": [300, 357], "waveletprior": [276, 300, 302, 335, 338, 360], "we": [12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 30, 40, 43, 69, 80, 82, 86, 103, 117, 118, 120, 129, 160, 161, 162, 166, 172, 173, 174, 176, 178, 186, 189, 193, 198, 261, 267, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 342, 343, 348, 350, 353, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370], "weight": [12, 29, 37, 50, 51, 53, 54, 55, 56, 57, 58, 60, 69, 79, 82, 83, 84, 87, 88, 95, 96, 97, 116, 130, 152, 155, 170, 184, 212, 223, 257, 259, 288, 290, 295, 300, 305, 306, 310, 313, 319, 323, 325, 326, 327, 329, 334, 335, 337, 338, 348, 357], "weight_adv": [51, 53, 54, 55, 56, 57, 58], "weight_decai": [279, 295, 323, 324, 325, 326, 327, 328, 329, 330, 334, 336, 338, 339], "weight_mc": 56, "weights_onli": [306, 323, 325, 338], "weiss": [116, 215, 306], "welcom": [342, 343], "welford": 238, "well": [27, 29, 35, 36, 37, 38, 39, 46, 76, 117, 129, 160, 172, 195, 241, 257, 285, 291, 301, 302, 319, 345, 353, 359, 360], "were": [19, 279, 324, 336, 339], "wgan": [52, 279, 355, 366], "what": [16, 19, 296], "when": [12, 16, 19, 26, 28, 37, 38, 40, 43, 45, 63, 64, 80, 82, 99, 102, 108, 117, 130, 135, 136, 155, 172, 181, 194, 216, 227, 236, 247, 251, 279, 282, 283, 289, 292, 294, 310, 312, 316, 319, 320, 327, 328, 336, 343, 355, 357, 366, 368, 369], "where": [12, 13, 14, 15, 17, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 56, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 80, 84, 92, 94, 98, 99, 103, 104, 106, 107, 108, 114, 116, 117, 119, 121, 123, 129, 130, 133, 135, 138, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 158, 159, 160, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 221, 222, 223, 225, 226, 229, 230, 233, 235, 236, 240, 241, 245, 251, 252, 253, 255, 256, 257, 267, 270, 271, 276, 279, 283, 285, 287, 289, 290, 292, 294, 295, 300, 301, 302, 305, 306, 309, 310, 311, 316, 318, 319, 320, 323, 325, 326, 327, 329, 330, 335, 336, 337, 338, 348, 353, 354, 355, 359, 360, 361, 363, 365, 367], "wherea": [12, 40, 43, 63, 64, 188, 201, 316, 318, 319, 358], "whether": [16, 19, 22, 30, 33, 52, 62, 75, 88, 90, 91, 93, 97, 98, 99, 108, 131, 143, 155, 212, 237, 257, 258, 259, 264, 265, 271, 366], "which": [9, 12, 18, 19, 22, 26, 27, 30, 35, 37, 38, 39, 42, 43, 45, 46, 47, 48, 49, 52, 69, 75, 79, 83, 95, 100, 101, 105, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 131, 132, 134, 135, 137, 138, 139, 140, 141, 142, 150, 159, 160, 161, 165, 170, 171, 172, 174, 176, 179, 184, 188, 195, 203, 204, 205, 207, 209, 210, 212, 234, 235, 238, 241, 242, 243, 244, 246, 251, 252, 253, 254, 255, 257, 259, 264, 265, 269, 283, 284, 286, 288, 289, 290, 292, 294, 300, 301, 302, 305, 306, 309, 312, 316, 317, 318, 319, 320, 323, 325, 327, 329, 330, 334, 335, 336, 338, 339, 345, 348, 350, 353, 354, 355, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370], "while": [9, 76, 78, 81, 88, 90, 91, 92, 101, 108, 155, 203, 204, 279, 285, 289, 290, 291, 325, 355, 359, 360, 370], "whilst": 243, "white": [158, 159, 165, 172, 305, 318, 319, 352], "whiten": 276, "whole": [22, 27, 39, 86, 102, 116, 238, 305, 306, 323, 326, 327, 328, 329, 330, 366], "whose": [34, 169, 195, 269, 271, 360], "why": [318, 319], "wide": [15, 365], "widefield_bpae_b": 15, "widefield_bpae_g": 15, "widefield_bpae_r": 15, "widehat": [235, 236, 300, 318, 319], "wider": 12, "width": [16, 23, 82, 90, 91, 116, 166, 174, 183, 186, 195, 220, 249, 267, 270, 300], "wiki": [70, 156, 163, 167, 219, 282, 289], "wikimedia": [285, 316, 317, 320], "wikipedia": [70, 156, 163, 167, 219, 282, 285, 289, 292, 316, 317, 320], "win": 343, "window": [89, 97, 202, 343], "window_s": 97, "wise": [62, 169, 183, 279, 352], "withbia": 95, "within": [14, 16, 76, 78, 82, 88, 90, 91, 92, 101, 203, 204, 352, 358, 364, 368], "without": [16, 26, 27, 39, 43, 69, 160, 171, 179, 195, 216, 218, 223, 226, 246, 247, 251, 323, 324, 343, 353, 369], "work": [9, 21, 80, 95, 251, 276, 285, 287, 289, 292, 295, 306, 312, 317, 318, 319, 323, 325, 329, 338, 370], "worker": 26, "workflow": 343, "world": [21, 285, 316, 317, 320, 324, 342], "worldview": [22, 294], "wors": 328, "would": [276, 369], "wrap": [12, 13, 28, 31, 32, 41, 45, 59, 65, 71, 74, 194, 244, 250, 251, 311, 334, 335, 336, 339, 357, 367], "wrap_flatten_c": 194, "wrapper": [24, 25, 46, 100, 101, 309, 350, 356, 357], "write": [142, 235, 236, 300, 301, 302, 311, 312, 318, 319, 337, 360, 368, 369], "writer": 272, "written": [108, 366], "wv": [103, 104, 142, 276, 288, 300, 302, 335, 338], "wv_list": 276, "wvdim": [103, 104, 142, 300], "ww": 205, "www": [20, 342], "wx": 335, "x": [12, 15, 18, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 79, 81, 82, 83, 84, 86, 88, 89, 91, 95, 96, 97, 98, 99, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 219, 220, 225, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 250, 251, 252, 253, 254, 255, 256, 259, 260, 266, 272, 273, 274, 275, 276, 279, 283, 284, 285, 287, 289, 290, 291, 292, 293, 294, 296, 300, 301, 302, 306, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 335, 336, 337, 338, 346, 348, 349, 352, 353, 354, 355, 358, 359, 360, 361, 363, 365, 366, 367, 369, 370], "x0": [172, 318, 319, 337], "x0_pred": 319, "x0_t": 319, "x1": 350, "x2": [21, 98, 99, 292, 350], "x3": 21, "x4": 21, "x64": [294, 296, 323], "x_": [108, 117, 129, 144, 145, 146, 147, 148, 149, 150, 151, 152, 172, 236, 240, 257, 300, 310, 311, 316, 320, 335, 336, 338, 359, 360, 363], "x_0": 145, "x_adj": 353, "x_aux": 318, "x_bar": 316, "x_cur": 300, "x_dagger": [172, 353], "x_est": [290, 293], "x_gd_rand": 290, "x_gd_spec": 290, "x_grai": 282, "x_gt": [117, 276, 290, 301, 302, 310, 311, 313], "x_hat": [94, 259, 294, 300, 324, 346, 348, 359, 360, 363, 367], "x_hist": 117, "x_i": [36, 37, 112, 121, 128, 134, 170, 360, 367], "x_in": 30, "x_init": [116, 117, 179, 235, 236, 238, 276, 288, 323, 338], "x_k": [108, 117, 129, 144, 145, 147, 148, 149, 150, 151, 152, 240, 257, 310, 311, 320, 335, 336, 338, 359, 360, 363], "x_lin": [285, 301, 302, 310, 311, 313, 316, 317, 320], "x_model": [276, 301, 302, 310, 311, 313], "x_n": 300, "x_net": [12, 27, 28, 29, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 100, 101, 243, 294, 366, 367, 369], "x_noisi": 318, "x_out": 305, "x_phase": 290, "x_phase_gd_rand": 290, "x_phase_gd_spec": 290, "x_phase_pnp": 290, "x_phase_spec": 290, "x_pnp": 290, "x_prev": [117, 300, 310], "x_prox": [318, 353], "x_prox_scal": 318, "x_rgb": 282, "x_sampl": 318, "x_sampled_sc": 318, "x_shift": [183, 251, 370], "x_spec": 290, "x_stretch_factor_min": [245, 252, 253, 254, 255], "x_t": [236, 245, 252, 253, 254, 255, 319], "x_train": 18, "x_true": [311, 318, 319], "x_tv": 301, "x_wv": 302, "xdg_data_hom": 262, "xhat": [108, 234, 236, 287, 300, 317, 318, 319], "xlabel": 318, "xlin": 291, "xlin2": 291, "xml": 20, "xprox": 291, "xprox2": 291, "xset": [108, 114, 135, 172, 179, 349, 353, 359, 360], "xt": 319, "xt_next": 319, "xxx": [13, 14, 17, 20, 21, 22, 24, 25, 365], "xxxxxxxxxxx": 16, "xy": 220, "y": [12, 18, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 51, 53, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 80, 82, 84, 90, 92, 94, 98, 99, 100, 101, 103, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 124, 125, 126, 127, 128, 129, 133, 134, 135, 139, 144, 145, 146, 147, 148, 150, 152, 158, 159, 160, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 207, 208, 209, 210, 215, 220, 225, 232, 234, 235, 236, 238, 240, 241, 242, 243, 245, 251, 252, 257, 259, 272, 276, 279, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 305, 306, 310, 311, 313, 316, 317, 318, 319, 320, 323, 324, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339, 346, 348, 349, 352, 353, 354, 355, 356, 358, 359, 360, 361, 363, 365, 366, 369, 370], "y1": 353, "y2": [291, 353], "y_": [187, 287], "y_1": [43, 139, 328], "y_2": [43, 139, 328], "y_bar": 316, "y_denois": 318, "y_hat": [56, 57, 58, 243], "y_i": [36, 37, 44, 106, 107, 112, 128, 134, 139, 190, 326, 360], "y_in": 30, "y_n": 176, "y_scale": 318, "y_shift": 183, "y_stretch_factor_min": [245, 252, 253, 254, 255], "y_t": [166, 186], "yaman": 43, "yang": 92, "yann": [328, 335], "yawli": 21, "ye": [357, 358, 360, 366, 370], "yet": 285, "yield": [142, 286, 335, 336], "ylabel": 318, "yosida": [138, 361], "you": [12, 20, 22, 26, 65, 69, 86, 176, 194, 205, 208, 244, 276, 279, 282, 284, 289, 291, 294, 299, 300, 306, 317, 318, 319, 320, 323, 325, 326, 327, 328, 329, 330, 334, 338, 339, 343, 344, 346, 351, 357, 358, 365, 366, 367], "your": [12, 18, 26, 51, 53, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 81, 89, 113, 114, 124, 135, 136, 138, 159, 162, 164, 168, 172, 179, 238, 240, 263, 265, 267, 279, 291, 297, 298, 299, 310, 321, 322, 343, 347, 348, 351, 358, 365, 369], "yourself": [323, 346, 367], "yscale": 290, "yset": [108, 114, 172, 179, 349, 353, 359, 360], "yyi": 365, "yyyi": 12, "z": [40, 47, 48, 49, 75, 80, 117, 122, 126, 127, 129, 133, 138, 144, 146, 147, 162, 165, 168, 172, 179, 180, 184, 196, 220, 240, 245, 252, 253, 254, 255, 276, 279, 285, 289, 310, 337, 352, 354, 355, 360, 361], "z0": 220, "z10": [219, 220], "z11": [219, 220], "z4": [219, 220], "z5": [219, 220, 282, 289], "z6": [219, 220, 282, 289], "z7": [219, 220], "z8": [219, 220], "z9": [219, 220], "z_": [108, 129, 144, 145, 146, 147, 240, 257, 300, 310, 316, 338, 360, 363], "z_0": 145, "z_i": 40, "z_k": [108, 129, 144, 145, 146, 147, 257, 310, 320, 338, 360, 363], "z_p": 300, "z_prev": 310, "zebrafish": 15, "zenodo": [195, 204], "zernik": [219, 220, 282, 289], "zernike_polynomi": [219, 282, 289], "zero": [27, 39, 43, 45, 103, 107, 155, 158, 159, 165, 171, 172, 183, 184, 186, 189, 192, 193, 194, 205, 216, 218, 222, 223, 247, 275, 276, 282, 287, 289, 290, 291, 292, 306, 316, 318, 319, 323, 336, 352, 369], "zero_boundari": 244, "zero_grad": [306, 369], "zeros_lik": [172, 292, 300, 336, 337, 360], "zeta": [236, 318], "zhang": [113, 283, 309], "zhou": 318, "zip": [14, 17, 24, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339], "zoom": [245, 252, 255, 269, 350], "zoom_factor_min": [245, 252, 253, 254, 255], "zoran": [116, 306], "zuo": [113, 309], "zygalaki": 239, "\u00f6ktem": 337}, "titles": ["API", "deepinv.datasets", "deepinv.loss", "deepinv.metric", "deepinv.models", "deepinv.optim", "deepinv.physics", "deepinv.sampling", "deepinv.training", "deepinv.transform", "deepinv.unfolded", "deepinv.utils", "Trainer", "CBSD68", "DIV2K", "FMD", "FastMRISliceDataset", "Flickr2kHR", "HDF5Dataset", "Kohler", "LidcIdriSliceDataset", "LsdirHR", "NBUDataset", "PatchDataset", "Set14HR", "Urban100HR", "generate_dataset", "Artifact2ArtifactLoss", "BaseLossScheduler", "EILoss", "FNEJacobianSpectralNorm", "InterleavedEpochLossScheduler", "InterleavedLossScheduler", "JacobianSpectralNorm", "Loss", "MCLoss", "MOEILoss", "MOILoss", "Neighbor2Neighbor", "Phase2PhaseLoss", "R2RLoss", "RandomLossScheduler", "ScoreLoss", "SplittingLoss", "StackedPhysicsLoss", "StepLossScheduler", "SupLoss", "SureGaussianLoss", "SurePGLoss", "SurePoissonLoss", "TVLoss", "DiscriminatorLoss", "DiscriminatorMetric", "GeneratorLoss", "SupAdversarialDiscriminatorLoss", "SupAdversarialGeneratorLoss", "UAIRGeneratorLoss", "UnsupAdversarialDiscriminatorLoss", "UnsupAdversarialGeneratorLoss", "ERGAS", "L1L2", "LPIPS", "LpNorm", "MAE", "MSE", "Metric", "NIQE", "NMSE", "PSNR", "QNR", "SSIM", "SpectralAngleMapper", "ArtifactRemoval", "AutoEncoder", "BM3D", "CSGMGenerator", "ConvDecoder", "DCGANDiscriminator", "DCGANGenerator", "DRUNet", "DeepImagePrior", "Denoiser", "DiffUNet", "DnCNN", "EPLLDenoiser", "ESRGANDiscriminator", "EquivariantDenoiser", "GSDRUNet", "ICNN", "MedianFilter", "PDNet_DualBlock", "PDNet_PrimalBlock", "PanNet", "PatchGANDiscriminator", "Reconstructor", "Restormer", "SCUNet", "SwinIR", "TGVDenoiser", "TVDenoiser", "TimeAgnosticNet", "TimeAveragingNet", "UNet", "WaveletDenoiser", "WaveletDictDenoiser", "to_complex_denoiser", "AmplitudeLoss", "AmplitudeLossDistance", "BaseOptim", "Bregman", "BregmanL2", "Bregman_ICNN", "BurgEntropy", "DPIR", "DataFidelity", "Distance", "EPLL", "FixedPoint", "IndicatorL2", "IndicatorL2Distance", "L1", "L12Prior", "L1Distance", "L1Prior", "L2", "L2Distance", "LogPoissonLikelihood", "LogPoissonLikelihoodDistance", "NegEntropy", "OptimIterator", "PatchNR", "PatchPrior", "PnP", "PoissonLikelihood", "PoissonLikelihoodDistance", "Potential", "Prior", "RED", "ScorePrior", "StackedPhysicsDataFidelity", "TVPrior", "Tikhonov", "WaveletPrior", "optim_builder", "ADMMIteration", "CPIteration", "DRSIteration", "FISTAIteration", "GDIteration", "HQSIteration", "MDIteration", "PGDIteration", "SMIteration", "fStep", "gStep", "GaussianMixtureModel", "conjugate_gradient", "gradient_descent", "Blur", "BlurFFT", "CompressedSensing", "Decolorize", "DecomposablePhysics", "Demosaicing", "Denoising", "Downsampling", "DynamicMRI", "GammaNoise", "GaussianNoise", "Haze", "HyperSpectralUnmixing", "Inpainting", "LinearPhysics", "LogPoissonNoise", "MRI", "MRIMixin", "MultiCoilMRI", "Pansharpen", "PhaseRetrieval", "Physics", "PoissonGaussianNoise", "PoissonNoise", "Ptychography", "PtychographyLinearOperator", "RadioInterferometry", "RandomPhaseRetrieval", "SequentialMRI", "SinglePhotonLidar", "SinglePixelCamera", "SpaceVaryingBlur", "StackedLinearPhysics", "StackedPhysics", "StructuredRandom", "StructuredRandomPhaseRetrieval", "TimeMixin", "Tomography", "UniformGaussianNoise", "UniformNoise", "adjoint_function", "bicubic_filter", "bilinear_filter", "gaussian_blur", "sinc_filter", "IRadon", "Radon", "conv2d", "conv2d_fft", "conv3d_fft", "conv_transpose2d", "conv_transpose2d_fft", "conv_transpose3d_fft", "histogram", "histogramdd", "multiplier", "multiplier_adjoint", "product_convolution2d", "Artifact2ArtifactSplittingMaskGenerator", "BaseMaskGenerator", "BernoulliSplittingMaskGenerator", "DiffractionBlurGenerator", "DiffractionBlurGenerator3D", "EquispacedMaskGenerator", "GaussianMaskGenerator", "GaussianSplittingMaskGenerator", "GeneratorMixture", "MotionBlurGenerator", "Phase2PhaseSplittingMaskGenerator", "PhysicsGenerator", "ProductConvolutionBlurGenerator", "RandomMaskGenerator", "SigmaGenerator", "build_probe", "generate_shifts", "stack", "DDRM", "DPS", "DiffPIR", "DiffusionSampler", "MonteCarlo", "SKRock", "ULA", "test", "train", "AdversarialTrainer", "CPABDiffeomorphism", "Homography", "Reflect", "Rotate", "Scale", "Shift", "ShiftTime", "Transform", "Affine", "Euclidean", "PanTiltRotate", "Similarity", "BaseDEQ", "BaseUnfold", "DEQ_builder", "unfolded_builder", "TensorList", "demo_mri_model", "get_data_home", "get_freer_gpu", "load_image", "load_url_image", "ones_like", "plot", "plot_curves", "plot_inset", "plot_ortho3D", "plot_parameters", "plot_videos", "rand_like", "randn_like", "zeros_like", "Radio interferometric imaging with deepinverse", "Advanced", "Computation times", "Imaging inverse problems with adversarial networks", "Adversarial Learning", "Computation times", "A tour of blur operators", "Image deblurring with custom deep explicit prior.", "Creating your own dataset", "Reconstructing an image using the deep image prior.", "Using huggingface dataset", "Single photon lidar operator for depth ranging.", "Saving and loading models", "3D diffraction PSF", "Random phase retrieval and reconstruction methods.", "Creating a forward operator.", "A tour of forward sensing operators", "Ptychography phase retrieval", "Remote sensing with satellite images", "Training a reconstruction network.", "Image transforms for equivariance &amp; augmentations", "Basics", "Computation times", "Examples", "3D wavelet denoising", "Image deblurring with Total-Variation (TV) prior", "Image inpainting with wavelet prior", "Optimization", "Computation times", "Expected Patch Log Likelihood (EPLL) for Denoising and Inpainting", "Patch priors for limited-angle computed tomography", "Patch Priors", "Computation times", "DPIR method for PnP image deblurring.", "PnP with custom optimization algorithm (Condat-Vu Primal-Dual)", "Plug-and-Play algorithm with Mirror Descent for Poisson noise inverse problems.", "Regularization by Denoising (RED) for Super-Resolution.", "Vanilla PnP for computed tomography (CT).", "Plug-and-Play", "Computation times", "Building your custom sampling algorithm.", "Image reconstruction with a diffusion model", "Implementing DiffPIR", "Implementing DPS", "Uncertainty quantification with PnP-ULA.", "Sampling", "Computation times", "Self-supervised MRI reconstruction with Artifact2Artifact", "Image transformations for Equivariant Imaging", "Self-supervised learning with Equivariant Imaging for MRI.", "Self-supervised learning from incomplete measurements of multiple operators.", "Self-supervised denoising with the Neighbor2Neighbor loss.", "Self-supervised learning with measurement splitting", "Self-supervised denoising with the SURE loss.", "Self-supervised denoising with the UNSURE loss.", "Self-Supervised Learning", "Computation times", "Computation times", "Deep Equilibrium (DEQ) algorithms for image deblurring", "Learned Iterative Soft-Thresholding Algorithm (LISTA) for compressed sensing", "Learned iterative custom prior", "Learned Primal-Dual algorithm for CT scan.", "Unfolded Chambolle-Pock for constrained image inpainting", "Vanilla Unfolded algorithm for super-resolution", "Unfolded", "Computation times", "Community", "How to Contribute", "Finding Help", "DeepInverse: a PyTorch library for imaging with deep learning", "Quickstart", "Computation times", "User Guide", "Math Notation", "Utils", "Defining New Operators", "Functional", "Introduction", "Operators &amp; Noise", "Adversarial Networks", "Artifact Removal", "Denoisers", "Introduction", "Iterative Reconstruction (PnP, RED, etc.)", "Optimization", "Diffusion and MCMC Algorithms", "Specific Networks", "Unfolded Algorithms", "Pretrained Weights", "Datasets", "Training Losses", "Metrics", "Using Multiple GPUs", "Trainer", "Transforms"], "titleterms": {"1": 296, "2": 296, "3": 296, "3d": [289, 300], "A": [282, 292], "No": [3, 367], "The": [276, 318, 319], "Their": 354, "adjoint_funct": 198, "admmiter": 144, "advanc": [9, 277, 299, 370], "adversari": [2, 4, 279, 280, 299, 355, 366], "adversarialtrain": 243, "affin": 252, "algorithm": [283, 285, 300, 301, 302, 306, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 334, 335, 336, 337, 339, 359, 360, 361, 363], "all": 318, "ambientgan": 279, "amplitudeloss": 106, "amplitudelossdist": 107, "an": [285, 302, 318, 359], "angl": 306, "api": 0, "appli": [286, 287], "approxim": 319, "architectur": [362, 363], "artifact": [4, 356], "artifact2artifact": 323, "artifact2artifactloss": 27, "artifact2artifactsplittingmaskgener": 216, "artifactremov": 72, "augment": 296, "autoencod": 73, "base": [2, 3, 4, 5, 6, 9, 283, 284, 295, 300, 301, 302, 309, 310, 312, 325, 326, 327, 329, 330, 334, 335, 336, 338, 339], "basedeq": 256, "baselossschedul": 28, "basemaskgener": 217, "baseoptim": 108, "baseunfold": 257, "basic": [282, 297, 299], "benefit": 291, "bernoullisplittingmaskgener": 218, "bicubic_filt": 199, "bilinear_filt": 200, "block": 10, "blur": [158, 282, 283, 292, 301, 309], "blurfft": 159, "bm3d": 74, "bregman": [5, 109, 360], "bregman_icnn": 111, "bregmanl2": 110, "brigg": 276, "buffer": 286, "build": 316, "build_prob": 231, "burgentropi": 112, "camera": 292, "carlo": [7, 317, 361], "cbsd68": 13, "chain": [7, 361], "chambol": 338, "check": 330, "class": [2, 3, 4, 5, 6, 9, 312, 316], "classic": [4, 357], "combin": 353, "commun": 342, "comparison": 290, "complex": 357, "compress": [292, 335, 336], "compressedsens": 160, "comput": [278, 281, 292, 298, 304, 306, 308, 313, 315, 322, 332, 333, 341, 347], "condat": 310, "condit": [279, 355], "confoc": 289, "conjugate_gradi": 156, "constrain": 338, "construct": 290, "contribut": 343, "conv2d": 205, "conv2d_fft": 206, "conv3d_fft": 207, "conv_transpose2d": 208, "conv_transpose2d_fft": 209, "conv_transpose3d_fft": 210, "convdecod": 76, "convolut": [282, 289], "correct": 290, "cpabdiffeomorph": 244, "cpiter": 145, "creat": [284, 286, 287, 291, 300, 316, 317, 320], "csgm": 279, "csgmgener": 75, "ct": [313, 337], "custom": [10, 283, 291, 310, 312, 316, 336, 337, 363], "data": [5, 283, 284, 286, 288, 295, 296, 300, 301, 302, 309, 310, 311, 312, 313, 318, 323, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 360], "datafidel": 114, "dataload": [284, 286], "dataset": [1, 279, 283, 284, 286, 295, 301, 302, 309, 310, 312, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339, 365], "dcgandiscrimin": 77, "dcgangener": 78, "ddrm": 234, "deblur": [283, 301, 309, 334], "decolor": [161, 292], "decompos": 291, "decomposablephys": 162, "deep": [4, 10, 283, 285, 334, 345, 355, 357, 363], "deepimageprior": 80, "deepinv": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "deepinvers": [276, 345], "defin": [279, 283, 285, 288, 295, 310, 311, 316, 317, 319, 320, 323, 328, 334, 335, 336, 337, 338, 339, 351], "definit": [306, 312, 354], "degrad": [283, 284, 295, 301, 302, 309, 310, 312, 325, 326, 334, 335, 336, 337, 338, 339], "demo_mri_model": 261, "demosa": [163, 292], "denois": [4, 81, 164, 290, 292, 296, 300, 305, 312, 317, 318, 319, 327, 329, 330, 357, 366], "depend": [319, 353], "depth": 287, "deq": 334, "deq_build": 258, "descent": [290, 293, 311], "descript": 350, "diffpir": [236, 318], "diffract": [282, 289], "diffractionblurgener": 219, "diffractionblurgenerator3d": 220, "diffunet": 82, "diffus": [7, 317, 319, 361], "diffusionsampl": 237, "dip": 285, "discrimin": 355, "discriminatorloss": 51, "discriminatormetr": 52, "displai": 293, "distanc": [5, 115], "distribut": [6, 354], "div2k": 14, "dncnn": 83, "downsampl": 165, "dp": [235, 319], "dpir": [113, 309], "drsiter": 146, "drunet": 79, "dual": [310, 337], "dykstra": 300, "dynam": 357, "dynamicmri": 166, "eiloss": 29, "em": 306, "epll": [116, 305, 306], "eplldenois": 84, "equilibrium": [10, 334, 363], "equispacedmaskgener": 221, "equivari": [296, 324, 325, 357], "equivariantdenois": 86, "erga": 59, "esrgandiscrimin": 85, "estim": 293, "etc": 359, "euclidean": 253, "evalu": [283, 301, 302, 309, 310, 311, 312, 313], "event": 342, "exampl": [12, 18, 22, 23, 25, 26, 27, 29, 30, 34, 35, 37, 38, 39, 43, 44, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 89, 90, 91, 92, 93, 94, 102, 103, 104, 108, 109, 112, 113, 114, 116, 118, 120, 124, 126, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 142, 143, 145, 148, 151, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 197, 201, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267, 268, 269, 270, 271, 272, 299, 317], "expect": 305, "explicit": 283, "explor": [301, 302], "extens": 300, "fastmrislicedataset": 16, "fidel": [5, 318, 337, 360], "filter": 287, "final": 293, "find": 344, "fistaiter": 147, "fixedpoint": 117, "flickr2khr": 17, "fmd": 15, "fnejacobianspectralnorm": 30, "forward": [285, 287, 288, 291, 292, 295, 306, 310, 313, 316, 317, 320, 338], "from": [285, 286, 290, 292, 293, 316, 317, 320, 326], "fstep": [153, 310], "full": [3, 367], "function": [6, 350, 352], "futur": 342, "gammanois": 167, "gan": [279, 355], "gaussian_blur": 201, "gaussianmaskgener": 222, "gaussianmixturemodel": 155, "gaussiannois": 168, "gaussiansplittingmaskgener": 223, "gditer": 148, "gener": [1, 279, 282, 283, 284, 285, 287, 289, 290, 291, 293, 295, 301, 302, 309, 316, 317, 318, 320, 325, 326, 327, 329, 330, 334, 335, 336, 338, 339, 353, 354, 365], "generate_dataset": 26, "generate_shift": 232, "generatorloss": 53, "generatormixtur": 224, "get_data_hom": 262, "get_freer_gpu": 263, "gpu": 368, "gradient": [290, 293, 335, 336], "gradient_desc": 157, "groundtruth": 276, "gsdrunet": 87, "gstep": [154, 310], "guid": 348, "haze": 169, "hdf5dataset": 18, "help": 344, "histogram": 211, "histogramdd": 212, "homographi": 245, "how": 343, "hqsiter": 149, "huggingfac": 286, "hyperspectralunmix": 170, "icnn": 88, "imag": [1, 4, 276, 279, 283, 284, 285, 290, 291, 292, 293, 294, 295, 296, 300, 301, 302, 305, 306, 309, 310, 312, 313, 316, 317, 320, 324, 325, 326, 327, 329, 330, 334, 335, 336, 338, 339, 345, 355], "implement": [318, 319, 359], "import": 276, "incomplet": 326, "indicatorl2": 118, "indicatorl2dist": 119, "initi": 290, "inpaint": [171, 292, 302, 305, 338], "input": 293, "instal": 319, "interferometr": 276, "interleavedepochlossschedul": 31, "interleavedlossschedul": 32, "internet": [285, 286, 290, 292, 293, 316, 317, 320], "introduct": [353, 358, 366, 367], "invers": [279, 283, 301, 302, 309, 310, 311, 313, 318, 319], "involv": 312, "iradon": 203, "iter": [5, 300, 316, 335, 336, 337, 359, 360], "jacobianspectralnorm": 33, "knee": 325, "kohler": 19, "l1": 120, "l12prior": 121, "l1distanc": 122, "l1l2": 60, "l1prior": 123, "l2": 124, "l2distanc": 125, "langevin": 7, "learn": [2, 280, 299, 325, 326, 328, 330, 331, 335, 336, 337, 345, 357, 366], "level": 330, "librari": [286, 345], "lidar": 287, "lidcidrislicedataset": 20, "like": 300, "likelihood": [305, 320], "limit": 306, "linear": [291, 353], "linearphys": 172, "list": 349, "lista": 335, "load": [283, 284, 285, 286, 288, 290, 292, 293, 294, 295, 300, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 319, 320, 323, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339], "load_imag": 264, "load_url_imag": 265, "log": 305, "logpoissonlikelihood": 126, "logpoissonlikelihooddist": 127, "logpoissonnois": 173, "loop": 306, "loss": [2, 34, 323, 327, 328, 329, 330, 366], "low": [334, 339], "lpip": 61, "lpnorm": 62, "lsdirhr": 21, "mae": 63, "markov": [7, 361], "match": 287, "math": 349, "mathemat": 349, "mcloss": 35, "mcmc": [320, 361], "mditer": 150, "measur": [276, 285, 287, 290, 293, 294, 316, 317, 320, 326, 328, 335, 336], "medianfilt": 89, "method": [290, 309, 358, 359, 361], "metric": [3, 65, 367], "microscop": 289, "mirror": 311, "mixtur": 282, "mmse": 317, "model": [4, 5, 279, 285, 287, 288, 293, 295, 301, 302, 305, 306, 309, 310, 311, 312, 313, 316, 317, 319, 320, 323, 328, 337, 338], "modul": 310, "moeiloss": 36, "moiloss": 37, "mont": [7, 317, 361], "montecarlo": 238, "motion": 282, "motionblurgener": 225, "mri": [174, 292, 323, 325], "mrimixin": 175, "mse": 64, "multicoilmri": 176, "multipl": [300, 326, 368], "multipli": 213, "multiplier_adjoint": 214, "natur": 276, "nbudataset": 22, "negentropi": 128, "neighbor2neighbor": [38, 327], "network": [2, 4, 279, 294, 295, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 355, 357, 362, 366], "neural": 294, "new": 351, "niqe": 66, "nmse": 67, "nois": [6, 285, 306, 311, 316, 317, 318, 320, 330, 354], "noisi": [327, 329, 330], "non": 357, "notat": 349, "ones_lik": 266, "oper": [6, 276, 282, 283, 285, 287, 288, 291, 292, 295, 300, 301, 302, 306, 309, 310, 312, 313, 316, 317, 320, 325, 326, 334, 335, 336, 337, 338, 339, 348, 351, 353, 354], "optim": [5, 283, 299, 301, 302, 303, 310, 360], "optim_build": 143, "optimiter": 129, "other": [11, 350, 366], "our": 291, "overal": 290, "overlap": 293, "overview": [352, 357, 360, 365, 366], "own": 284, "packag": 276, "pan": [292, 294], "pannet": 92, "pansharpen": 177, "pantiltrot": 254, "paramet": [306, 313, 325, 326, 327, 329, 330, 334, 335, 336, 337, 339, 353, 360], "particular": 312, "past": 342, "patch": [299, 305, 306, 307], "patchdataset": [1, 23], "patchgandiscrimin": 93, "patchnr": [130, 306], "patchprior": 131, "path": [283, 284, 288, 295, 300, 301, 302, 309, 310, 311, 312, 313, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339], "pattern": 276, "pdnet": 337, "pdnet_dualblock": 90, "pdnet_primalblock": 91, "pgditer": 151, "phantom": 337, "phase": [290, 293], "phase2phaseloss": 39, "phase2phasesplittingmaskgener": 226, "phaseretriev": 178, "photon": 287, "physic": [6, 179, 283, 293, 323, 353], "physicsgener": 227, "pixel": 292, "plai": [296, 299, 311, 314], "plot": [11, 267, 285, 287, 301, 302, 306, 310, 311, 313, 316, 317, 320, 335, 336, 339, 350], "plot_curv": 268, "plot_inset": 269, "plot_ortho3d": 270, "plot_paramet": 271, "plot_video": 272, "plug": [296, 299, 311, 314], "pnp": [132, 290, 309, 310, 311, 312, 313, 320, 339, 359], "pock": 338, "poisson": 311, "poissongaussiannois": 180, "poissonlikelihood": 133, "poissonlikelihooddist": 134, "poissonnois": 181, "potenti": [5, 135, 360], "precondit": 316, "predefin": [5, 359, 360, 365], "prep": 323, "prepar": [293, 328], "pretrain": 364, "primal": [310, 337], "prior": [4, 5, 136, 276, 283, 285, 299, 301, 302, 306, 307, 312, 316, 320, 336, 337, 355, 360], "probabl": 354, "probe": 293, "problem": [276, 279, 283, 300, 301, 302, 309, 310, 311, 312, 313, 318, 319], "product_convolution2d": 215, "productconvolutionblurgener": 228, "proxim": [335, 336], "psf": 289, "psnr": 68, "ptychographi": [182, 293], "ptychographylinearoper": 183, "put": 318, "pytorch": 345, "qnr": 69, "quantif": 320, "quickstart": 346, "r2rloss": 40, "radio": 276, "radiointerferometri": 184, "radon": 204, "rand_lik": 273, "randn_lik": 274, "random": [290, 337], "randomlossschedul": 41, "randommaskgener": 229, "randomphaseretriev": 185, "rang": 287, "raw": 294, "reconstruct": [283, 285, 290, 295, 306, 317, 323, 325, 326, 338, 348, 358, 359], "reconstructor": 94, "recov": 287, "red": [137, 312, 359], "refer": [3, 367], "reflect": 246, "regular": [2, 312, 318, 366], "remot": 294, "remov": [4, 356], "requir": 276, "resolut": [292, 312, 334, 339], "restorm": 95, "result": [283, 284, 285, 287, 288, 295, 300, 301, 302, 309, 310, 311, 312, 313, 316, 317, 320, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339], "retriev": [290, 293], "ri": 276, "rotat": 247, "routin": 352, "run": [285, 306, 316, 317, 320], "sampl": [7, 276, 299, 316, 317, 318, 320, 321], "sampler": [316, 317, 320], "satellit": 294, "save": [288, 338], "scale": 248, "scan": 337, "schedul": [2, 318, 319, 366], "scoreloss": 42, "scoreprior": 138, "scunet": 96, "self": [2, 299, 323, 325, 326, 327, 328, 329, 330, 331, 366], "sens": [292, 294, 335], "sequentialmri": 186, "set": [283, 293, 295, 301, 302, 306, 309, 310, 313, 318, 325, 326, 327, 329, 330, 338], "set14hr": 24, "setup": [283, 284, 288, 290, 293, 295, 300, 301, 302, 309, 310, 311, 312, 313, 325, 326, 327, 329, 330, 334, 335, 336, 337, 338, 339], "sharpen": [292, 294], "shift": 249, "shifttim": 250, "shuffl": 286, "sigmagener": 230, "signal": [287, 290], "similar": 255, "simpl": [9, 370], "simul": [276, 294], "sinc_filt": 202, "singl": [287, 292], "singlephotonlidar": 187, "singlepixelcamera": 188, "skrock": 239, "smiter": 152, "soft": 335, "solv": [276, 283, 294, 300, 301, 302, 309, 310, 313], "space": 282, "spacevaryingblur": 189, "specif": 362, "spectral": 290, "spectralanglemapp": 71, "split": 328, "splittingloss": 43, "ssim": 70, "stack": 233, "stackedlinearphys": 190, "stackedphys": 191, "stackedphysicsdatafidel": 139, "stackedphysicsloss": 44, "standard": 316, "step": [318, 319], "steplossschedul": 45, "stream": 286, "structuredrandom": 192, "structuredrandomphaseretriev": 193, "subsampl": 326, "summari": 364, "supadversarialdiscriminatorloss": 54, "supadversarialgeneratorloss": 55, "super": [292, 312, 339], "supervis": [2, 299, 323, 325, 326, 327, 328, 329, 330, 331, 366], "suploss": 46, "sure": 329, "suregaussianloss": 47, "surepgloss": 48, "surepoissonloss": 49, "swinir": 97, "symbol": 349, "tensorlist": [11, 260, 350], "term": 337, "test": [241, 295, 305, 306, 323, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 348], "tgvdenois": 98, "thi": 312, "threshold": 335, "tikhonov": 141, "time": [278, 281, 298, 304, 308, 315, 322, 332, 333, 341, 347, 370], "timeagnosticnet": 100, "timeaveragingnet": 101, "timemixin": 194, "to_complex_denois": 105, "togeth": 318, "toi": [287, 291], "tomographi": [195, 292, 306, 313], "total": 301, "tour": [282, 292], "train": [8, 242, 279, 295, 306, 323, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 348, 366], "trainabl": 337, "trainer": [12, 369], "transform": [9, 251, 286, 296, 324, 370], "tv": 301, "tvdenois": 99, "tvloss": 50, "tvprior": 140, "uair": 279, "uairgeneratorloss": 56, "ula": [240, 316, 320], "uncertainti": 320, "uncondit": 355, "unet": 102, "unfold": [10, 299, 335, 336, 337, 338, 339, 340, 363], "unfolded_build": 259, "uniformgaussiannois": 196, "uniformnois": 197, "unsupadversarialdiscriminatorloss": 57, "unsupadversarialgeneratorloss": 58, "unsur": 330, "up": [283, 293, 295, 301, 302, 309, 310, 313, 325, 326, 327, 329, 330, 338], "urban100hr": 25, "us": [12, 18, 22, 23, 25, 26, 27, 29, 30, 34, 35, 37, 38, 39, 43, 44, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 89, 90, 91, 92, 93, 94, 102, 103, 104, 108, 109, 112, 113, 114, 116, 118, 120, 124, 126, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 142, 143, 145, 148, 151, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 197, 201, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267, 268, 269, 270, 271, 272, 285, 286, 291, 300, 318, 319, 368], "user": 348, "util": [4, 5, 11, 348, 350, 357, 360], "vanilla": [313, 339], "vari": 282, "variat": 301, "verifi": 291, "video": [9, 370], "visual": [290, 293], "volum": 300, "vu": 310, "wavelet": [276, 300, 302], "waveletdenois": 103, "waveletdictdenois": 104, "waveletprior": 142, "weight": [276, 336, 339, 364], "widefield": 289, "your": [284, 316, 318, 319], "zeros_lik": 275}})